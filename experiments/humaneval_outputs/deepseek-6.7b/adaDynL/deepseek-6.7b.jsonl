{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            if temp != \"\":\n                temp += char\n        if char == \")\":\n            stack.pop()\n            temp += char\n            if not stack:\n                result.append(temp)\n                temp = \"\"\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    results = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1 if not numbers else eval('*'.join(map(str, numbers))))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a or b\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    music_string = music_string.split()\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note] for note in music_string]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: num_dict[x]))\n\n", "result": "failed: ''", "passed": false}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.upper() if char.islower() else char.lower() for char in string)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    assert len(xs) % 2 == 0, \"Number of coefficients must be even\"\n    assert xs[-1] != 0, \"Last coefficient must not be zero\"\n    return -xs[-2] / (2 * xs[-1])\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "completion": "    divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in divisible_by_three])\n    result = l.copy()\n    for i, value in zip(divisible_by_three, sorted_values):\n        result[i] = value\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    evens = sorted([l[i] for i in range(0, len(l), 2)])\n    res = [evens.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return res\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    count = 0\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n        i += 1\n    return fib(i-1)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        start = i + 1\n        end = len(l) - 1\n        while start < end:\n            total = l[i] + l[start] + l[end]\n            if total < 0:\n                start += 1\n            elif total > 0:\n                end -= 1\n            else:\n                return True\n    return False\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return n * n\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    num_set = set(l)\n    for num in l:\n        if -num in num_set:\n            return True\n    return False\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 4):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "completion": "    sorted_l = sorted(l)\n    length = len(sorted_l)\n    if length % 2 == 0:\n        return (sorted_l[length // 2 - 1] + sorted_l[length // 2]) / 2\n    else:\n        return sorted_l[length // 2]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in text if char not in vowels])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i] for i in range(1, len(xs))]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - 2):\n            a, b, c = b, c, a + b + c\n        return c\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, re.findall(r'\\d+', s))\n    return n - apples - oranges\n", "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/68", "completion": "    smallest_even_node = [float('inf'), -1]\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_node[0]:\n            smallest_even_node = [node, i]\n    return smallest_even_node if smallest_even_node[1] >= 0 else []\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    c = Counter(lst)\n    max_val = max(c.keys())\n    for i in range(max_val, 0, -1):\n        if i in c and c[i] >= i:\n            return i\n    return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    sum1 = sum(len(i) for i in lst1)\n    sum2 = sum(len(i) for i in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and is_prime(a)\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return True\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    i = 1\n    while i <= x:\n        if n ** i == x:\n            return True\n        i += 1\n    return False\n\n", "result": "timed out", "passed": false}
{"task_id": "HumanEval/77", "completion": "    return int(round(a ** (1. / 3))) ** 3 == a\n", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "    primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for i in num if i in primes)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    grades_dict = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n    return [grades_dict[min(grades_dict.keys(), key=lambda x:abs(x-y))] for y in grades]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    else:\n        return 2 * starts_one_ends(n - 1)\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "    binary_N = bin(N)[2:]\n    sum_digits = sum(int(digit) for digit in binary_N)\n    return bin(sum_digits)[2:]\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + 2 * 2) % 26 +  ascii_offset)\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "completion": "    sentences = re.split('[.?!]', S)\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n\n", "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                if char in vowels:\n                    encoded_message += chr(ord(char) - 32)\n                else:\n                    encoded_message += chr(ord(char) - 32)\n            else:\n                if char in vowels:\n                    encoded_message += chr(ord(char) + 32)\n                else:\n                    encoded_message += chr(ord(char) + 32)\n        else:\n            encoded_message += char\n    return encoded_message\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    return False\n", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    return round(float(value))\n\n", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "completion": "    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2 * i)\n        else:\n            stones.append(n + 2 * i)\n    return stones\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "    return s.replace(',', '').split()\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([n for n in x if not has_even_digit(n)])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    numbers = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    arr = [i for i in arr if 1 <= i <= 9]\n    arr.sort(reverse=True)\n    return [numbers[i] for i in arr]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_to_n(i) for i in range(1, n + 1)]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(is_palindrome(i) for i in range(1, n+1) if i % 2 == 0)\n    odd_count = sum(is_palindrome(i) for i in range(1, n+1) if i % 2 != 0)\n\n    return (even_count, odd_count)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return sum(sum_digits(n) > 0 for n in arr)\n\n", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr == sorted(arr[i:] + arr[:i]):\n            return True\n    return False\n\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "    letter_counts = {}\n    for letter in test.split():\n        if letter not in letter_counts:\n            letter_counts[letter] = 1\n        else:\n            letter_counts[letter] += 1\n\n    max_count = max(letter_counts.values())\n    return {k: v for k, v in letter_counts.items() if v == max_count}\n\n", "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "completion": "    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [f\"the number of odd elements {count_odd(s)}n the str{count_odd(s)}ng {s} of the {count_odd(s)}nput.\" for s in lst]\n\n", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    total_wells = sum(sum(row) for row in grid)\n    buckets = math.ceil(total_wells / capacity)\n    return buckets\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "    s1, s2 = lst\n    s = s1 + s2\n    stack = []\n    for p in s:\n        if p == '(':\n            stack.append(p)\n        elif p == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if not stack else 'No'\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum(i for i in arr[:k] if len(str(i)) <= 2)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    date_list = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month, day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or (month in [1, 3, 5, 7, 8, 10, 12] and day > 31) or (month in [4, 6, 9, 11] and day > 30) or (month == 2 and day > 29):\n        return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    return lst == sorted(lst)\n", "result": "failed: This prints if this assert fails 5 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    sum_magnitudes = 0\n    prod_signs = 1\n    for num in arr:\n        if num < 0:\n            prod_signs *= -1\n        sum_magnitudes += abs(num)\n    return prod_signs * sum_magnitudes\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n    dp[0][0][0] = grid[0][0]\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    heap = [(grid[0][0], 0, 0, 0)]\n    while heap:\n        val, x, y, steps = heapq.heappop(heap)\n        if steps < dp[x][y][steps]:\n            dp[x][y][steps] = val\n            for dx, dy in moves:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and steps + 1 <= k:\n                    new_val = val + grid[nx][ny]\n                    if new_val < dp[nx][ny][steps + 1]:\n                        heapq.heappush(heap, (new_val, nx, ny, steps + 1))\n    min_val = min(dp[i][j][k] for i in range(n) for j in range(n))\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if dp[i][j][k] == min_val:\n                return dp[i][j][:k]\n    return []\n", "result": "failed: name 'heapq' is not defined", "passed": false}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n    elif n == 2:\n        return [0, 3, 2]\n    elif n == 3:\n        return [0, 3, 2, 8]\n    else:\n        sequence = [0, 3, 2, 8]\n        for i in range(4, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) >= 1 and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(bracket)\n    return len(stack) >= 1\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "completion": "    return sum(map(lambda x: math.ceil(x)**2, lst))\n\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/134", "completion": "    return txt[-1].isalpha() and txt[-2] == ' ' if len(txt) > 0 else False\n\n", "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "    return n % 4 == 0\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)\n\n", "result": "failed: name 'factorial' is not defined", "passed": false}
{"task_id": "HumanEval/140", "completion": "    text = re.sub(r' {2,}', '-', text)\n    text = re.sub(r' ', '_', text)\n    return text\n\n", "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/141", "completion": "    import re\n\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.([a-z]{3})$'\n    match = re.match(pattern, file_name)\n\n    if match:\n        return 'Yes'\n    else:\n        return 'No'\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    return sum\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    return (x_num * n_den) % (x_den * n_num) == 0\n\n", "result": "failed: test1", "passed": false}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    cnt = [0] * 3\n    res = 0\n    for num in a:\n        cnt[num % 3] += 1\n    res += cnt[0] * (cnt[0] - 1) * (cnt[0] - 2) // 6\n    res += cnt[1] * (cnt[1] - 1) // 2 * cnt[2]\n    res += cnt[2] * (cnt[2] - 1) // 2 * cnt[1]\n    return res\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2:\n        i1, i2 = i2, i1\n    return tuple(planets[i1+1:i2])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    lst = [i for i in lst if len(i) % 2 == 0]\n    return sorted(lst)\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    return sum([i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = extensions[0]\n    strongest_strength = sum(1 for c in extensions[0] if c.isupper()) - sum(1 for c in extensions[0] if c.islower())\n\n    for extension in extensions[1:]:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f'{class_name}.{strongest_extension}'\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[-1:] + b[:-1]\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n                      90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v',\n                      4: 'iv', 1: 'i'}\n    mini_roman = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            mini_roman += roman_numerals[key]\n            number -= key\n    return mini_roman\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    max_word = max(words, key=lambda word: len(set(word)))\n    if len(set(max_word)) == len(max_word):\n        return max_word\n    else:\n        return min(word for word in words if len(set(word)) == len(max_word))\n\n", "result": "failed: t2", "passed": false}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n    return eval(expression)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    if text == \"\":\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n\n", "result": "failed: name 'hashlib' is not defined", "passed": false}
{"task_id": "HumanEval/163", "completion": "    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n", "result": "failed: Test 1", "passed": false}
