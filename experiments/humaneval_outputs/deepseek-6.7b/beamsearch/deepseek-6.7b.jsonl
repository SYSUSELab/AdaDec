{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] < threshold:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[start:i+1].replace(' ', ''))\n    return groups\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    return decimal_part\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(n - mean) for n in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    result = []\n    groups = paren_string.split()\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1 if not numbers else eval('*'.join(map(str, numbers))))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[i], result[-1]))\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return a\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    distinct_characters = set(string.lower())\n    return len(distinct_characters)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: num_dict[x]))\n\n", "result": "failed: ''", "passed": false}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    smallest_difference = numbers[1] - numbers[0]\n    closest_elements = (numbers[0], numbers[1])\n\n    for i in range(1, len(numbers) - 1):\n        difference = numbers[i + 1] - numbers[i]\n        if difference < smallest_difference:\n            smallest_difference = difference\n            closest_elements = (numbers[i], numbers[i + 1])\n\n    return closest_elements\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [n for n in l if n > 0]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    a, b, c = xs[-3:]\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n", "result": "failed: not enough values to unpack (expected 3, got 2)", "passed": false}
{"task_id": "HumanEval/33", "completion": "    divisible_by_three = [v for i, v in enumerate(l) if i % 3 == 0]\n    divisible_by_three.sort()\n    result = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(divisible_by_three.pop(0))\n        else:\n            result.append(v)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "    return sorted(list(set(l)))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    evens = sorted([l[i] for i in range(0, len(l), 2)])\n    res = [evens.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return res\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        f = fib(i)\n        if is_prime(f):\n            n -= 1\n            if n == 0:\n                return f\n        i += 1\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        start = i + 1\n        end = len(l) - 1\n        while start < end:\n            total = l[i] + l[start] + l[end]\n            if total < 0:\n                start += 1\n            elif total > 0:\n                end -= 1\n            else:\n                return True\n    return False\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return n * n\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    nums = set(l)\n    for num in nums:\n        if -num in nums:\n            return True\n    return False\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "completion": "    sorted_l = sorted(l)\n    length = len(sorted_l)\n    if length % 2 == 0:\n        return (sorted_l[length // 2 - 1] + sorted_l[length // 2]) / 2\n    else:\n        return sorted_l[length // 2]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i >= t:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return Counter(s0) == Counter(s1)\n\n", "result": "failed: name 'Counter' is not defined", "passed": false}
{"task_id": "HumanEval/55", "completion": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i] for i in range(1, len(xs))]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - 2):\n            a, b, c = b, c, a + b + c\n        return c\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, re.findall(r'\\d+', s))\n    return n - apples - oranges\n", "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/68", "completion": "    even_nodes = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    return min(even_nodes, default=[], key=lambda x: (x[0], x[1]))\n\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    c = Counter(lst)\n    max_val = max(c.keys())\n    for i in range(max_val, 0, -1):\n        if i in c and c[i] >= i:\n            return i\n    return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    sum1 = sum(len(i) for i in lst1)\n    sum2 = sum(len(i) for i in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    factors = []\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a /= prime\n        if len(factors) > 3:\n            return False\n    return len(factors) == 3\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        i = 2\n        while i <= x:\n            if i**n == x:\n                return True\n            i += 1\n        return False\n\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "    return int(round(a ** (1. / 3))) ** 3 == a\n", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "    prime_hex = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for i in num if i in prime_hex)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    grade_scale = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    return [letter_grades[i] for i in range(len(grade_scale)) if grades[i] >= grade_scale[i]]\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    else:\n        return 2 * starts_one_ends(n - 1)\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "    binary_N = bin(N)[2:]\n    sum_digits = sum(int(digit) for digit in binary_N)\n    return bin(sum_digits)[2:]\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return ' '.join(new_words)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 +  ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "completion": "    sentences = re.split('[.?!]', S)\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n\n", "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += vowels[char]\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    else:\n        lower = 0\n        upper = 0\n        for key in dict.keys():\n            if key.islower():\n                lower += 1\n            elif key.isupper():\n                upper += 1\n            else:\n                return False\n        if lower == len(dict) or upper == len(dict):\n            return True\n        else:\n            return False\n", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "completion": "    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2 * i)\n        else:\n            stones.append(n + 2 * i)\n    return stones\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "    return s.replace(',', '').split()\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([n for n in x if not has_even_digit(n)])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    arr = [i for i in arr if 1 <= i <= 9]\n    arr.sort(reverse=True)\n    return [num2words[i] for i in arr]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_to_n(i) for i in range(1, n + 1)]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum > 0:\n            count += 1\n    return count\n\n", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/109", "completion": "    # Write your code here\n    for i in range(len(arr)):\n        if arr == sorted(arr[i:] + arr[:i]):\n            return True\n    return False\n\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "    histogram = {}\n    for letter in test.split():\n        histogram[letter] = histogram.get(letter, 0) + 1\n    max_count = max(histogram.values()) if histogram else 0\n    return {k: v for k, v in histogram.items() if v == max_count}\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "    for ch in c:\n        s = s.replace(ch, '')\n    return (s, s == s[::-1])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [f\"the number of odd elements {count_odd(s)}n the str{count_odd(s)}ng {s} of the {count_odd(s)}nput.\" for s in lst]\n\n", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    buckets = [0]*n\n    total_wells = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                buckets[i] += 1\n            total_wells += grid[i][j]\n    total_buckets = math.ceil(total_wells/capacity)\n    return total_buckets\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "    s1, s2 = lst\n    s = s1 + s2\n    stack = []\n    for p in s:\n        if p == '(':\n            stack.append(p)\n        elif p == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if not stack else 'No'\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "    pass\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(list(set(odd_numbers)))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n\n    date_parts = date.split('-')\n\n    if len(date_parts) != 3:\n        return False\n\n    month, day, year = date_parts\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month, day, year = int(month), int(day), int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return False\n\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\n    if month == 2:\n        if day > 29:\n            return False\n        elif day == 29:\n            if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0):\n                return False\n\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n\n", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    sum_magnitudes = 0\n    prod_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num < 0:\n            prod_signs *= -1\n        elif num > 0:\n            prod_signs *= 1\n        else:\n            return 0\n    return sum_magnitudes * prod_signs\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[[float('inf')] * (n * n + 1) for _ in range(n)] for _ in range(n)]\n    dp[0][0][1] = grid[0][0]\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    heap = [(grid[0][0], 0, 0, 1)]\n\n    while heap:\n        cost, x, y, k = heapq.heappop(heap)\n        if k == n * n:\n            return sorted([grid[i][j] for i in range(n) for j in range(n)])\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and k + 1 <= n * n and cost + grid[nx][ny] < dp[nx][ny][k + 1]:\n                dp[nx][ny][k + 1] = cost + grid[nx][ny]\n                heapq.heappush(heap, (dp[nx][ny][k + 1], nx, ny, k + 1))\n\n    return []\n\n", "result": "failed: name 'heapq' is not defined", "passed": false}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                seq.append(1 + i // 2)\n            else:\n                seq.append(seq[-1] + seq[-2] + seq[-3])\n        return seq\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product if product != 1 else 0\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(bracket)\n    return bool(stack)\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "completion": "    import math\n    return sum([math.ceil(i)**2 for i in lst])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "    return txt[-1].isalpha() and txt[-2] == ' ' if len(txt) > 0 else False\n\n", "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [i for i in lst if i < 0]\n    pos_nums = [i for i in lst if i > 0]\n\n    if not neg_nums:\n        max_neg = None\n    else:\n        max_neg = max(neg_nums)\n\n    if not pos_nums:\n        min_pos = None\n    else:\n        min_pos = min(pos_nums)\n\n    return (max_neg, min_pos)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "    if n < 10:\n        return False\n    else:\n        return n % 4 == 0\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n\n", "result": "failed: name 'factorial' is not defined", "passed": false}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    if text[0] == \"_\":\n        text = text[1:]\n    if text[-1] == \"_\":\n        text = text[:-1]\n    return text\n\n", "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    import re\n    pattern = r'^[A-Za-z][A-Za-z0-9]{0,2}\\.([tT][xX][tT]|[eE][xX][eE]|[dD][lL][lL])$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    return (x_num * n_den) % (x_den * n_num) == 0\n\n", "result": "failed: test1", "passed": false}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        planet1_index = planets_order.index(planet1)\n        planet2_index = planets_order.index(planet2)\n        if planet1_index < planet2_index:\n            return tuple(planets_order[planet1_index+1:planet2_index])\n        else:\n            return tuple(planets_order[planet2_index+1:planet1_index])\n    except ValueError:\n        return ()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    lst = [i for i in lst if len(i) % 2 == 0]\n    return sorted(lst)\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum += num ** 2\n    return sum * 2\n", "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = extensions[0]\n    strongest_strength = sum(1 for c in extensions[0] if c.isupper()) - sum(1 for c in extensions[0] if c.islower())\n    for extension in extensions[1:]:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return f'{class_name}.{strongest_extension}'\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    if a.find(b) != -1:\n        return True\n    else:\n        for i in range(len(b)):\n            b = b[1:] + b[0]\n            if a.find(b) != -1:\n                return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n                      100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n                      10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    mini_roman = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            mini_roman += roman_numerals[key]\n            number -= key\n    return mini_roman\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n    return eval(expression)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n\n", "result": "failed: name 'hashlib' is not defined", "passed": false}
{"task_id": "HumanEval/163", "completion": "    if a > b:\n        a, b = b, a\n\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n", "result": "failed: Test 1", "passed": false}
