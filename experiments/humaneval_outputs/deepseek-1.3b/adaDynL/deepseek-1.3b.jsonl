{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    count = 0\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            count += 1\n        elif paren_string[i] == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i+1])\n                start = i+1\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    def max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [max_depth(s) for s in paren_string.split()]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n        product_numbers *= number\n    return (sum_numbers, product_numbers)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return a\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[0:i+1] for i in range(len(string))]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: num_dict[num]))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return -1\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/25", "completion": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [n for n in l if n > 0]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff_idx = len(xs) - 1 - xs[::-1].index(max(xs))\n    return -xs[max_coeff_idx] / xs[max_coeff_idx + 1]\n\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/33", "completion": "    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    divisible_by_three.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three.pop(0)\n    return l\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "    return sorted(list(set(l)))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    def count_sevens(n: int):\n        return str(n).count('7')\n\n    return sum(count_sevens(i) for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices[i // 2]\n    return l\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n < 2:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i >= n:\n            if is_prime(fib_i):\n                return fib_i\n        i += 1\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    if len(l) <= 1:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    s = sorted(l)\n    return (s[n//2] if n % 2 == 1 else (s[n//2 - 1] + s[n//2]) / 2)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n + 1))\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [xs[i] * i for i in range(1, len(xs))]\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n        elif char == 'y' and len(s) > 0 and s[-1].lower() in vowels:\n            count += 1\n    return count\n", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/65", "completion": "    digits = str(x)\n    shift %= len(digits)\n    return digits[-shift:] + digits[:-shift]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    s = s.replace(\"apples\", \"\")\n    s = s.replace(\"oranges\", \"\")\n    s = s.replace(\"mangoes\", \"\")\n    s = s.replace(\"and\", \"\")\n    s = s.replace(\" \", \"\")\n    return n - int(s)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/68", "completion": "    even_values = [value for value in arr if value % 2 == 0]\n    smallest_even_value = min(even_values) if even_values else []\n    smallest_even_value_index = [i for i, value in enumerate(arr) if value == smallest_even_value][0] if even_values else []\n    return [smallest_even_value, smallest_even_value_index]\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    freq = Counter(lst)\n    for i in range(len(lst), 0, -1):\n        if freq[i] >= i:\n            return i\n    return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n\n#", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/72", "completion": "    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    return is_palindrome(q) and sum_of_elements(q) <= w\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) <= count_chars(lst2) else lst2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "    if x < 1 or n < 1:\n        return False\n    return math.isclose(x**(1.0/n), int(x**(1.0/n)), rel_tol=1e-5)\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/77", "completion": "    return a == round(a ** (1. / 3)) ** 3\n", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for c in num:\n        if c in \"2357BD\":\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n\n#", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    def grade_equation(grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n\n    return grade_equation(grades)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 9 * (10 ** (n - 2))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "    return bin(sum(int(digit) for digit in str(N)))[2:]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/86", "completion": "    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort()\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n#", "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "HumanEval/89", "completion": "    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min1 = min(lst)\n    lst.remove(min1)\n    min2 = min(lst)\n    return min2\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "completion": "    S = S.replace('.', '').replace('?', '').replace('!', '')\n    return S.count('I')\n", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            encoded_message += alphabet[(index + 2) % len(alphabet)]\n        else:\n            encoded_message += char\n\n    return encoded_message\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n\n    keys = dict.keys()\n    if all(isinstance(key, str) for key in keys):\n        if all(key.islower() for key in keys):\n            return True\n        elif all(key.isupper() for key in keys):\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(n) if is_prime(num)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    a, b = str(a), str(b)\n    a, b = a[::-1], b[::-1]\n    res = [0] * (len(a) + len(b))\n    for i in range(len(a)):\n        for j in range(len(b)):\n            res[i + j + 1] += int(a[i]) * int(b[j])\n            res[i + j] += res[i + j + 1] // 10\n            res[i + j + 1] %= 10\n    res = res[::-1]\n    while len(res) > 1 and res[0] == 0:\n        res.pop(0)\n    return int(''.join(map(str, res)))\n", "result": "failed: First test error: 479971", "passed": false}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if value >= 0:\n        return int(value) if value - int(value) < 0.5 else int(value) + 1\n    else:\n        return int(value) if abs(value - int(value)) < 0.5 else int(value) - 1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "completion": "    def next_odd(n):\n        return n + 1 if n % 2 != 0 else n\n\n    def next_even(n):\n        return n + 2 if n % 2 == 0 else n\n\n    pile = [n]\n    for _ in range(n - 1):\n        if n % 2 == 0:\n            pile.append(next_even(pile[-1]))\n        else:\n            pile.append(next_odd(pile[-1]))\n    return pile\n", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "completion": "    return s.replace(\",\", \"\").split()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        return '0' not in str(n)\n\n    return sorted(x for x in x if not has_even_digit(x))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/105", "completion": "    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num_to_word(num))\n    result.sort(reverse=True)\n    return result\n", "result": "failed: name 'num_to_word' is not defined", "passed": false}
{"task_id": "HumanEval/106", "completion": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    def sum_digits(n):\n        if n < 0:\n            return -sum_digits(-n)\n        digits = [int(d) for d in str(n)]\n        return sum(digits)\n\n    return sum(1 for n in arr if sum_digits(n) > 0)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "    def check_sorted(arr):\n        return all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n\n    return check_sorted(arr)\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    odd_lst2 = [num for num in lst2 if num % 2 != 0]\n\n    if len(even_lst1) > len(odd_lst2):\n        return \"NO\"\n    else:\n        return \"YES\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "    test_list = test.split()\n    count_dict = {}\n    for letter in test_list:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    max_count = max(count_dict.values())\n    return {k: v for k, v in count_dict.items() if v == max_count}\n", "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "completion": "    s = s.replace(c, '')\n    return (s, s == s[::-1])\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/113", "completion": "    def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count_odd(s), count_odd(s), count_odd(s), count_odd(s)) for s in lst]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array = nums[i:j+1]\n            current_sum = sum(sub_array)\n            min_sum = min(min_sum, current_sum)\n    return min_sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    def max_fill(grid, capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                    if i > 0:\n                        dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)\n                    if j > 0:\n                        dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n        return sum(sum(row) for row in dp)\n\n    return max_fill(grid, capacity)\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] in consonants and word[i + 1] in consonants:\n            return word[i]\n    return \"\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    s1, s2 = lst\n    if not is_balanced(s1) or not is_balanced(s2):\n        return 'No'\n    return 'Yes'\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "    def maximum(arr, k):\n        return sorted(arr, reverse=True)[:k]\n\n    return maximum(arr, k)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum(arr[:k])\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "completion": "    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    return sorted([num for num in sequence if num % 2 != 0])\n\n#", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3 or len(parts[0]) != 2 or len(parts[1]) != 2 or len(parts[2]) != 4:\n        return False\n\n    month, day, year = map(int, parts)\n\n    if month < 1 or month > 12 or day < 1 or day > 31:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\n    if month == 2 and day > 29:\n        return False\n\n    if month == 2 and day > 28:\n        return False\n\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for ch in txt if ch.islower() and (ord(ch) - ord('a')) % 2 == 1)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/127", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    return sum(abs(x) for x in arr) * prod(sign(x) for x in arr)\n\n", "result": "failed: name 'prod' is not defined", "passed": false}
{"task_id": "HumanEval/129", "completion": "    N = len(grid)\n    visited = [[False]*N for _ in range(N)]\n    queue = [(grid[0][0], 0, 0)]\n    res = []\n\n    while queue:\n        val, x, y = heapq.heappop(queue)\n        res.append(val)\n        if len(res) == k:\n            return res\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:\n                visited[nx][ny] = True\n                heapq.heappush(queue, (grid[nx][ny], nx, ny))\n\n    return res\n", "result": "failed: name 'heapq' is not defined", "passed": false}
{"task_id": "HumanEval/130", "completion": "    def tri(n):\n        if n == 0:\n            return [3]\n        elif n == 1:\n            return [3, 3]\n        elif n == 2:\n            return [3, 3, 8]\n        else:\n            sequence = [3, 3, 8]\n            for i in range(3, n + 1):\n                if i % 2 == 0:\n                    sequence.append(1 + i // 2)\n                else:\n                    sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n            return sequence\n    return tri(n)\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/131", "completion": "    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for d in odd_digits:\n            product *= d\n        return product\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "    return sum(int(round(i))**2 for i in lst)\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and last_char not in string.ascii_letters\n", "result": "failed: name 'string' is not defined", "passed": false}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            for j in range(i-1, -1, -1):\n                if arr[j] < arr[i]:\n                    return i\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    return (max(neg_ints) if neg_ints else None, min(pos_ints) if pos_ints else None)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    def compare_two(a, b):\n        if isinstance(a, str) and isinstance(b, str):\n            try:\n                return max(float(a.replace(\",\", \".\")), float(b.replace(\",\", \".\")))\n            except ValueError:\n                return None\n        elif isinstance(a, str):\n            try:\n                return max(float(a.replace(\",\", \".\")), b)\n            except ValueError:\n                return None\n        elif isinstance(b, str):\n            try:\n                return max(a, float(b.replace(\",\", \".\")))\n            except ValueError:\n                return None\n        else:\n            return max(a, b)\n\n    return compare_two(a, b)\n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n\n    for i in range(1, n // 2 + 1):\n        if (n - i) % 2 == 0:\n            for j in range(i, n // 2 + 1):\n                if (n - i - j) % 2 == 0:\n                    for k in range(j, n // 2 + 1):\n                        if (n - i - j - k) % 2 == 0:\n                            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    return text\n", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    import re\n    pattern = re.compile(r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$')\n    if pattern.match(file_name):\n        return 'Yes'\n    else:\n        return 'No'\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "    return sum(x**3 if i%3==0 else x**2 if i%4==0 else 0 for i,x in enumerate(lst))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split(' ')\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    def simplify_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        divisor = gcd(numerator, denominator)\n        return str(numerator // divisor) + '/' + str(denominator // divisor)\n\n    return simplify_fraction(x) == simplify_fraction(n)\n\n", "result": "failed: test1", "passed": false}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        str_num = str(abs(num))\n        if len(str_num) > 1 and str_num[0] in '13579' and str_num[-1] in '13579':\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 < idx2:\n        return tuple(planets[idx1+1:idx2])\n    else:\n        return tuple(planets[idx2+1:idx1])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return y if is_prime(n) else x\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n", "result": "failed: This prints if this assert fails 5 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-score[i]) for i in range(len(score))]\n", "result": "failed: name 'score' is not defined", "passed": false}
{"task_id": "HumanEval/153", "completion": "    max_strength = float('-inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b in a or b[i:]+b[:i] in a:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\n    mini_roman = ''\n    for i in range(len(values)):\n        count = int(number / values[i])\n        mini_roman += numerals[i] * count\n        number -= values[i] * count\n    return mini_roman\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n\n    return max_word\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n\n#", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "    def reverse_case(c):\n        if c.isupper():\n            return c.lower()\n        elif c.islower():\n            return c.upper()\n        else:\n            return c\n\n    def reverse_string(s):\n        return s[::-1]\n\n    letters = [c for c in s if c.isalpha()]\n    no_letters = [c for c in s if not c.isalpha()]\n\n    reversed_letters = [reverse_case(c) for c in letters]\n    reversed_no_letters = reverse_string(no_letters)\n\n    return ''.join(reversed_letters + reversed_no_letters)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n\n", "result": "failed: name 'hashlib' is not defined", "passed": false}
{"task_id": "HumanEval/163", "completion": "    return sorted([i for i in range(a, b+1) if i % 2 == 0])\n\n#", "result": "failed: Test 1", "passed": false}
