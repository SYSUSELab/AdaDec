{"problem_id": 1, "prompt": "R = 3\nC = 3\ndef min_cost(cost, m, n): \n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n    dp[0][0] = cost[0][0] \n    for i in range(1, m+1): \n        dp[i][0] = dp[i-1][0] + cost[i][0] \n    for j in range(1, n+1): \n        dp[0][j] = dp[0][j-1] + cost[0][j] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i][j] \n    return dp[m][n]", "\ndef min_cost(cost, m, n): \n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n    dp[0][0] = cost[0][0] \n    for i in range(1, m+1): \n        dp[i][0] = dp[i-1][0] + cost[i][0] \n    for j in range(1, n+1): \n        dp[0][j] = dp[0][j-1] + cost[0][j] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i][j] \n    return dp[m][n]", "\ndef min_cost(cost, m, n): \n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n    dp[0][0] = cost[0][0] \n    for i in range(1, m+1): \n        dp[i][0] = dp[i-1][0] + cost[i][0] \n    for j in range(1, n+1): \n        dp[0][j] = dp[0][j-1] + cost[0][j] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i][j] \n    return dp[m][n]"], "evaluation": true}
{"problem_id": 2, "prompt": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))", "\ndef similar_elements(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))", "\ndef similar_elements(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))"], "evaluation": false}
{"problem_id": 3, "prompt": "import math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 4, "prompt": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap", "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap", "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap[0]"], "evaluation": false}
{"problem_id": 5, "prompt": "def count_ways(n): \n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    dp = [0]*(n+1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]", "\ndef count_ways(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        dp = [0]*(n+1)\n        dp[0] = 0\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]", "\ndef count_ways(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        dp = [0]*(n+1)\n        dp[0] = 0\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]"], "evaluation": false}
{"problem_id": 6, "prompt": "def differ_At_One_Bit_Pos(a,b): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    return bin(a^b).count('1') == 1", "\ndef differ_At_One_Bit_Pos(a,b): \n    x = a ^ b\n    return bin(x).count('1') == 1", "\ndef differ_At_One_Bit_Pos(a,b): \n    x = a ^ b\n    return bin(x).count('1') == 1"], "evaluation": true}
{"problem_id": 7, "prompt": "import re\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)", "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    result = re.findall(pattern, text)\n    return result"], "evaluation": true}
{"problem_id": 8, "prompt": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))", "\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))", "\ndef square_nums(nums):\n    return list(map(lambda x: x ** 2, nums))"], "evaluation": true}
{"problem_id": 9, "prompt": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    n = len(str) \n    temp = str + str \n    rotations = []\n    for i in range(n): \n        rotations.append(temp[i : n + i]) \n    return min(rotations, key=len)", "\ndef find_Rotations(str): \n    n = len(str) \n    temp = str + str \n    rotations = []\n    for i in range(n): \n        rotations.append(temp[i : n + i]) \n    return min(rotations, key=len)", "\ndef find_Rotations(str): \n    n = len(str) \n    temp = str + str \n    rotations = []\n    for i in range(n): \n        rotations.append(temp[i : n + i]) \n    return rotations"], "evaluation": false}
{"problem_id": 10, "prompt": "import heapq\ndef small_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(n)]", "import heapq\n\ndef small_nnum(list1,n):\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(n)]", "import heapq\n\ndef small_nnum(list1,n):\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(n)]"], "evaluation": true}
{"problem_id": 11, "prompt": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == ch:\n            s[i] = ''\n            break\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == ch:\n            s[i] = ''\n            break\n    return ''.join(s)", "\ndef remove_Occ(s,ch): \n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == ch:\n            s[i] = ''\n            break\n    for i in range(len(s)-1,-1,-1):\n        if s[i] == ch:\n            s[i] = ''\n            break\n    return ''.join(s)", "\ndef remove_Occ(s,ch): \n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == ch:\n            s[i] = ''\n            break\n\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == ch:\n            s[i] = ''\n            break\n\n    return ''.join(s)"], "evaluation": true}
{"problem_id": 12, "prompt": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    M.sort(key=sum)\n    return M", "\ndef sort_matrix(M):\n    M.sort(key=sum)\n    return M", "\ndef sort_matrix(M):\n    M.sort(key=sum)\n    return M"], "evaluation": true}
{"problem_id": 13, "prompt": "from collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    return word_counts.most_common()", "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    return word_counts.most_common(1)[0][1]", "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    return word_counts.most_common(1)[0][1]"], "evaluation": false}
{"problem_id": 14, "prompt": "def find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    volume = (1/2) * l * b * h\n    return volume", "\ndef find_Volume(l,b,h) : \n    volume = (1/2) * l * b * h\n    return volume", "\ndef find_Volume(l,b,h) : \n    volume = (1/2) * l * b * h\n    return volume"], "evaluation": true}
{"problem_id": 15, "prompt": "import re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n    return re.findall('[A-Z][^A-Z]*', text)", "import re\n\ndef split_lowerstring(text):\n    return re.findall(r'[A-Z][^A-Z]*', text)", "import re\n\ndef split_lowerstring(text):\n    return re.findall(r'[A-Z][^A-Z]*', text)"], "evaluation": false}
{"problem_id": 16, "prompt": "import re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)", "import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'\\b[a-z]+_[a-z]+\\b', text)", "import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'\\b[a-z]+_[a-z]+\\b', text)"], "evaluation": false}
{"problem_id": 17, "prompt": "def square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    return 4 * a", "\ndef square_perimeter(a):\n    return 4 * a", "\ndef square_perimeter(a):\n    return 4 * a"], "evaluation": true}
{"problem_id": 18, "prompt": "NO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n    present = [False]*NO_OF_CHARS\n    for i in range(len(second_string)): \n        present[ord(second_string[i])] = True\n    result = [] \n    for i in range(len(string)): \n        if (present[ord(string[i])] == False): \n            result.append(string[i]) \n    return \"\".join(result)", "\ndef remove_dirty_chars(string, second_string): \n    present = [False]*NO_OF_CHARS\n    for i in range(len(second_string)): \n        present[ord(second_string[i])] = True\n    result = [] \n    for i in range(len(string)): \n        if (present[ord(string[i])] == False): \n            result.append(string[i]) \n    return \"\".join(result)", "\ndef remove_dirty_chars(string, second_string): \n    present = [False]*NO_OF_CHARS\n    for i in range(len(second_string)): \n        present[ord(second_string[i])] = True\n    result = [] \n    for i in range(len(string)): \n        if (present[ord(string[i])] == False): \n            result.append(string[i]) \n    return \"\".join(result)"], "evaluation": false}
{"problem_id": 19, "prompt": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))", "\ndef test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))", "\ndef test_duplicate(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"], "evaluation": true}
{"problem_id": 20, "prompt": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    pass", "\ndef is_woodall(x): \n    pass", "\ndef is_woodall(x): \n    pass"], "evaluation": false}
{"problem_id": 21, "prompt": "def multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(i*n)\n    return multiples", "\ndef multiples_of_num(m,n): \n    multiples = []\n    for i in range(1,m+1):\n        multiples.append(i*n)\n    return multiples", "\ndef multiples_of_num(m,n): \n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(n*i)\n    return multiples"], "evaluation": true}
{"problem_id": 22, "prompt": "def find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "\ndef find_first_duplicate(nums):\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            return num\n        nums_set.add(num)\n    return -1"], "evaluation": true}
{"problem_id": 23, "prompt": "def maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    return max(sum(i) for i in list1)", "\ndef maximum_Sum(list1): \n    max_sum = 0\n    for lst in list1:\n        max_sum = max(max_sum, sum(lst))\n    return max_sum", "\ndef maximum_Sum(list1): \n    max_sum = 0\n    for sublist in list1:\n        max_sum = max(max_sum, sum(sublist))\n    return max_sum"], "evaluation": true}
{"problem_id": 24, "prompt": "def binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    binary = str(binary)\n    decimal, i, n = 0, 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal", "\ndef binary_to_decimal(binary): \n    binary = str(binary)\n    decimal, i = 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary//10\n        i += 1\n    return decimal", "\ndef binary_to_decimal(binary): \n    binary = str(binary)\n    decimal, i, n = 0, 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal"], "evaluation": false}
{"problem_id": 25, "prompt": "def find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    return product", "\ndef find_Product(arr,n): \n    product = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            product *= arr[i]\n    return product", "\ndef find_Product(arr,n): \n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    return product"], "evaluation": true}
{"problem_id": 26, "prompt": "def check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    return all(item in test_list for item in K)", "\ndef check_k_elements(test_list, K):\n    return all(item in test_list for item in K)", "\ndef check_k_elements(test_list, K):\n    return all(item in test_list for item in K)"], "evaluation": false}
{"problem_id": 27, "prompt": "import re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    result = []\n    for item in list:\n        result.append(re.sub(r'\\d', '', item))\n    return result", "import re  \n\ndef remove(list): \n    result = []\n    for item in list:\n        result.append(re.sub(r'\\d+', '', item))\n    return result", "import re  \n\ndef remove(list): \n    result = []\n    for item in list:\n        result.append(re.sub(r'\\d+', '', item))\n    return result"], "evaluation": true}
{"problem_id": 28, "prompt": "def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    if k>n:\n        return 0\n    if k==0 or k==n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)", "\ndef binomial_Coeff(n,k): \n    if k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)", "\ndef binomial_Coeff(n,k): \n    if k>n:\n        return 0\n    if k==0 or k==n:\n        return 1\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"], "evaluation": true}
{"problem_id": 29, "prompt": "def get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res", "\ndef get_Odd_Occurrence(arr,arr_size):   \n    i = 0\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if (arr[i] == arr[j]):\n                count += 1\n \n        if (count % 2 != 0):\n            return arr[i]\n \n    return -1", "\ndef get_Odd_Occurrence(arr,arr_size):   \n    i = 0\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if (arr[i] == arr[j]):\n                count += 1\n \n        if (count % 2 != 0):\n            return arr[i]\n \n    return -1"], "evaluation": true}
{"problem_id": 30, "prompt": "def count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count", "\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count", "\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 31, "prompt": "def func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    from collections import Counter\n    import heapq\n\n    counter = Counter(nums)\n    heap = [(-count, num) for num, count in counter.items()]\n    heapq.heapify(heap)\n\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "\ndef func(nums, k):\n    from collections import Counter\n    import heapq\n\n    count = Counter(nums)\n    heap = [(-freq, num) for num, freq in count.items()]\n    heapq.heapify(heap)\n\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "\ndef func(nums, k):\n    from collections import Counter\n    import heapq\n\n    count = Counter(nums)\n    heap = [(-freq, num) for num, freq in count.items()]\n    heapq.heapify(heap)\n\n    return [heapq.heappop(heap)[1] for _ in range(k)]"], "evaluation": false}
{"problem_id": 32, "prompt": "import math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n    max_prime = -1\n    while n % 2 == 0: \n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            max_prime = i \n            n = n / i \n    if n > 2: \n        max_prime = n \n    return max_prime", "import math \n\ndef max_Prime_Factors (n): \n    max_prime = -1\n    while n % 2 == 0: \n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            max_prime = i \n            n = n / i \n    if n > 2: \n        max_prime = n \n    return int(max_prime)", "import math \n\ndef max_Prime_Factors (n): \n    max_Prime = -1\n    while n % 2 == 0: \n        max_Prime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            max_Prime = i \n            n = n / i \n    if n > 2: \n        max_Prime = n \n    return max_Prime"], "evaluation": true}
{"problem_id": 33, "prompt": "def decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N == 0:\n        return 0\n    else:\n        return N % 2 + 10 * decimal_To_Binary(N // 2)", "\ndef decimal_To_Binary(N): \n    if N == 0: \n        return 0\n    else: \n        return (N % 2 + 10 *\n                decimal_To_Binary(N // 2))", "\ndef decimal_To_Binary(N): \n    if N == 0: \n        return 0\n    else: \n        return (N % 2 + 10 *\n                decimal_To_Binary(N // 2))"], "evaluation": true}
{"problem_id": 34, "prompt": "def find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    total = ((N + 1) * (N + 2)) // 2\n    sum_of_ar = sum(ar)\n    return total - sum_of_ar", "\ndef find_missing(ar,N): \n    total = ((N + 1) * (N + 2)) // 2\n    sum_of_ar = sum(ar)\n    return total - sum_of_ar", "\ndef find_missing(ar,N): \n    total = ((N + 1) * (N + 2)) // 2\n    sum_of_ar = sum(ar)\n    return total - sum_of_ar"], "evaluation": false}
{"problem_id": 35, "prompt": "def find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    return n*(n+1)//2", "\ndef find_rect_num(n):\n    return n * (n + 1) // 2", "\ndef find_rect_num(n):\n    return n * (n + 1) // 2"], "evaluation": false}
{"problem_id": 36, "prompt": "def find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n    if p == 0 or q == 0:\n        return \"Invalid input\"\n    else:\n        fraction = p / q\n        fraction_str = str(fraction)\n        fraction_str = fraction_str.replace('.','')\n        if N > len(fraction_str):\n            return \"N is greater than the number of digits in the fraction\"\n        else:\n            return int(fraction_str[N-1])", "\ndef find_Nth_Digit(p,q,N) :  \n    if p == 0 or q == 0:\n        return \"Invalid input\"\n    else:\n        fraction = p / q\n        fraction_str = str(fraction)\n        fraction_str = fraction_str.replace('.', '')\n        if N > len(fraction_str):\n            return \"N is greater than the number of digits in the fraction\"\n        else:\n            return int(fraction_str[N-1])", "\ndef find_Nth_Digit(p,q,N) :  \n    if p == 0 or q == 0:\n        return \"Invalid input\"\n    else:\n        fraction = p / q\n        fraction_str = str(fraction)\n        fraction_str = fraction_str.replace('.', '')\n        if N > len(fraction_str):\n            return \"N is greater than the number of digits in the fraction\"\n        else:\n            return int(fraction_str[N-1])"], "evaluation": false}
{"problem_id": 37, "prompt": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    mixed_list.sort(key=lambda x: (str(type(x)), x))\n    return mixed_list", "\ndef sort_mixed_list(mixed_list):\n    mixed_list.sort(key=lambda x: (str(type(x)), x))\n    return mixed_list", "\ndef sort_mixed_list(mixed_list):\n    mixed_list.sort(key=lambda x: (isinstance(x, str), x))\n    return mixed_list"], "evaluation": true}
{"problem_id": 38, "prompt": "def div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even == 0 or odd == 0:\n        return 0\n    else:\n        return even / odd", "\ndef div_even_odd(list1):\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even == 0 or odd == 0:\n        return 0\n    else:\n        return even/odd", "\ndef div_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return 0\n    else:\n        return even_count / odd_count"], "evaluation": false}
{"problem_id": 39, "prompt": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        heapq.heappush(max_heap, (-freq, char))\n    result = []\n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        if not max_heap:\n            break\n        freq2, char2 = heapq.heappop(max_heap)\n        result.append(char2)\n        if freq < -1:\n            heapq.heappush(max_heap, (freq+1, char))\n        if freq2 < -1:\n            heapq.heappush(max_heap, (freq2+1, char2))\n    return ''.join(result) if len(result) == len(S) else \"\"", "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        heapq.heappush(max_heap, (-freq, char))\n    result = []\n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        if not max_heap:\n            break\n        freq_next, char_next = heapq.heappop(max_heap)\n        result.append(char_next)\n        if freq < -1:\n            heapq.heappush(max_heap, (freq+1, char))\n        if freq_next < -1:\n            heapq.heappush(max_heap, (freq_next+1, char_next))\n    return ''.join(result) if len(result) == len(S) else \"\"", "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        heapq.heappush(max_heap, (-freq, char))\n    result = []\n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        if not max_heap:\n            break\n        freq_next, char_next = heapq.heappop(max_heap)\n        result.append(char_next)\n        if freq < -1:\n            heapq.heappush(max_heap, (freq+1, char))\n        if freq_next < -1:\n            heapq.heappush(max_heap, (freq_next+1, char_next))\n    return \"\".join(result) if len(result) == len(S) else \"\""], "evaluation": true}
{"problem_id": 40, "prompt": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain(*nums))\n    freq_dict = Counter(flat_list)\n    return freq_dict", "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)", "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain(*nums))\n    freq_dict = dict(Counter(flat_list))\n    return freq_dict"], "evaluation": true}
{"problem_id": 41, "prompt": "def filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "def find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    Sum = 0\n    for i in range(0, n): \n        for j in range(i+1, n): \n            if (arr[i] == arr[j]): \n                Sum += arr[i] \n    return Sum", "\ndef find_Sum(arr,n): \n    sum = 0\n    s = set()\n  \n    for i in range(n): \n        if arr[i] in s: \n            sum += arr[i] \n        else: \n            s.add(arr[i]) \n            \n    return sum", "\ndef find_Sum(arr,n): \n    Sum = 0\n    for i in range(0, n): \n        for j in range(i+1, n): \n            if (arr[i] == arr[j]): \n                Sum += arr[i] \n    return Sum"], "evaluation": false}
{"problem_id": 43, "prompt": "import re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!!')", "import re\n\ndef text_match(text):\n    patterns = \"^[a-z]+_[a-z]+$\"\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!!')", "import re\n\ndef text_match(text):\n    patterns = \"^[a-z]+_[a-z]+$\"\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"], "evaluation": false}
{"problem_id": 44, "prompt": "import re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "import re\n\ndef text_match_string(text):\n    pattern = r\"^\\w+\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "import re\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 45, "prompt": "def get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    import math\n    num1 = l[0]\n    num2 = l[1]\n    gcd = math.gcd(num1, num2)\n\n    for i in range(2, len(l)):\n        gcd = math.gcd(gcd, l[i])\n\n    return gcd", "\ndef get_gcd(l):\n    import math\n    num1 = l[0]\n    num2 = l[1]\n    gcd = math.gcd(num1, num2)\n\n    for i in range(2, len(l)):\n        gcd = math.gcd(gcd, l[i])\n\n    return gcd", "\ndef get_gcd(l):\n    import math\n    num1 = l[0]\n    num2 = l[1]\n    gcd = math.gcd(num1, num2)\n\n    for i in range(2, len(l)):\n        gcd = math.gcd(gcd, l[i])\n\n    return gcd"], "evaluation": true}
{"problem_id": 46, "prompt": "def test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False", "\ndef test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False", "\ndef test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 47, "prompt": "def compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    fact_A = factorial(A)\n    fact_B = factorial(B)\n\n    last_digit_A = fact_A % 10\n    last_digit_B = fact_B % 10\n\n    if last_digit_A == 0 and last_digit_B == 0:\n        return 0\n    elif last_digit_A == 0 or last_digit_B == 0:\n        return 1\n    else:\n        return (last_digit_A * last_digit_B) % 10", "\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    fact_A = factorial(A)\n    fact_B = factorial(B)\n\n    last_digit_A = fact_A % 10\n    last_digit_B = fact_B % 10\n\n    if last_digit_A == 0 and last_digit_B == 0:\n        return 0\n    elif last_digit_A == 0 or last_digit_B == 0:\n        return 1\n    else:\n        return (fact_A // last_digit_A) % (fact_B // last_digit_B)", "\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    fact_A = factorial(A)\n    fact_B = factorial(B)\n\n    last_digit_A = fact_A % 10\n    last_digit_B = fact_B % 10\n\n    if last_digit_A == 0 and last_digit_B == 0:\n        return 0\n    elif last_digit_A == 0 or last_digit_B == 0:\n        return 1\n    else:\n        return (fact_A // last_digit_A) % (fact_B // last_digit_B) % 10"], "evaluation": false}
{"problem_id": 48, "prompt": "def odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    return n | 0bndef odd_bit_set_number(n):\n    return n | 0bndef odd_bit_set_number(n):\n    return n | 0bevaluation": false}
{"problem_id": 49, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = [nums[i][0] for i in range(N)]\n    return result", "\ndef specified_element(nums, N):\n    result = [nums[i][0] for i in range(N)]\n    return result", "\ndef specified_element(nums, N):\n    result = [nums[i][0] for i in range(N)]\n    return result"], "evaluation": false}
{"problem_id": 50, "prompt": "def min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    min_len_list = min(input_list, key=lambda x: len(x))\n    return min_len_list", "\ndef min_length_list(input_list):\n    min_len_list = min(input_list, key=lambda x: len(x))\n    return min_len_list", "\ndef min_length_list(input_list):\n    min_len_list = min(input_list, key=lambda x: len(x))\n    return min_len_list"], "evaluation": false}
{"problem_id": 51, "prompt": "def check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    if x==y==z:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"", "\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"", "\ndef check_equilateral(x,y,z):\n    if x==y==z:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")"], "evaluation": false}
{"problem_id": 52, "prompt": "def parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    return b*h", "\ndef parallelogram_area(b,h):\n    return b*h", "\ndef parallelogram_area(b,h):\n    area = b * h\n    return area"], "evaluation": true}
{"problem_id": 53, "prompt": "def check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False", "\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False", "\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 54, "prompt": "def counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list", "\ndef counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list", "\ndef counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    \n    for num in my_list:\n        count[num] += 1\n        \n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n        \n    return sorted_list"], "evaluation": true}
{"problem_id": 55, "prompt": "import math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n    return a*(r**(n-1))", "import math\n\ndef tn_gp(a,n,r):\n    return a*(r**(n-1))", "import math\n\ndef tn_gp(a,n,r):\n    return a*r**(n-1)"], "evaluation": true}
{"problem_id": 56, "prompt": "def check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    reverse = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp = temp // 10\n    if n == 2 * reverse - 1:\n        return True\n    else:\n        return False", "\ndef check(n):    \n    reverse = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp = temp // 10\n    if n == 2*reverse - 1:\n        return True\n    else:\n        return False", "\ndef check(n):    \n    reverse = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp = temp // 10\n    if n == 2*reverse - 1:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 57, "prompt": "def find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    arr.sort(reverse=True)\n    return int(\"\".join(map(str,arr)))", "\ndef find_Max_Num(arr,n) : \n    arr.sort(reverse=True)\n    return int(\"\".join(map(str,arr)))", "\ndef find_Max_Num(arr,n) : \n    arr.sort(reverse=True)\n    return int(\"\".join(map(str,arr)))"], "evaluation": true}
{"problem_id": 58, "prompt": "def opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    return (x ^ y) < 0", "\ndef opposite_Signs(x,y): \n    return (x ^ y) < 0", "\ndef opposite_Signs(x,y): \n    return (x ^ y) < 0"], "evaluation": true}
{"problem_id": 59, "prompt": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    return n * (3 * n - 2)", "\ndef is_octagonal(n): \n    return n * (3 * n - 2)", "\ndef is_octagonal(n): \n    return n * (3 * n - 2)"], "evaluation": true}
{"problem_id": 60, "prompt": "def max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    dp = [1]*n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if abs(arr[i] - arr[j]) <= 1 and dp[i]< dp[j] + 1 : \n                dp[i] = dp[j]+1\n    maximum = 0\n    for i in range(len(dp)): \n        maximum = max(maximum , dp[i]) \n    return maximum", "\ndef max_len_sub( arr, n): \n    dp = [1]*n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if abs(arr[i]-arr[j]) <= 1 and dp[i]< dp[j] + 1 : \n                dp[i] = dp[j]+1\n    maximum = 0\n    for i in range(len(dp)): \n        maximum = max(maximum , dp[i]) \n    return maximum", "\ndef max_len_sub( arr, n): \n    dp = [1]*n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if abs(arr[i] - arr[j]) <= 1 and dp[i]< dp[j] + 1 : \n                dp[i] = dp[j]+1\n    maximum = 0\n    for i in range(len(dp)): \n        maximum = max(maximum , dp[i]) \n    return maximum"], "evaluation": true}
{"problem_id": 61, "prompt": "from collections import defaultdict\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n    dp = defaultdict(int)\n    dp[0] = 1\n    prefix = 0\n    ans = 0\n    for c in s:\n        prefix += int(c)\n        ans += dp[prefix - len(s)]\n        dp[prefix] += 1\n    return ans", "from collections import defaultdict\n\ndef count_Substrings(s,n):\n    dp = defaultdict(int)\n    dp[0] = 1\n    prefix = 0\n    ans = 0\n    for i in range(n):\n        prefix += int(s[i])\n        ans += dp[prefix - (i+1)]\n        dp[prefix] += 1\n    return ans", "from collections import defaultdict\n\ndef count_Substrings(s,n):\n    dp = defaultdict(int)\n    dp[0] = 1\n    prefix = 0\n    ans = 0\n    for i in range(n):\n        prefix += int(s[i])\n        ans += dp[prefix - (i+1)]\n        dp[prefix] += 1\n    return ans"], "evaluation": false}
{"problem_id": 62, "prompt": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    return min(xs)", "\ndef smallest_num(xs):\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest", "\ndef smallest_num(xs):\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"], "evaluation": true}
{"problem_id": 63, "prompt": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"], "evaluation": false}
{"problem_id": 64, "prompt": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key = lambda x: x[1])", "\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key = lambda x: x[1])", "\ndef subject_marks(subjectmarks):\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks"], "evaluation": true}
{"problem_id": 65, "prompt": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])", "\ndef recursive_list_sum(data_list):\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])", "\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"], "evaluation": false}
{"problem_id": 66, "prompt": "def pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count", "\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count", "\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]", "\ndef bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]", "\ndef bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"], "evaluation": true}
{"problem_id": 68, "prompt": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))", "\ndef is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))", "\ndef is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))"], "evaluation": true}
{"problem_id": 69, "prompt": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    return s in [l[i:i+len(s)] for i in range(len(l)-len(s)+1)]", "\ndef is_sublist(l, s):\n    return s in [l[i:i+len(s)] for i in range(len(l)-len(s)+1)]", "\ndef is_sublist(l, s):\n    return s in [l[i:i+len(s)] for i in range(len(l)-len(s)+1)]"], "evaluation": true}
{"problem_id": 70, "prompt": "def get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    for i in Input:\n        if len(i) != k:\n            return False\n    return True", "\ndef get_equal(Input, k):\n    for i in Input:\n        if len(i) != k:\n            return False\n    return True", "\ndef get_equal(Input, k):\n    for i in Input:\n        if len(i) != k:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 71, "prompt": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums", "\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums", "\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums"], "evaluation": true}
{"problem_id": 72, "prompt": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if i*i - j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef dif_Square(n): \n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i - j*j) == n:\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef dif_Square(n): \n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i - j*j) == n:\n                return True\n            j += 1\n        i += 1\n    return False"], "evaluation": false}
{"problem_id": 73, "prompt": "import re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n    delimiters = [' ', ',', '.']\n    regex_pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(regex_pattern, text)", "import re\n\ndef multiple_split(text):\n    delimiters = [' ', ',', '.']\n    regex_pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(regex_pattern, text)", "import re\n\ndef multiple_split(text):\n    delimiters = [' ', ',', '.']\n    regex_pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(regex_pattern, text)"], "evaluation": false}
{"problem_id": 74, "prompt": "def is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n\n    pattern_dict = {\n        'R': 'red',\n        'G': 'green',\n        'B': 'blue',\n        'Y': 'yellow',\n        'O': 'orange',\n        'P': 'purple',\n        'C': 'cyan',\n        'K': 'black',\n        'W': 'white'\n    }\n\n    color_sequence = []\n    pattern_sequence = []\n\n    for color in colors:\n        color_sequence.append(pattern_dict[color])\n\n    for pattern in patterns:\n        pattern_sequence.append(pattern)\n\n    return color_sequence == pattern_sequence", "\ndef is_samepatterns(colors, patterns):    \n\n    pattern_dict = {\n        'R': 'red',\n        'G': 'green',\n        'B': 'blue',\n        'Y': 'yellow',\n        'O': 'orange',\n        'P': 'purple',\n        'C': 'cyan',\n        'K': 'black',\n        'W': 'white'\n    }\n\n    color_sequence = []\n    pattern_sequence = []\n\n    for color in colors:\n        color_sequence.append(pattern_dict[color])\n\n    for pattern in patterns:\n        pattern_sequence.append(pattern)\n\n    return color_sequence == pattern_sequence", "\ndef is_samepatterns(colors, patterns):    \n\n    pattern_dict = {\n        'R': 'red',\n        'G': 'green',\n        'B': 'blue',\n        'Y': 'yellow',\n        'O': 'orange',\n        'P': 'purple',\n        'C': 'cyan',\n        'K': 'black',\n        'W': 'white'\n    }\n\n    color_sequence = []\n    pattern_sequence = []\n\n    for color in colors:\n        color_sequence.append(pattern_dict[color])\n\n    for pattern in patterns:\n        pattern_sequence.append(pattern_dict[pattern])\n\n    return color_sequence == pattern_sequence"], "evaluation": false}
{"problem_id": 75, "prompt": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result", "\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result", "\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"], "evaluation": false}
{"problem_id": 76, "prompt": "def count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    return m*n", "\ndef count_Squares(m,n):\n    return (m*n)//2", "\ndef count_Squares(m,n):\n    return (m+1)*(n+1)"], "evaluation": false}
{"problem_id": 77, "prompt": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return even_sum - odd_sum", "\ndef is_Diff(n): \n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum", "\ndef is_Diff(n): \n    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return abs(even_sum - odd_sum)"], "evaluation": false}
{"problem_id": 78, "prompt": "def count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count", "\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count", "\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 79, "prompt": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True", "\ndef word_len(s): \n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True", "\ndef word_len(s): \n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"], "evaluation": true}
{"problem_id": 80, "prompt": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    return n * (n + 1) * (n + 2) // 6", "\ndef tetrahedral_number(n): \n    return n*(n+1)*(n+2)//6", "\ndef tetrahedral_number(n): \n    return n * (n + 1) * (n + 2) // 6"], "evaluation": true}
{"problem_id": 81, "prompt": "def zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))", "\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))", "\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))"], "evaluation": false}
{"problem_id": 82, "prompt": "import math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n    return (4/3)*math.pi*(r**3)", "import math\n\ndef volume_sphere(r):\n    return (4/3)*math.pi*r**3", "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r**3)"], "evaluation": true}
{"problem_id": 83, "prompt": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    sum_Char = 0\n    for char in strr:\n        sum_Char += ord(char)\n    return chr(sum_Char // len(strr))", "\ndef get_Char(strr):  \n    sum_Char = 0\n    for char in strr:\n        sum_Char += ord(char)\n    return chr(sum_Char)", "\ndef get_Char(strr):  \n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum // len(strr))"], "evaluation": false}
{"problem_id": 84, "prompt": "def sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n    return sequence[n]", "\ndef sequence(n): \n    sequence = [0, 1, 1]\n    for i in range(3, n+1):\n        sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-2]])\n    return sequence[n]", "\ndef sequence(n): \n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n    return sequence[n]"], "evaluation": true}
{"problem_id": 85, "prompt": "import math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r):\n    return 4*math.pi*r**2", "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2"], "evaluation": true}
{"problem_id": 86, "prompt": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    return n*(2*n-1)", "\ndef centered_hexagonal_number(n):\n    return n * (5 * n - 3) // 2", "\ndef centered_hexagonal_number(n):\n    return n * (5 * n - 3) // 2"], "evaluation": false}
{"problem_id": 87, "prompt": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict", "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict", "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return ct.ChainMap(dict1, dict2, dict3)"], "evaluation": true}
{"problem_id": 88, "prompt": "import collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n    return collections.Counter(list1)", "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.Counter(list1)\n    return freq_dict", "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.Counter(list1)\n    return freq_dict"], "evaluation": true}
{"problem_id": 89, "prompt": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    N = str(N)\n    for i in range(len(N) - 1, -1, -1):\n        if N[i] != '0':\n            return int(N[:i] + str(int(N[i]) - 1) + '9' * (len(N) - i - 1))\n    return -1", "\ndef closest_num(N):\n    N = str(N)\n    for i in range(len(N) - 1, -1, -1):\n        if N[i] != '0':\n            return int(N[:i] + str(int(N[i]) - 1) + '9' * (len(N) - i - 1))\n    return -1", "\ndef closest_num(N):\n    N = str(N)\n    for i in range(len(N) - 1, -1, -1):\n        if N[i] < '9':\n            return int(N[:i] + str(int(N[i]) + 1) + '0' * (len(N) - i - 1))\n    return -1"], "evaluation": true}
{"problem_id": 90, "prompt": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len", "\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len", "\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"], "evaluation": true}
{"problem_id": 91, "prompt": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False", "\ndef find_substring(str1, sub_str):\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False", "\ndef find_substring(str1, sub_str):\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 92, "prompt": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    n = str(n)\n    if len(n) < 3:\n        return False\n    diff = int(n[1]) - int(n[0])\n    for i in range(2, len(n)):\n        if int(n[i]) - int(n[i-1]) != diff:\n            return False\n    return True", "\ndef is_undulating(n): \n    n = str(n)\n    if len(n) < 3:\n        return False\n    diff = int(n[1]) - int(n[0])\n    for i in range(2, len(n)):\n        if int(n[i]) - int(n[i-1]) != diff:\n            return False\n    return True", "\ndef is_undulating(n): \n    n = str(n)\n    if len(n) < 3:\n        return False\n    diff = int(n[1]) - int(n[0])\n    for i in range(2, len(n)):\n        if int(n[i]) - int(n[i-1]) != diff:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 93, "prompt": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    return a**b", "\ndef power(a,b):\n    return a ** b", "\ndef power(a,b):\n    return a**b"], "evaluation": true}
{"problem_id": 94, "prompt": "from operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n    result = min(enumerate(test_list), key=itemgetter(1))\n    return result", "from operator import itemgetter \n\ndef index_minimum(test_list):\n    result = min(enumerate(test_list), key=itemgetter(1))[0]\n    return result", "from operator import itemgetter \n\ndef index_minimum(test_list):\n    result = min(enumerate(test_list), key=itemgetter(1))[0]\n    return result"], "evaluation": false}
{"problem_id": 95, "prompt": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length", "\ndef Find_Min_Length(lst):  \n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length", "\ndef Find_Min_Length(lst):  \n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"], "evaluation": true}
{"problem_id": 96, "prompt": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 97, "prompt": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict", "\ndef frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict", "\ndef frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"], "evaluation": true}
{"problem_id": 98, "prompt": "def multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "\ndef multiply_num(numbers):  \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "\ndef multiply_num(numbers):  \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"], "evaluation": true}
{"problem_id": 99, "prompt": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)", "\ndef decimal_to_binary(n): \n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)", "\ndef decimal_to_binary(n): \n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)"], "evaluation": false}
{"problem_id": 100, "prompt": "import sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n    num = int(num)\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num", "import sys\n\ndef next_smallest_palindrome(num):\n    num = int(num)\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num", "import sys\n\ndef next_smallest_palindrome(num):\n    num = int(num)\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num"], "evaluation": true}
{"problem_id": 101, "prompt": "def kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    arr.sort()\n    return arr[k - 1]", "\ndef kth_element(arr, n, k):\n    arr.sort()\n    return arr[k - 1]", "\ndef kth_element(arr, n, k):\n    arr.sort()\n    return arr[k - 1]"], "evaluation": false}
{"problem_id": 102, "prompt": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    words = word.split('_')\n    return words[0] + ''.join(w.title() for w in words[1:])", "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() for x in word.split('_'))", "\ndef snake_to_camel(word):\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"], "evaluation": false}
{"problem_id": 103, "prompt": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return (n - 1) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)", "\ndef eulerian_num(n, m): \n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    else:\n        return (n - 1) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)", "\ndef eulerian_num(n, m): \n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    else:\n        return (n - 1) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)"], "evaluation": false}
{"problem_id": 104, "prompt": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]", "\ndef sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: (x.lower(), x)) for sublist in input_list]", "\ndef sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: (x.lower(), x)) for sublist in input_list]"], "evaluation": true}
{"problem_id": 105, "prompt": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    return lst.count(True)", "\ndef count(lst):   \n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count", "\ndef count(lst):   \n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 106, "prompt": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)", "\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)", "\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)"], "evaluation": false}
{"problem_id": 107, "prompt": "def count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1):\n        if i % 16 == 0:\n            count += 1\n    return count", "\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1) :\n        if i % 16 == 0 :\n            count += 1\n    return count", "\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1):\n        if i % 16 == 0:\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    for i in range(len(num1)):\n        heapq.heappush(heap, num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(heap, num2[i])\n    for i in range(len(num3)):\n        heapq.heappush(heap, num3[i])\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    for i in range(len(num1)):\n        heapq.heappush(heap, num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(heap, num2[i])\n    for i in range(len(num3)):\n        heapq.heappush(heap, num3[i])\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    for i in range(len(num1)):\n        heapq.heappush(heap, num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(heap, num2[i])\n    for i in range(len(num3)):\n        heapq.heappush(heap, num3[i])\n    return [heapq.heappop(heap) for _ in range(len(heap))]"], "evaluation": true}
{"problem_id": 109, "prompt": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    s = s + s[:n-1]\n    count = 0\n    for i in range(n):\n        if int(s[i:i+n],2) % 2 != 0:\n            count += 1\n    return count", "\ndef odd_Equivalent(s,n): \n    s = s + s[:n-1]\n    count = 0\n    for i in range(n):\n        if int(s[i:i+n], 2) % 2 != 0:\n            count += 1\n    return count", "\ndef odd_Equivalent(s,n): \n    s = s + s[:n-1]\n    count = 0\n    for i in range(n):\n        if int(s[i:i+n], 2) % 2 != 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 110, "prompt": "def extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    test_list.sort()\n    l = len(test_list)\n    res = []\n    missing = []\n    for i in range(l - 1):\n        if test_list[i + 1] - test_list[i] > 1:\n            missing.append((test_list[i] + 1, test_list[i + 1] - 1))\n    if test_list[0] != strt_val:\n        missing.append((strt_val, test_list[0] - 1))\n    if test_list[-1] != stop_val:\n        missing.append((test_list[-1] + 1, stop_val))\n    return missing", "\ndef extract_missing(test_list, strt_val, stop_val):\n    test_list.sort()\n    l = len(test_list)\n    res = []\n    missing = []\n    for i in range(l - 1):\n        if test_list[i + 1] - test_list[i] > 1:\n            missing.append((test_list[i] + 1, test_list[i + 1] - 1))\n    if test_list[0] != strt_val:\n        missing.append((strt_val, test_list[0] - 1))\n    if test_list[-1] != stop_val:\n        missing.append((test_list[-1] + 1, stop_val))\n    return missing", "\ndef extract_missing(test_list, strt_val, stop_val):\n    test_list.sort()\n    l = len(test_list)\n    res = []\n    missing = []\n    for i in range(l - 1):\n        if test_list[i + 1] - test_list[i] > 1:\n            missing.append((test_list[i] + 1, test_list[i + 1] - 1))\n    if test_list[0] != strt_val:\n        missing.append((strt_val, test_list[0] - 1))\n    if test_list[-1] != stop_val:\n        missing.append((test_list[-1] + 1, stop_val))\n    return missing"], "evaluation": false}
{"problem_id": 111, "prompt": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    result = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        result = result & set(lst)\n    return list(result)", "\ndef common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements = common_elements & set(sublist)\n    return list(common_elements)", "\ndef common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements = common_elements & set(sublist)\n    return list(common_elements)"], "evaluation": true}
{"problem_id": 112, "prompt": "def perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    pi = 3.141592653589793\n    radius = diameter / 2\n    perimeter = 2 * pi * radius\n    return perimeter", "\ndef perimeter(diameter,height) : \n    pi = 3.141592653589793\n    radius = diameter / 2\n    perimeter = 2 * pi * radius + 2 * height\n    return perimeter", "\ndef perimeter(diameter,height) : \n    pi = 3.141592653589793\n    radius = diameter / 2\n    perimeter = 2 * pi * radius + 2 * height\n    return perimeter"], "evaluation": false}
{"problem_id": 113, "prompt": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"], "evaluation": true}
{"problem_id": 114, "prompt": "from collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n    return Counter(test_list)", "from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = Counter(test_list)\n    return freq_dict", "from collections import Counter \n\ndef assign_freq(test_list):\n    return Counter(test_list)"], "evaluation": false}
{"problem_id": 115, "prompt": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    return all(len(d) == 0 for d in list1)", "\ndef empty_dit(list1):\n    for i in list1:\n        if bool(i):\n            return False\n    return True", "\ndef empty_dit(list1):\n    for i in list1:\n        if bool(i):\n            return False\n    return True"], "evaluation": true}
{"problem_id": 116, "prompt": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))", "\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))", "\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))"], "evaluation": true}
{"problem_id": 117, "prompt": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            float_list.append(i)\n    return float_list", "\ndef list_to_float(test_list):\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            float_list.append(i)\n    return float_list", "\ndef list_to_float(test_list):\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            float_list.append(i)\n    return float_list"], "evaluation": false}
{"problem_id": 118, "prompt": "def string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    return list(string)", "\ndef string_to_list(string): \n    return list(string)", "\ndef string_to_list(string): \n    return list(string)"], "evaluation": false}
{"problem_id": 119, "prompt": "def search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        elif (mid % 2 == 0 and arr[mid] == arr[mid - 1]) or (mid % 2 == 1 and arr[mid] == arr[mid + 1]):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[left]", "\ndef search(arr,n) :\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        elif (mid % 2 == 0 and arr[mid] == arr[mid - 1]) or (mid % 2 == 1 and arr[mid] == arr[mid + 1]):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[left]", "\ndef search(arr,n) :\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        elif (mid % 2 == 0 and arr[mid] == arr[mid - 1]) or (mid % 2 == 1 and arr[mid] == arr[mid + 1]):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[left]"], "evaluation": false}
{"problem_id": 120, "prompt": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product", "\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product", "\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"], "evaluation": false}
{"problem_id": 121, "prompt": "def check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n\n    if count == 3 or n == 0:\n        return False\n\n    output = check_triplet(A, n - 1, sum, count)\n\n    if A[n - 1] <= sum:\n        output = output or check_triplet(A, n - 1, sum - A[n - 1], count + 1)\n\n    return output", "\ndef check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n\n    if count == 3 or n == 0:\n        return False\n\n    output = check_triplet(A, n - 1, sum, count)\n\n    if A[n - 1] <= sum:\n        output = output or check_triplet(A, n - 1, sum - A[n - 1], count + 1)\n\n    return output", "\ndef check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n\n    if count == 3 or n == 0:\n        return False\n\n    output = check_triplet(A, n - 1, sum, count)\n\n    if A[n - 1] <= sum:\n        output = output or check_triplet(A, n - 1, sum - A[n - 1], count + 1)\n\n    return output"], "evaluation": true}
{"problem_id": 122, "prompt": "MAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    prime = [True for i in range(MAX+1)] \n    p = 2\n    while (p * p <= MAX): \n        if (prime[p] == True): \n            for i in range(p * p, MAX+1, p): \n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    cnt = 0\n    res = 0\n    for i in range(2, MAX+1): \n        if (prime[i]): \n            cnt += 1\n        if (cnt == n): \n            res = i \n            break\n    return res", "\ndef smartNumber(n): \n    prime = [True for i in range(MAX+1)] \n    p = 2\n    while (p * p <= MAX): \n        if (prime[p] == True): \n            for i in range(p * p, MAX+1, p): \n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    cnt = 0\n    res = 0\n    for i in range(2, MAX+1): \n        if (prime[i]): \n            cnt += 1\n        if (cnt == n): \n            res = i \n            break\n    return res", "\ndef smartNumber(n): \n    prime = [True for i in range(MAX + 1)] \n    p = 2\n    while (p * p <= MAX): \n        if (prime[p] == True): \n            for i in range(p * p, MAX + 1, p): \n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    cnt = 0\n    res = 0\n    for i in range(2, MAX + 1): \n        if (prime[i]): \n            cnt += 1\n        if (cnt == n): \n            res = i \n            break\n    return res"], "evaluation": false}
{"problem_id": 123, "prompt": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    return sum(i for i in range(1, limit) if d(d(i)) == i and i != d(i))", "\ndef amicable_numbers_sum(limit):\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    return sum(i for i in range(1, limit) if i == d(d(i)))", "\ndef amicable_numbers_sum(limit):\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    return sum(i for i in range(1, limit) if d(d(i)) == i and i != d(i))"], "evaluation": false}
{"problem_id": 124, "prompt": "import cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(a+b*1j)", "import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(a+b*1j)", "import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(a+bj)"], "evaluation": false}
{"problem_id": 125, "prompt": "def find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            max_diff = max(max_diff, abs(count1 - count0))\n    return max_diff", "\ndef find_length(string, n): \n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            max_diff = max(max_diff, abs(count1 - count0))\n    return max_diff", "\ndef find_length(string, n): \n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            max_diff = max(max_diff, abs(count1 - count0))\n    return max_diff"], "evaluation": false}
{"problem_id": 126, "prompt": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    def divisors(n):\n        divs = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    divs.append(i)\n                else:\n                    divs.extend([i, n//i])\n        divs.append(n)\n        return divs\n\n    return sum(set(divisors(a)) & set(divisors(b)))", "\ndef sum(a,b): \n    def divisors(n):\n        divs = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    divs.append(i)\n                else:\n                    divs.extend([i, n//i])\n        divs.append(n)\n        return divs\n    return sum(set(divisors(a)) & set(divisors(b)))", "\ndef sum(a,b): \n    def divisors(n):\n        divs = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    divs.append(i)\n                else:\n                    divs.extend([i, n//i])\n        divs.append(n)\n        return divs\n\n    return sum(set(divisors(a)).intersection(divisors(b)))"], "evaluation": false}
{"problem_id": 127, "prompt": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    if y == 0:\n        return 0\n    if y > 0:\n        return (x + multiply_int(x, y - 1))\n    if y < 0:\n        return -multiply_int(x, -y)", "\ndef multiply_int(x, y):\n    if y == 0:\n        return 0\n    if y > 0:\n        return (x + multiply_int(x, y - 1))\n    if y < 0:\n        return -multiply_int(x, -y)", "\ndef multiply_int(x, y):\n    if y == 0:\n        return 0\n    if y > 0:\n        return (x + multiply_int(x, y-1))\n    if y < 0:\n        return -multiply_int(x, -y)"], "evaluation": true}
{"problem_id": 128, "prompt": "def long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]", "\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]", "\ndef long_words(n, str):\n    return [word for word in str.split() if len(word) > n]"], "evaluation": false}
{"problem_id": 129, "prompt": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n    sum = 0\n    for i in range(0, len(my_matrix)):\n        sum = sum + my_matrix[i][i]\n\n    sum2 = 0\n    for i in range(0, len(my_matrix)):\n        sum2 = sum2 + my_matrix[i][len(my_matrix) - 1 - i]\n\n    if sum != sum2:\n        return False\n\n    for i in range(0, len(my_matrix)):\n        row_sum = 0\n        for j in range(0, len(my_matrix)):\n            row_sum = row_sum + my_matrix[i][j]\n\n        if row_sum != sum:\n            return False\n\n    for i in range(0, len(my_matrix)):\n        col_sum = 0\n        for j in range(0, len(my_matrix)):\n            col_sum = col_sum + my_matrix[j][i]\n\n        if col_sum != sum:\n            return False\n\n    return True", "\ndef magic_square_test(my_matrix):\n    sum = 0\n    for i in range(0, len(my_matrix)):\n        sum = sum + my_matrix[i][i]\n\n    sum2 = 0\n    for i in range(0, len(my_matrix)):\n        sum2 = sum2 + my_matrix[i][len(my_matrix) - 1 - i]\n\n    if sum != sum2:\n        return False\n\n    for i in range(0, len(my_matrix)):\n        row_sum = 0\n        for j in range(0, len(my_matrix)):\n            row_sum = row_sum + my_matrix[i][j]\n\n        if row_sum != sum:\n            return False\n\n    for i in range(0, len(my_matrix)):\n        col_sum = 0\n        for j in range(0, len(my_matrix)):\n            col_sum = col_sum + my_matrix[j][i]\n\n        if col_sum != sum:\n            return False\n\n    return True", "\ndef magic_square_test(my_matrix):\n    sum = 0\n    for i in range(0, len(my_matrix)):\n        sum = sum + my_matrix[i][i]\n\n    sum2 = 0\n    for i in range(0, len(my_matrix)):\n        sum2 = sum2 + my_matrix[i][len(my_matrix) - 1 - i]\n\n    if sum != sum2:\n        return False\n\n    for i in range(0, len(my_matrix)):\n        row_sum = 0\n        for j in range(0, len(my_matrix)):\n            row_sum = row_sum + my_matrix[i][j]\n\n        if row_sum != sum:\n            return False\n\n    for i in range(0, len(my_matrix)):\n        col_sum = 0\n        for j in range(0, len(my_matrix)):\n            col_sum = col_sum + my_matrix[j][i]\n\n        if col_sum != sum:\n            return False\n\n    return True"], "evaluation": true}
{"problem_id": 130, "prompt": "from collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    return [num for num, count in counts.items() if count == max_count]", "from collections import defaultdict\n\ndef max_occurrences(nums):\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = max(count.values())\n    return [num for num, cnt in count.items() if cnt == max_count]", "from collections import defaultdict\n\ndef max_occurrences(nums):\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_count = max(count_dict.values())\n    return [num for num, count in count_dict.items() if count == max_count]"], "evaluation": false}
{"problem_id": 131, "prompt": "def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str1)", "\ndef reverse_vowels(str1):\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)", "\ndef reverse_vowels(str1):\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)"], "evaluation": true}
{"problem_id": 132, "prompt": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    return ''.join(tup1)", "\ndef tup_string(tup1):\n    return ''.join(tup1)", "\ndef tup_string(tup1):\n    return ''.join(tup1)"], "evaluation": true}
{"problem_id": 133, "prompt": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"], "evaluation": true}
{"problem_id": 134, "prompt": "def check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    for i in range(p):\n        arr.pop()\n    if arr[-1] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "\ndef check_last (arr,n,p): \n    for i in range(p):\n        arr.pop()\n    if arr[-1] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "\ndef check_last (arr,n,p): \n    for i in range(p):\n        arr.pop()\n    if arr[-1] % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"], "evaluation": false}
{"problem_id": 135, "prompt": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return n*(2*n-1)", "\ndef hexagonal_num(n): \n    return n * (2 * n - 1)", "\ndef hexagonal_num(n): \n    return n * (2 * n - 1)"], "evaluation": true}
{"problem_id": 136, "prompt": "def cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    if units <= 100:\n        return units * 10\n    elif units <= 200:\n        return (100 * 10) + ((units - 100) * 15)\n    elif units <= 300:\n        return (100 * 10) + (100 * 15) + ((units - 200) * 20)\n    else:\n        return (100 * 10) + (100 * 15) + (100 * 20) + ((units - 300) * 25)", "\ndef cal_electbill(units):\n    if units <= 100:\n        return units * 10\n    elif units <= 200:\n        return (100 * 10) + ((units - 100) * 15)\n    elif units <= 300:\n        return (100 * 10) + (100 * 15) + ((units - 200) * 20)\n    else:\n        return (100 * 10) + (100 * 15) + (100 * 20) + ((units - 300) * 25)", "\ndef cal_electbill(units):\n    if units <= 100:\n        return units * 10\n    elif units <= 200:\n        return (100 * 10) + ((units - 100) * 15)\n    elif units <= 300:\n        return (100 * 10) + (100 * 15) + ((units - 200) * 20)\n    else:\n        return (100 * 10) + (100 * 15) + (100 * 20) + ((units - 300) * 25)"], "evaluation": false}
{"problem_id": 137, "prompt": "from array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)", "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)", "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)"], "evaluation": false}
{"problem_id": 138, "prompt": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    i = 0\n    while 2 ** i <= n:\n        j = 0\n        while 2 ** i + 2 ** j <= n:\n            k = 0\n            while 2 ** i + 2 ** j + 2 ** k <= n:\n                if 2 ** i + 2 ** j + 2 ** k == n:\n                    return True\n                k += 1\n            j += 1\n        i += 1\n    return False", "\ndef is_Sum_Of_Powers_Of_Two(n): \n    i = 0\n    while 2 ** i <= n:\n        j = 0\n        while 2 ** i + 2 ** j <= n:\n            k = 0\n            while 2 ** i + 2 ** j + 2 ** k <= n:\n                if 2 ** i + 2 ** j + 2 ** k == n:\n                    return True\n                k += 1\n            j += 1\n        i += 1\n    return False", "\ndef is_Sum_Of_Powers_Of_Two(n): \n    i = 0\n    while 2 ** i <= n:\n        j = 0\n        while 2 ** i + 2 ** j <= n:\n            k = 0\n            while 2 ** i + 2 ** j + 2 ** k <= n:\n                if 2 ** i + 2 ** j + 2 ** k == n:\n                    return True\n                k += 1\n            j += 1\n        i += 1\n    return False"], "evaluation": false}
{"problem_id": 139, "prompt": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    import math\n    return 2 * math.pi * r", "\ndef circle_circumference(r):\n    import math\n    return 2 * math.pi * r", "\ndef circle_circumference(r):\n    from math import pi\n    return 2 * pi * r"], "evaluation": false}
{"problem_id": 140, "prompt": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    count_dict = {}\n    for i in test_list:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return [i for i in count_dict if count_dict[i] == 1]", "\ndef extract_singly(test_list):\n    count_dict = {}\n    for i in test_list:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return [i for i in count_dict if count_dict[i] == 1]", "\ndef extract_singly(test_list):\n    count_dict = {}\n    for i in test_list:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return [i for i in count_dict if count_dict[i] == 1]"], "evaluation": false}
{"problem_id": 141, "prompt": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    def flip(nums, end):\n        start = 0\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    for i in range(len(nums)-1, -1, -1):\n        max_idx = i\n        for j in range(i, -1, -1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx != i:\n            flip(nums, max_idx)\n            flip(nums, i)\n    return nums", "\ndef pancake_sort(nums):\n    def flip(nums, end):\n        start = 0\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    for i in range(len(nums)-1, -1, -1):\n        max_idx = i\n        for j in range(i, -1, -1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx != i:\n            flip(nums, max_idx)\n            flip(nums, i)\n    return nums", "\ndef pancake_sort(nums):\n    def flip(nums, end):\n        start = 0\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    for i in range(len(nums)-1, -1, -1):\n        max_idx = i\n        for j in range(i, -1, -1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx != i:\n            flip(nums, max_idx)\n            flip(nums, i)\n\n    return nums"], "evaluation": true}
{"problem_id": 142, "prompt": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            count += 1\n    return count", "\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            count += 1\n    return count", "\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 143, "prompt": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count", "\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count", "\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 144, "prompt": "def sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    sum = 0\n    for i in range(0, n): \n        for j in range(i+1, n): \n            sum += abs(arr[i] - arr[j]) \n    return sum", "\ndef sum_Pairs(arr,n): \n    sum = 0\n    for i in range(0, n): \n        for j in range(i+1, n): \n            sum += abs(arr[i] - arr[j]) \n    return sum", "\ndef sum_Pairs(arr,n): \n    sum = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            sum += abs(arr[i] - arr[j]) \n    return sum"], "evaluation": true}
{"problem_id": 145, "prompt": "def max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    arr.sort()\n    return arr[-1] - arr[0]", "\ndef max_Abs_Diff(arr,n): \n    arr.sort() \n    return (arr[n-1] - arr[0])", "\ndef max_Abs_Diff(arr,n): \n    arr.sort() \n    return (arr[n-1] - arr[0])"], "evaluation": false}
{"problem_id": 146, "prompt": "def ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    ascii_value = 0\n    for char in str1:\n        ascii_value += ord(char)\n    return ascii_value", "\ndef ascii_value_string(str1):\n    total_ascii_value = 0\n    for char in str1:\n        total_ascii_value += ord(char)\n    return total_ascii_value", "\ndef ascii_value_string(str1):\n    total_ascii_value = 0\n    for char in str1:\n        total_ascii_value += ord(char)\n    return total_ascii_value"], "evaluation": false}
{"problem_id": 147, "prompt": "def max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    for i in range(m-1, -1, -1): \n        for j in range(i+1): \n            if tri[i+1][j] > tri[i+1][j+1]: \n                tri[i][j] += tri[i+1][j] \n            else: \n                tri[i][j] += tri[i+1][j+1] \n    return tri[0][0]", "\ndef max_path_sum(tri, m, n): \n    for i in range(m-1, -1, -1): \n        for j in range(i+1): \n            if tri[i+1][j] > tri[i+1][j+1]: \n                tri[i][j] += tri[i+1][j] \n            else: \n                tri[i][j] += tri[i+1][j+1] \n    return tri[0][0]", "\ndef max_path_sum(tri, m, n): \n    for i in range(m-1, -1, -1): \n        for j in range(i+1): \n            if tri[i+1][j] > tri[i+1][j+1]: \n                tri[i][j] += tri[i+1][j] \n            else: \n                tri[i][j] += tri[i+1][j+1] \n    return tri[0][0]"], "evaluation": true}
{"problem_id": 148, "prompt": "def sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n    num_str = str(N)\n    num_len = len(num_str)\n\n    if num_len % 2 != 0 : \n        num_len += 1\n        num_str = '0' + num_str\n\n    half_len = num_len // 2\n\n    part1 = num_str[:half_len]\n    part2 = num_str[half_len:]\n\n    sum_part1 = sum(int(digit) for digit in part1)\n    sum_part2 = sum(int(digit) for digit in part2)\n\n    return max(sum_part1, sum_part2)", "\ndef sum_digits_twoparts(N) : \n    num_str = str(N)\n    num_len = len(num_str)\n\n    if num_len % 2 != 0 : \n        num_len += 1\n        num_str = '0' + num_str\n\n    half_len = num_len // 2\n\n    part1 = num_str[:half_len]\n    part2 = num_str[half_len:]\n\n    sum_part1 = sum(int(digit) for digit in part1)\n    sum_part2 = sum(int(digit) for digit in part2)\n\n    return max(sum_part1, sum_part2)", "\ndef sum_digits_twoparts(N) : \n    num_str = str(N)\n    num_len = len(num_str)\n\n    if num_len % 2 != 0 : \n        num_len += 1\n        num_str = '0' + num_str\n\n    half_len = num_len // 2\n\n    part1 = num_str[:half_len]\n    part2 = num_str[half_len:]\n\n    sum_part1 = sum(int(digit) for digit in part1)\n    sum_part2 = sum(int(digit) for digit in part2)\n\n    return max(sum_part1, sum_part2)"], "evaluation": false}
{"problem_id": 149, "prompt": "def longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    dp = [1]*n\n    for i in range(1, n): \n        for j in range(0, i): \n            if (abs(arr[i] - arr[j]) == 1) and (dp[i] < dp[j] + 1): \n                dp[i] = dp[j]+1\n    maximum = 0\n    for i in range(len(dp)): \n        maximum = max(maximum, dp[i]) \n    return maximum", "\ndef longest_subseq_with_diff_one(arr, n): \n    dp = [1]*n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if (abs(arr[i] - arr[j]) == 1): \n                dp[i] = max(dp[i], dp[j] + 1) \n    return max(dp)", "\ndef longest_subseq_with_diff_one(arr, n): \n    dp = [1]*n\n    for i in range(1, n): \n        for j in range(0, i): \n            if (abs(arr[i] - arr[j]) == 1) and (dp[i] < dp[j] + 1): \n                dp[i] = dp[j]+1\n    maximum = 0\n    for i in range(len(dp)): \n        maximum = max(maximum, dp[i]) \n    return maximum"], "evaluation": true}
{"problem_id": 150, "prompt": "def does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    return b in a", "\ndef does_Contain_B(a,b,c): \n    if b in a:\n        return True\n    else:\n        return False", "\ndef does_Contain_B(a,b,c): \n    return b in a or c in a"], "evaluation": false}
{"problem_id": 151, "prompt": "def is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    def gcd(x,y):\n        while(y):\n            x, y = y, x % y\n        return x\n    if(gcd(x,y) == 1):\n        return True\n    else:\n        return False", "\ndef is_coprime(x,y):\n    def gcd(x,y):\n        while(y):\n            x, y = y, x % y\n        return x\n    if(gcd(x,y) == 1):\n        return True\n    else:\n        return False", "\ndef is_coprime(x,y):\n    def gcd(x,y):\n        while(y):\n            x, y = y, x % y\n        return x\n    if(gcd(x,y) == 1):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 152, "prompt": "def merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n\n    return merge(left, right)"], "evaluation": false}
{"problem_id": 153, "prompt": "def parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    x_vertex = -b / (2 * a)\n    y_vertex = c - (b ** 2) / (4 * a)\n    return (x_vertex, y_vertex)", "\ndef parabola_vertex(a, b, c): \n    x_vertex = -b / (2 * a)\n    y_vertex = c - (b ** 2) / (4 * a)\n    return (x_vertex, y_vertex)", "\ndef parabola_vertex(a, b, c): \n    x_vertex = -b/(2*a)\n    y_vertex = c - (b**2)/(4*a)\n    return (x_vertex, y_vertex)"], "evaluation": true}
{"problem_id": 154, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if (i+1) % N == 0:\n                result.append(nums[i][j])\n            if (j+1) % N == 0:\n                result.append(nums[i][j])\n    return result", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if (i+1) % N == 0:\n                result.append(nums[i][j])\n            if (j+1) % N == 0:\n                result.append(nums[i][j])\n    return result", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if (i+1) % N == 0:\n                result.append(nums[i][j])\n            if (j+1) % N == 0:\n                result.append(nums[i][j])\n    return result"], "evaluation": false}
{"problem_id": 155, "prompt": "def even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)) :\n        if i % 2 == 0 :\n            if binary[i] == '1' :\n                binary[i] = '0'\n            else :\n                binary[i] = '1'\n    return int(''.join(binary), 2)", "\ndef even_bit_toggle_number(n) : \n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)) :\n        if i % 2 == 0 :\n            if binary[i] == '0' :\n                binary[i] = '1'\n            else :\n                binary[i] = '0'\n    return int(''.join(binary), 2)", "\ndef even_bit_toggle_number(n) : \n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)) :\n        if i % 2 == 0 :\n            if binary[i] == '1' :\n                binary[i] = '0'\n            else :\n                binary[i] = '1'\n    return int(''.join(binary), 2)"], "evaluation": false}
{"problem_id": 156, "prompt": "def tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    return tuple(map(int, tuple_str))", "\ndef tuple_int_str(tuple_str):\n    return tuple(map(int, tuple_str))", "\ndef tuple_int_str(tuple_str):\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int"], "evaluation": false}
{"problem_id": 157, "prompt": "from itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n    return [(len(list(group)), value) for value, group in groupby(list1)]", "from itertools import groupby\n\ndef encode_list(list1):\n    return [(len(list(group)), value) for value, group in groupby(list1)]", "from itertools import groupby\n\ndef encode_list(list1):\n    return [(len(list(group)), value) for value, group in groupby(list1)]"], "evaluation": false}
{"problem_id": 158, "prompt": "def min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    arr.sort() \n    ans = float('inf') \n    prefix = [0]*n \n    prefix[0] = arr[0] \n    for i in range(1,n): \n        prefix[i] = prefix[i-1] + arr[i] \n    for i in range(k-1,n): \n        if i == k-1: \n            sum = prefix[i] \n        else: \n            sum = prefix[i] - prefix[i-k] \n        curr_sum = arr[i]*k\n        if curr_sum < sum: \n            ans = min(ans, sum - curr_sum) \n        else: \n            ans = min(ans, curr_sum - sum) \n    return ans", "\ndef min_Ops(arr,n,k): \n    arr.sort() \n    ans = float('inf') \n    prefix = [0]*n \n    prefix[0] = arr[0] \n    for i in range(1,n): \n        prefix[i] = prefix[i-1] + arr[i] \n    for i in range(k-1,n): \n        if i == k-1: \n            sum = prefix[i] \n        else: \n            sum = prefix[i] - prefix[i-k] \n        curr_sum = arr[i]*k\n        if curr_sum < sum: \n            ans = min(ans, sum - curr_sum) \n        else: \n            ans = min(ans, curr_sum - sum) \n    return ans", "\ndef min_Ops(arr,n,k): \n    arr.sort() \n    ans = float('inf') \n    prefix = [0]*n \n    prefix[0] = arr[0] \n    for i in range(1,n): \n        prefix[i] = prefix[i-1] + arr[i] \n    for i in range(k-1,n): \n        if i == k-1: \n            sum = prefix[i] \n        else: \n            sum = prefix[i] - prefix[i-k] \n        curr_sum = arr[i]*k\n        if curr_sum < sum: \n            ans = min(ans, sum - curr_sum) \n        else: \n            ans = min(ans, curr_sum - sum) \n    return ans"], "evaluation": false}
{"problem_id": 159, "prompt": "def month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    if month in ('January', 'February'):\n        return 'Winter'\n    elif month in ('March', 'April', 'May'):\n        return 'Spring'\n    elif month in ('June', 'July', 'August'):\n        return 'Summer'\n    elif month in ('September', 'October', 'November'):\n        return 'Autumn'\n    else:\n        return 'Invalid month'\n\n    if days == 31:\n        if month in ('January', 'March', 'May', 'July', 'August', 'October', 'December'):\n            return 'Valid days'\n        else:\n            return 'Invalid days'\n    elif days == 30:\n        if month in ('April', 'June', 'September', 'November'):\n            return 'Valid days'\n        else:\n            return 'Invalid days'\n    elif days == 28 or days == 29:\n        if month == 'February':\n            return 'Valid days'\n        else:\n            return 'Invalid days'\n    else:\n        return 'Invalid days'", "\ndef month_season(month,days):\n    if month in ('January', 'February'):\n        return 'Winter'\n    elif month in ('March', 'April', 'May'):\n        return 'Spring'\n    elif month in ('June', 'July', 'August'):\n        return 'Summer'\n    elif month in ('September', 'October', 'November'):\n        return 'Autumn'\n    else:\n        return 'Invalid month'\n\n    if days == 31:\n        if month in ('January', 'March', 'May', 'July', 'August', 'October', 'December'):\n            return 'Valid days'\n        else:\n            return 'Invalid days'\n    elif days == 30:\n        if month in ('April', 'June', 'September', 'November'):\n            return 'Valid days'\n        else:\n            return 'Invalid days'\n    elif days == 28:\n        if month == 'February':\n            return 'Valid days'\n        else:\n            return 'Invalid days'\n    else:\n        return 'Invalid days'", "\ndef month_season(month,days):\n    if month in ('January', 'February'):\n        return 'Winter'\n    elif month in ('March', 'April', 'May'):\n        return 'Spring'\n    elif month in ('June', 'July', 'August'):\n        return 'Summer'\n    elif month in ('September', 'October', 'November'):\n        return 'Autumn'\n    else:\n        return 'Invalid month'\n\n    if days == 31:\n        if month in ('January', 'March', 'May', 'July', 'August', 'October', 'December'):\n            return 'Valid days'\n        else:\n            return 'Invalid days'\n    elif days == 30:\n        if month in ('April', 'June', 'September', 'November'):\n            return 'Valid days'\n        else:\n            return 'Invalid days'\n    elif days == 28 or days == 29:\n        if month == 'February':\n            return 'Valid days'\n        else:\n            return 'Invalid days'\n    else:\n        return 'Invalid days'"], "evaluation": false}
{"problem_id": 160, "prompt": "def solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    x = n // a\n    y = (n - a * x) // b\n    return x, y", "\ndef solution (a, b, n): \n    x = n // a\n    y = (n - a * x) // b\n    return (x, y)", "\ndef solution (a, b, n): \n    x = n // a\n    y = (n - a * x) // b\n    return (x, y)"], "evaluation": false}
{"problem_id": 161, "prompt": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]", "\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]", "\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]"], "evaluation": true}
{"problem_id": 162, "prompt": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    total = 0\n    while n >= 0:\n        total += n\n        n -= 2\n    return total", "\ndef sum_series(n):\n    total = 0\n    while n >= 0:\n        total += n\n        n -= 2\n    return total", "\ndef sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total"], "evaluation": true}
{"problem_id": 163, "prompt": "from math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n    return (s*l**2)/(4*tan(pi/s))", "from math import tan, pi\n\ndef area_polygon(s,l):\n    area = (s*l**2)/(4*tan(pi/s))\n    return area", "from math import tan, pi\n\ndef area_polygon(s,l):\n    area = (s*l**2)/(4*tan(pi/s))\n    return area"], "evaluation": true}
{"problem_id": 164, "prompt": "import math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n    sum1 = sumOfDivisors(num1)\n    sum2 = sumOfDivisors(num2)\n    return sum1 == sum2", "import math \n\ndef areEquivalent(num1,num2): \n    sum1 = sumOfDivisors(num1)\n    sum2 = sumOfDivisors(num2)\n\n    return sum1 == sum2", "import math \n\ndef areEquivalent(num1,num2): \n    sum1 = sumOfDivisors(num1)\n    sum2 = sumOfDivisors(num2)\n    \n    return sum1 == sum2"], "evaluation": false}
{"problem_id": 165, "prompt": "def count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    count = 0\n    for i in range(len(str1)):\n        if i == ord(str1[i].lower()) - 97:\n            count += 1\n    return count", "\ndef count_char_position(str1): \n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(97+i):\n            count += 1\n    return count", "\ndef count_char_position(str1): \n    count = 0\n    for i in range(len(str1)):\n        if i == ord(str1[i].lower()) - 97:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 166, "prompt": "def find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 167, "prompt": "def next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    if (n and not(n & (n - 1))): \n        return n \n      \n    log = 0\n    while (n > 1): \n        n >>= 1\n        log += 1\n  \n    return 1 << log + 1", "\ndef next_Power_Of_2(n): \n    if (n and not(n & (n - 1))): \n        return n \n      \n    log = 0\n    while (n > 1): \n        n >>= 1\n        log += 1\n  \n    return 1 << log + 1", "\ndef next_Power_Of_2(n): \n    if (n and not(n & (n - 1))): \n        return n \n      \n    log = 0\n    while (n > 1): \n        n >>= 1\n        log += 1\n  \n    return 1 << log + 1"], "evaluation": false}
{"problem_id": 168, "prompt": "def frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count", "\ndef frequency(a,x): \n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count", "\ndef frequency(a,x): \n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "def get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n + 1):\n            pell.append(2 * pell[i - 1] + pell[i - 2])\n        return pell[n]", "\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n + 1):\n            pell.append(2 * pell[i - 1] + pell[i - 2])\n        return pell[n]", "\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n + 1):\n            pell.append(2 * pell[i - 1] + pell[i - 2])\n        return pell[n]"], "evaluation": true}
{"problem_id": 170, "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m:n+1])", "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m:n+1])", "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m:n+1])"], "evaluation": true}
{"problem_id": 171, "prompt": "import math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n    return 5 * a", "import math\n\ndef perimeter_pentagon(a):\n    return 5*a", "import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter"], "evaluation": true}
{"problem_id": 172, "prompt": "def count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count", "\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count", "\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 173, "prompt": "import re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n    return re.sub(r'\\W+','', text)", "import re\n\ndef remove_splchar(text): \n    result = re.sub(r'\\W+','', text)\n    return result", "import re\n\ndef remove_splchar(text): \n    result=re.sub(r'\\W+','', text)\n    return result"], "evaluation": false}
{"problem_id": 174, "prompt": "def group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d", "\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d", "\ndef group_keyvalue(l):\n    result = {}\n    for k, v in l:\n        if k in result:\n            result[k].append(v)\n        else:\n            result[k] = [v]\n    return result"], "evaluation": true}
{"problem_id": 175, "prompt": "def is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    stack = []\n    dict = {\"]\": \"[\", \"}\": \"{\", \")\": \"(\"}\n    for char in str1:\n        if char in dict.values():\n            stack.append(char)\n        elif char in dict.keys():\n            if stack == [] or dict[char] != stack.pop():\n                return False\n    return stack == []", "\ndef is_valid_parenthese( str1):\n    stack = []\n    dict = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for char in str1:\n        if char in dict.values():\n            stack.append(char)\n        elif char in dict.keys():\n            if stack == [] or dict[char] != stack.pop():\n                return False\n    return stack == []", "\ndef is_valid_parenthese( str1):\n    stack = []\n    dict = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for char in str1:\n        if char in dict.values():\n            stack.append(char)\n        elif char in dict.keys():\n            if stack == [] or dict[char] != stack.pop():\n                return False\n    return stack == []"], "evaluation": true}
{"problem_id": 176, "prompt": "def perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    return a+b+c", "\ndef perimeter_triangle(a,b,c):\n    return a + b + c", "\ndef perimeter_triangle(a,b,c):\n    return a+b+c"], "evaluation": true}
{"problem_id": 177, "prompt": "def answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    def gcd(x, y): \n        while(y): \n            x, y = y, x % y \n        return x \n      \n    def lcm(x, y): \n        lcm = (x*y)//gcd(x,y) \n        return lcm \n      \n    for i in range(L, R): \n        for j in range(i+1, R+1): \n            if lcm(i, j) >= L and lcm(i, j) <= R: \n                return i, j", "\ndef answer(L,R): \n    def gcd(x, y): \n        while(y): \n            x, y = y, x % y \n        return x \n      \n    def lcm(x, y): \n        lcm = (x*y)//gcd(x,y) \n        return lcm \n\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            if lcm(i, j) >= L and lcm(i, j) <= R:\n                return i, j", "\ndef answer(L,R): \n    def gcd(x, y): \n        while(y): \n            x, y = y, x % y \n        return x \n      \n    def lcm(x, y): \n        lcm = (x*y)//gcd(x,y) \n        return lcm \n\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            if lcm(i, j) >= L and lcm(i, j) <= R:\n                return [i, j]\n\n    return []"], "evaluation": false}
{"problem_id": 178, "prompt": "import re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n    for pattern in patterns:\n        if re.search(pattern,text):\n            print(f\"The pattern {pattern} is found in the text.\")\n        else:\n            print(f\"The pattern {pattern} is not found in the text.\")", "import re\n\ndef string_literals(patterns,text):\n    for pattern in patterns:\n        if re.search(pattern,text):\n            print(f\"The pattern {pattern} is found in the text.\")\n        else:\n            print(f\"The pattern {pattern} is not found in the text.\")", "import re\n\ndef string_literals(patterns,text):\n    for pattern in patterns:\n        if re.search(pattern,text):\n            print(f\"The pattern {pattern} is found in the text.\")\n        else:\n            print(f\"The pattern {pattern} is not found in the text.\")"], "evaluation": false}
{"problem_id": 179, "prompt": "def is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    str_x = str(x)\n    digits = [int(d) for d in str_x]\n    while True:\n        sum_digits = sum(digits)\n        if sum_digits == x:\n            return True\n        elif sum_digits < x:\n            digits.append(sum_digits)\n        else:\n            return False", "\ndef is_num_keith(x): \n    str_x = str(x)\n    digits = [int(d) for d in str_x]\n    while True:\n        sum_digits = sum(digits)\n        if sum_digits == x:\n            return True\n        elif sum_digits < x:\n            digits.append(sum_digits)\n        else:\n            return False", "\ndef is_num_keith(x): \n    str_x = str(x)\n    digits = [int(d) for d in str_x]\n    seen = set()\n    while True:\n        x = sum(digits)\n        if x not in seen:\n            seen.add(x)\n            digits.pop(0)\n            digits.append(x)\n        else:\n            break\n    return len(seen) == len(str_x) + 1"], "evaluation": false}
{"problem_id": 180, "prompt": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n  \n    # Haversine formula \n    dlon = elon - slon \n    dlat = elat - slat \n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a**0.5) \n    # Radius of earth in kilometers\n    r = 6371\n    return (c * r)", "from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n  \n    # Haversine formula \n    dlon = elon - slon \n    dlat = elat - slat \n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a**0.5) \n    # Radius of earth in kilometers\n    r = 6371\n    # calculate the result\n    return (c * r)", "from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n  \n    # Haversine formula \n    dlon = elon - slon \n    dlat = elat - slat \n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a**0.5) \n    # Radius of earth in kilometers\n    r = 6371\n    # calculate the result\n    return (c * r)"], "evaluation": false}
{"problem_id": 181, "prompt": "def common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n\n    if n == 1:\n        return arr[0]\n\n    arr.sort()\n\n    end = min(len(arr[0]), len(arr[n - 1]))\n\n    i = 0\n    while i < end and arr[0][i] == arr[n - 1][i]:\n        i += 1\n\n    return arr[0][0: i]", "\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n\n    if n == 1:\n        return arr[0]\n\n    arr.sort()\n\n    end = min(len(arr[0]), len(arr[n - 1]))\n\n    i = 0\n    while i < end and arr[0][i] == arr[n - 1][i]:\n        i += 1\n\n    return arr[0][0: i]", "\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n\n    if n == 1:\n        return arr[0]\n\n    arr.sort()\n\n    end = min(len(arr[0]), len(arr[n - 1]))\n\n    i = 0\n    while i < end and arr[0][i] == arr[n - 1][i]:\n        i += 1\n\n    return arr[0][0: i]"], "evaluation": true}
{"problem_id": 182, "prompt": "import re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[@_#$%^&*()<>?/\\|}{~:]', string)\n    numeric = re.findall(r'\\d', string)\n\n    return uppercase, lowercase, special_char, numeric", "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[@_#$%^&*()<>?/\\|}{~:]', string)\n    numeric = re.findall(r'\\d', string)\n\n    return uppercase, lowercase, special_char, numeric", "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[@_#$%^&*()<>?/\\|}{~:]', string)\n    numeric = re.findall(r'\\d', string)\n\n    return uppercase, lowercase, special_char, numeric"], "evaluation": false}
{"problem_id": 183, "prompt": "def count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    arr = list(set(arr))\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while j < len(arr):\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return count", "\ndef count_pairs(arr, n, k):\n    arr = sorted(arr)\n    pairs = []\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] - arr[i] == k:\n            pairs.append((arr[i], arr[j]))\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return len(pairs), pairs", "\ndef count_pairs(arr, n, k):\n    arr = list(set(arr))\n    arr.sort()\n\n    i = 0\n    j = 1\n    count = 0\n\n    while j < len(arr):\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n\n    return count"], "evaluation": false}
{"problem_id": 184, "prompt": "def greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    return [i for i in list if i > num]", "\ndef greater_specificnum(list,num):\n    result = [i for i in list if i > num]\n    return result", "\ndef greater_specificnum(list,num):\n    result = [i for i in list if i > num]\n    return result"], "evaluation": false}
{"problem_id": 185, "prompt": "def parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    x_focus = -b/(2*a)\n    y_focus = (4*a*c - b**2)/(4*a)\n    return (x_focus, y_focus)", "\ndef parabola_focus(a, b, c): \n    x_focus = -b/(2*a)\n    y_focus = (4*a*c - b**2)/(4*a)\n    return (x_focus, y_focus)", "\ndef parabola_focus(a, b, c): \n    x_focus = -b/(2*a)\n    y_focus = c - (b**2)/(4*a)\n    return (x_focus, y_focus)"], "evaluation": false}
{"problem_id": 186, "prompt": "import re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(True)\n        else:\n            result.append(False)\n    return result", "import re\n\ndef check_literals(text, patterns):\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(True)\n        else:\n            result.append(False)\n    return result", "import re\n\ndef check_literals(text, patterns):\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(True)\n        else:\n            result.append(False)\n    return result"], "evaluation": false}
{"problem_id": 187, "prompt": "def longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0:\n        return []\n    elif X[m-1] == Y[n-1]:\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n    else:\n        lcs1 = longest_common_subsequence(X, Y, m-1, n)\n        lcs2 = longest_common_subsequence(X, Y, m, n-1)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2", "\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n        return [] \n    elif X[m-1] == Y[n-1]: \n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]] \n    else: \n        lcs1 = longest_common_subsequence(X, Y, m, n-1) \n        lcs2 = longest_common_subsequence(X, Y, m-1, n) \n        if len(lcs1) > len(lcs2): \n            return lcs1 \n        else: \n            return lcs2", "\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n        return [] \n    elif X[m-1] == Y[n-1]: \n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]] \n    else: \n        lcs1 = longest_common_subsequence(X, Y, m, n-1) \n        lcs2 = longest_common_subsequence(X, Y, m-1, n) \n        if len(lcs1) > len(lcs2): \n            return lcs1 \n        else: \n            return lcs2"], "evaluation": false}
{"problem_id": 188, "prompt": "def prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    while (n % 4 == 0):\n        n /= 4\n    if (n % 8 == 0):\n        return True\n    return False", "\ndef prod_Square(n):\n    while (n % 4 == 0):\n        n /= 4\n    if (n % 8 == 0):\n        return True\n    return False", "\ndef prod_Square(n):\n    while (n % 4 == 0):\n        n /= 4\n    if (n % 8 == 0):\n        n /= 8\n    if (n % 2 != 0):\n        return False\n    return True"], "evaluation": false}
{"problem_id": 189, "prompt": "def first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1", "\ndef first_Missing_Positive(arr,n): \n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1", "\ndef first_Missing_Positive(arr,n): \n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    \n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    \n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] > 1:\n            return arr[i] + 1\n    \n    return arr[-1] + 1"], "evaluation": true}
{"problem_id": 190, "prompt": "def count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    integral_points = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            integral_points += 1\n    return integral_points", "\ndef count_Intgral_Points(x1,y1,x2,y2): \n    integral_points = 0\n    for x in range(x1,x2+1):\n        for y in range(y1,y2+1):\n            integral_points += 1\n    return integral_points", "\ndef count_Intgral_Points(x1,y1,x2,y2): \n    integral_points = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            integral_points += 1\n    return integral_points"], "evaluation": false}
{"problem_id": 191, "prompt": "def check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    thirty_days_months = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in thirty_days_months:\n        return True\n    else:\n        return False", "\ndef check_monthnumber(monthname3):\n    month_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in month_with_30_days:\n        return True\n    else:\n        return False", "\ndef check_monthnumber(monthname3):\n    month_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in month_with_30_days:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 192, "prompt": "def check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    has_num = False\n    has_alpha = False\n    for char in str:\n        if char.isdigit():\n            has_num = True\n        elif char.isalpha():\n            has_alpha = True\n        if has_num and has_alpha:\n            return True\n    return False", "\ndef check_String(str): \n    has_num = False\n    has_alpha = False\n    for char in str:\n        if char.isdigit():\n            has_num = True\n        if char.isalpha():\n            has_alpha = True\n        if has_num and has_alpha:\n            return True\n    return False", "\ndef check_String(str): \n    has_num = False\n    has_alpha = False\n    for char in str:\n        if char.isdigit():\n            has_num = True\n        elif char.isalpha():\n            has_alpha = True\n        if has_num and has_alpha:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 193, "prompt": "def remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)", "\ndef remove_tuple(test_tup):\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)", "\ndef remove_tuple(test_tup):\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)"], "evaluation": false}
{"problem_id": 194, "prompt": "def octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    return int(str(n), 8)", "\ndef octal_To_Decimal(n):  \n    return int(n, 8)", "\ndef octal_To_Decimal(n):  \n    return int(str(n), 8)"], "evaluation": true}
{"problem_id": 195, "prompt": "def first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    for i in range(0,n): \n        if (arr[i] == x): \n            return i \n    return -1", "\ndef first(arr,x,n): \n    for i in range(0,n): \n        if (arr[i] == x): \n            return i \n    return -1", "\ndef first(arr,x,n): \n    for i in range(0,n): \n        if (arr[i] == x): \n            return i \n    return -1"], "evaluation": true}
{"problem_id": 196, "prompt": "def remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    return [t for t in test_list if len(t) != K]", "\ndef remove_tuples(test_list, K):\n    return [t for t in test_list if len(t) != K]", "\ndef remove_tuples(test_list, K):\n    return [t for t in test_list if len(t) != K]"], "evaluation": true}
{"problem_id": 197, "prompt": "def find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ** test_tup2[i])\n    return tuple(result)", "\ndef find_exponentio(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ** test_tup2[i])\n    return tuple(result)", "\ndef find_exponentio(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ** test_tup2[i])\n    return tuple(result)"], "evaluation": true}
{"problem_id": 198, "prompt": "import math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n    # The largest triangle that can be inscribed in an ellipse is an isosceles triangle.\n    # The largest isosceles triangle that can be inscribed in an ellipse is an equilateral triangle.\n    # An equilateral triangle inscribed in an ellipse with semi-major axis a and semi-minor axis b has sides of length sqrt(3) * min(a, b).\n    return math.sqrt(3) * min(a, b)", "import math\n\ndef largest_triangle(a,b): \n    # The largest triangle that can be inscribed in an ellipse is an isosceles triangle.\n    # The largest isosceles triangle that can be inscribed in an ellipse is an equilateral triangle.\n    # An equilateral triangle inscribed in an ellipse with semi-major axis a and semi-minor axis b has sides of length sqrt(3) * min(a, b).\n    return math.sqrt(3) * min(a, b)", "import math\n\ndef largest_triangle(a,b): \n    # The largest triangle that can be inscribed in an ellipse is an isosceles triangle.\n    # The largest isosceles triangle that can be inscribed in an ellipse is an equilateral triangle.\n    # An equilateral triangle inscribed in an ellipse with semi-major axis a and semi-minor axis b has sides of length sqrt(3) * min(a, b).\n\n    return math.sqrt(3) * min(a, b)"], "evaluation": false}
{"problem_id": 199, "prompt": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i - 1)", "\ndef highest_Power_of_2(n): \n    res = 0\n    while (n > 0): \n        n >>= 1\n        res += 1\n    return 1 << (res - 1)", "\ndef highest_Power_of_2(n): \n    res = 0\n    while (n > 0): \n        n >>= 1\n        res += 1\n    return 1 << (res - 1)"], "evaluation": true}
{"problem_id": 200, "prompt": "def position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    max_val = max(list1)\n    max_indices = [i for i, val in enumerate(list1) if val == max_val]\n    return max_indices", "\ndef position_max(list1):\n    max_val = max(list1)\n    max_indices = [i for i, val in enumerate(list1) if val == max_val]\n    return max_indices", "\ndef position_max(list1):\n    max_val = max(list1)\n    max_indices = [i for i, val in enumerate(list1) if val == max_val]\n    return max_indices"], "evaluation": true}
