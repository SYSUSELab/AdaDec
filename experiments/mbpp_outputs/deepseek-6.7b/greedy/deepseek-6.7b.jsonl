{"problem_id": 1, "prompt": "R = 3\nC = 3\ndef min_cost(cost, m, n): \n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[m][n]"], "evaluation": true}
{"problem_id": 2, "prompt": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))"], "evaluation": false}
{"problem_id": 3, "prompt": "import math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 4, "prompt": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"], "evaluation": false}
{"problem_id": 5, "prompt": "def count_ways(n): \n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    # The problem can be solved using dynamic programming.\n    # The number of ways to fill a 3 x n board with 2 x 1 dominoes is equal to the number of ways to fill a 2 x n board with 2 x 1 dominoes.\n    # This is because we can rotate the board 90 degrees to get a 2 x n board, and then we can fill it with dominoes.\n    # The number of ways to fill a 2 x n board with 2 x 1 dominoes is equal to the number of ways to fill a 1 x n board with 2 x 1 dominoes.\n    # This is because we can add a 2 x 1 domino to the end of a 1 x n board and then add a 2 x 1 domino to the end of the remaining part.\n    # The number of ways to fill a 1 x n board with 2 x 1 dominoes is equal to the number of ways to fill a 0 x n board with 2 x 1 dominoes.\n    # This is because we can add a 2 x 1 domino to the end of a 0 x n board.\n    # The number of ways to fill a 0 x n board with 2 x 1 dominoes is 1.\n    # This is because we can add a 2 x 1 domino to the end of a 0 x n board.\n    # The number of ways to fill a 1 x n board with 2 x 1 dominoes is equal to the number of ways to fill a 0 x n board with 2 x 1 dominoes plus the number of ways to fill a 1 x n board with 2 x 1 dominoes.\n    # This is because we can add a 2 x 1 domino to the end of a 0 x n board and then add a 2 x 1 domino to the end of a 1 x n board.\n    # The number of ways to fill a 2 x n board with 2 x 1 dominoes is equal to the number of ways to fill a 1 x n board with 2 x 1 dominoes plus the number of ways to fill a 2 x n board with 2 x 1 domino"], "evaluation": false}
{"problem_id": 6, "prompt": "def differ_At_One_Bit_Pos(a,b): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    # convert the numbers to binary and remove the '0b' part\n    a_bin = bin(a)[2:]\n    b_bin = bin(b)[2:]\n\n    # calculate the number of bits in the binary representation\n    len_a = len(a_bin)\n    len_b = len(b_bin)\n\n    # if the lengths are different, they can't differ at one bit position\n    if len_a != len_b:\n        return False\n\n    # count the number of different bits\n    diff_bits = 0\n    for i in range(len_a):\n        if a_bin[i] != b_bin[i]:\n            diff_bits += 1\n\n    # if there is exactly one different bit, the numbers differ at one bit position\n    return diff_bits == 1"], "evaluation": true}
{"problem_id": 7, "prompt": "import re\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"], "evaluation": true}
{"problem_id": 8, "prompt": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))"], "evaluation": true}
{"problem_id": 9, "prompt": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    n = len(str) \n    temp = str + str \n    rotations = []\n    for i in range(n): \n        rotations.append(temp[i : n + i]) \n    return rotations"], "evaluation": false}
{"problem_id": 10, "prompt": "import heapq\ndef small_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for _ in range(n)]"], "evaluation": true}
{"problem_id": 11, "prompt": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == ch:\n            s[i] = ''\n            break\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == ch:\n            s[i] = ''\n            break\n    return ''.join(s)"], "evaluation": true}
{"problem_id": 12, "prompt": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    # Sort the matrix by sum of rows\n    M.sort(key=sum)\n    return M"], "evaluation": true}
{"problem_id": 13, "prompt": "from collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    return word_counts.most_common(1)"], "evaluation": false}
{"problem_id": 14, "prompt": "def find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    # calculate the volume\n    volume = (1/2) * l * b * h\n    return volume"], "evaluation": true}
{"problem_id": 15, "prompt": "import re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n    return re.findall('[A-Z][^A-Z]*', text)"], "evaluation": false}
{"problem_id": 16, "prompt": "import re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)"], "evaluation": false}
{"problem_id": 17, "prompt": "def square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    return 4 * a"], "evaluation": true}
{"problem_id": 18, "prompt": "NO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n    present = [False]*NO_OF_CHARS\n    for i in second_string: \n        present[ord(i)] = True\n    result = [] \n    for i in string: \n        if not present[ord(i)]: \n            result.append(i) \n    return \"\".join(result)"], "evaluation": false}
{"problem_id": 19, "prompt": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))"], "evaluation": true}
{"problem_id": 20, "prompt": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 21, "prompt": "def multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(i*n)\n    return multiples"], "evaluation": true}
{"problem_id": 22, "prompt": "def find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            return num\n        nums_set.add(num)\n    return -1"], "evaluation": true}
{"problem_id": 23, "prompt": "def maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    max_sum = 0\n    for sublist in list1:\n        max_sum = max(max_sum, sum(sublist))\n    return max_sum"], "evaluation": true}
{"problem_id": 24, "prompt": "def binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    binary = str(binary)\n    decimal, i, n = 0, 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal"], "evaluation": false}
{"problem_id": 25, "prompt": "def find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    return product"], "evaluation": true}
{"problem_id": 26, "prompt": "def check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    return all(item in test_list for item in K)"], "evaluation": false}
{"problem_id": 27, "prompt": "import re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    return [re.sub(r'\\d+', '', i) for i in list]"], "evaluation": true}
{"problem_id": 28, "prompt": "def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    if k>n:\n        return 0\n    if k==0 or k==n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"], "evaluation": true}
{"problem_id": 29, "prompt": "def get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res"], "evaluation": true}
{"problem_id": 30, "prompt": "def count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    n = len(s)\n    res = 0\n    count = [0]*256\n    for i in range(n):\n        count[ord(s[i])] += 1\n    for i in range(256):\n        res += (count[i]*(count[i]+1))//2\n    return res"], "evaluation": true}
{"problem_id": 31, "prompt": "def func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    import heapq\n    from collections import Counter\n\n    count = Counter(nums)\n    heap = []\n    for num, freq in count.items():\n        heapq.heappush(heap, (-freq, num))\n\n    return [heapq.heappop(heap)[1] for _ in range(k)]"], "evaluation": false}
{"problem_id": 32, "prompt": "import math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n    max_prime = -1\n    while n % 2 == 0: \n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            max_prime = i \n            n = n / i \n    if n > 2: \n        max_prime = n \n    return max_prime"], "evaluation": true}
{"problem_id": 33, "prompt": "def decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N == 0:\n        return 0\n    else:\n        return N % 2 + 10 * decimal_To_Binary(N // 2)"], "evaluation": true}
{"problem_id": 34, "prompt": "def find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    total = ((N + 1) * (N + 2)) // 2\n    sum_of_ar = sum(ar)\n    return total - sum_of_ar"], "evaluation": false}
{"problem_id": 35, "prompt": "def find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    return n * (n + 1) // 2"], "evaluation": false}
{"problem_id": 36, "prompt": "def find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 37, "prompt": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    mixed_list.sort(key=lambda x: (str(type(x)), x))\n    return mixed_list"], "evaluation": true}
{"problem_id": 38, "prompt": "def div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    if even_num == 0:\n        return \"No even number in the list\"\n    elif odd_num == 0:\n        return \"No odd number in the list\"\n    else:\n        return even_num / odd_num"], "evaluation": false}
{"problem_id": 39, "prompt": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    if not S:\n        return \"\"\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        heapq.heappush(max_heap, (-freq, char))\n    result = []\n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        if not max_heap:\n            break\n        freq2, char2 = heapq.heappop(max_heap)\n        result.append(char2)\n        if freq < -1:\n            heapq.heappush(max_heap, (freq+1, char))\n        if freq2 < -1:\n            heapq.heappush(max_heap, (freq2+1, char2))\n    return \"\".join(result) if len(result) == len(S) else \"\""], "evaluation": true}
{"problem_id": 40, "prompt": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)"], "evaluation": true}
{"problem_id": 41, "prompt": "def filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "def find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    # Creating an empty dictionary\n    d = {}\n\n    # Traversing through the array\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n\n    # Finding the sum of repeated elements\n    sum = 0\n    for i in d:\n        if d[i] > 1:\n            sum += i\n\n    return sum"], "evaluation": false}
{"problem_id": 43, "prompt": "import re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!!')"], "evaluation": false}
{"problem_id": 44, "prompt": "import re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n    pattern = r\"^\\w+\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 45, "prompt": "def get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    num1 = l[0]\n    num2 = l[1]\n    result = gcd(num1, num2)\n\n    for i in range(2, len(l)):\n        result = gcd(result, l[i])\n\n    return result"], "evaluation": true}
{"problem_id": 46, "prompt": "def test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 47, "prompt": "def compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    # Initialize the last digit of factorial of A and B\n    last_digit_A = 1\n    last_digit_B = 1\n\n    # Calculate the last digit of factorial of A\n    for i in range(1, A+1):\n        last_digit_A = (last_digit_A * i) % 10\n\n    # Calculate the last digit of factorial of B\n    for i in range(1, B+1):\n        last_digit_B = (last_digit_B * i) % 10\n\n    # Calculate the last digit of factorial of B divided by factorial of A\n    last_digit_div = (last_digit_B // last_digit_A) % 10\n\n    return last_digit_div"], "evaluation": false}
{"problem_id": 48, "prompt": "def odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    return n | 0bevaluation": false}
{"problem_id": 49, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    return [nums[i][0] for i in range(N)]"], "evaluation": false}
{"problem_id": 50, "prompt": "def min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    min_length = min(len(lst) for lst in input_list)\n    min_length_list = [lst for lst in input_list if len(lst) == min_length]\n    return min_length_list"], "evaluation": false}
{"problem_id": 51, "prompt": "def check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    if x==y==z:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\""], "evaluation": false}
{"problem_id": 52, "prompt": "def parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    return b*h"], "evaluation": true}
{"problem_id": 53, "prompt": "def check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 54, "prompt": "def counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    # Find the maximum number to know the range\n    max_val = max(my_list)\n\n    # Initialize count array\n    count_arr = [0] * (max_val + 1)\n\n    # Traverse through the given array and fill the count array\n    for num in my_list:\n        count_arr[num] += 1\n\n    # Modify the count array so that each element at each index\n    # stores the sum of previous counts\n    for i in range(max_val):\n        count_arr[i + 1] += count_arr[i]\n\n    # Output array\n    output = [0] * len(my_list)\n\n    # Build the output array\n    for num in my_list:\n        output[count_arr[num] - 1] = num\n        count_arr[num] -= 1\n\n    return output"], "evaluation": true}
{"problem_id": 55, "prompt": "import math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n    return a*r**(n-1)"], "evaluation": true}
{"problem_id": 56, "prompt": "def check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    reverse = int(str(n)[::-1])\n    return n == reverse * 2 - 1"], "evaluation": true}
{"problem_id": 57, "prompt": "def find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    arr.sort(reverse=True)\n    return int(\"\".join(map(str,arr)))"], "evaluation": true}
{"problem_id": 58, "prompt": "def opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    return (x ^ y) < 0"], "evaluation": true}
{"problem_id": 59, "prompt": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    return n * (3 * n - 2)"], "evaluation": true}
{"problem_id": 60, "prompt": "def max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    # Initialize the variables\n    max_len = 1\n    cur_len = 1\n    for i in range(1, n):\n        if (arr[i] > arr[i-1]):\n            cur_len += 1\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n            cur_len = 1\n    if cur_len > max_len:\n        max_len = cur_len\n    return max_len"], "evaluation": false}
{"problem_id": 61, "prompt": "from collections import defaultdict\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n    # Initialize result\n    res = 0\n\n    # Create a map to store counts of all prefix sums.\n    prefix_sum = defaultdict(int)\n\n    # Initialize prefix sum\n    curr_sum = 0\n\n    for i in range(n):\n        # Increment current prefix sum\n        curr_sum += ord(s[i]) - ord('0')\n\n        # If prefix sum is equal to length of substring\n        if curr_sum == i+1:\n            res += 1\n\n        # Increment count of current prefix sum\n        prefix_sum[curr_sum] += 1\n\n        # If prefix sum - length of substring exists in map\n        if (curr_sum - (i+1) in prefix_sum):\n            res += prefix_sum[curr_sum - (i+1)]\n\n    return res"], "evaluation": false}
{"problem_id": 62, "prompt": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    return min(xs)"], "evaluation": true}
{"problem_id": 63, "prompt": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"], "evaluation": false}
{"problem_id": 64, "prompt": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key = lambda x: x[1])"], "evaluation": true}
{"problem_id": 65, "prompt": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"], "evaluation": false}
{"problem_id": 66, "prompt": "def pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"], "evaluation": true}
{"problem_id": 68, "prompt": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))"], "evaluation": true}
{"problem_id": 69, "prompt": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    return s in l"], "evaluation": false}
{"problem_id": 70, "prompt": "def get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    return all(len(t) == k for t in Input)"], "evaluation": false}
{"problem_id": 71, "prompt": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"], "evaluation": true}
{"problem_id": 72, "prompt": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i - j*j) == n:\n                return True\n            j += 1\n        i += 1\n    return False"], "evaluation": false}
{"problem_id": 73, "prompt": "import re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n    delimiters = [' ', ',', '.', ';', ':', '?', '!/']\n    regex_pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(regex_pattern, text)"], "evaluation": false}
{"problem_id": 74, "prompt": "def is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n    # Initialize the pattern\n    pattern = []\n\n    # Iterate over the colors\n    for color in colors:\n        # If the color is not in the pattern, add it\n        if color not in pattern:\n            pattern.append(color)\n\n    # Compare the pattern with the patterns array\n    if pattern == patterns:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 75, "prompt": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"], "evaluation": false}
{"problem_id": 76, "prompt": "def count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    return (m*n)//2"], "evaluation": false}
{"problem_id": 77, "prompt": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return even_sum - odd_sum"], "evaluation": false}
{"problem_id": 78, "prompt": "def count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    # Initialize count of numbers with odd number of set bits\n    count = 0\n\n    # Traverse through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Count set bits in the current number\n        setBitsCount = bin(i).count(\"1\")\n\n        # If count of set bits is odd, increment count\n        if setBitsCount % 2 != 0:\n            count += 1\n\n    return count"], "evaluation": true}
{"problem_id": 79, "prompt": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    return len(s) % 2 == 1"], "evaluation": true}
{"problem_id": 80, "prompt": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    return n * (n + 1) * (n + 2) // 6"], "evaluation": true}
{"problem_id": 81, "prompt": "def zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))"], "evaluation": false}
{"problem_id": 82, "prompt": "import math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r**3)"], "evaluation": true}
{"problem_id": 83, "prompt": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum // len(strr))"], "evaluation": false}
{"problem_id": 84, "prompt": "def sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n    return sequence[1:]"], "evaluation": false}
{"problem_id": 85, "prompt": "import math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2"], "evaluation": true}
{"problem_id": 86, "prompt": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    return n * (5 * n - 3) // 2"], "evaluation": false}
{"problem_id": 87, "prompt": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return ct.ChainMap(dict1, dict2, dict3)"], "evaluation": true}
{"problem_id": 88, "prompt": "import collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n    return collections.Counter(list1)"], "evaluation": true}
{"problem_id": 89, "prompt": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    # Convert the number to a string\n    N = str(N)\n\n    # Find the length of the number\n    length = len(N)\n\n    # If the number is less than 10, return -1\n    if length < 2:\n        return -1\n\n    # If the number is greater than or equal to 10, find the closest smaller number\n    else:\n        # If the first digit is 1, replace it with 0 and convert the rest of the number to 9\n        if N[0] == '1':\n            return int(N[0] + '0' + '9' * (length - 2))\n\n        # If the first digit is greater than 1, replace the first digit with the digit minus 1 and convert the rest of the number to 9\n        else:\n            return int(str(int(N[0]) - 1) + '9' * (length - 1))"], "evaluation": false}
{"problem_id": 90, "prompt": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    return max(len(word) for word in list1)"], "evaluation": true}
{"problem_id": 91, "prompt": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 92, "prompt": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    n = str(n)\n    if len(n) < 3:\n        return False\n    else:\n        for i in range(2, len(n)):\n            if n[i] == n[i-1] == n[i-2]:\n                return False\n        return True"], "evaluation": false}
{"problem_id": 93, "prompt": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    return a**b"], "evaluation": true}
{"problem_id": 94, "prompt": "from operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n    result = min(enumerate(test_list), key=itemgetter(1))\n    return result"], "evaluation": false}
{"problem_id": 95, "prompt": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    # Initialize min_length to the length of the first sublist\n    min_length = len(lst[0])\n\n    # Iterate over the sublists\n    for sublist in lst:\n        # If the length of the current sublist is less than min_length, update min_length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # Return the minimum length\n    return min_length"], "evaluation": true}
{"problem_id": 96, "prompt": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 97, "prompt": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"], "evaluation": true}
{"problem_id": 98, "prompt": "def multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"], "evaluation": true}
{"problem_id": 99, "prompt": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)"], "evaluation": false}
{"problem_id": 100, "prompt": "import sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return num\n    elif length == 2:\n        if num[0] > num[1]:\n            return str(int(num) - 1)\n        else:\n            return num\n    else:\n        half = length // 2\n        first_half = num[:half]\n        second_half = num[half:][::-1]\n        if first_half > second_half:\n            return num[:half] + num[half][::-1]\n        elif first_half == second_half:\n            return num[:half] + str(int(num[half]) - 1) + num[half + 1:][::-1]\n        else:\n            return num[:half] + num[half] + num[half + 1:][::-1]"], "evaluation": false}
{"problem_id": 101, "prompt": "def kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]"], "evaluation": false}
{"problem_id": 102, "prompt": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    return ''.join(word.title().split('_'))"], "evaluation": true}
{"problem_id": 103, "prompt": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    # Initialize the matrix\n    a = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\n    # Fill the matrix\n    for i in range(n+1):\n        for j in range(min(i, m)+1):\n            if j == 0 or j == i:\n                a[i][j] = 1\n            else:\n                a[i][j] = a[i-1][j-1] + a[i-1][j]\n\n    return a[n][m]"], "evaluation": false}
{"problem_id": 104, "prompt": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]"], "evaluation": true}
{"problem_id": 105, "prompt": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    return lst.count(True)"], "evaluation": true}
{"problem_id": 106, "prompt": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    # Convert the tuple to a list\n    tup_list = list(test_tup)\n\n    # Add the lists\n    result_list = [test_list[i] + tup_list[i] for i in range(len(test_list))]\n\n    return result_list"], "evaluation": false}
{"problem_id": 107, "prompt": "def count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1):\n        if i % 16 == 0:\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    for i in [num1,num2,num3]:\n        for j in i:\n            heapq.heappush(heap,j)\n    return [heapq.heappop(heap) for _ in range(len(heap))]"], "evaluation": true}
{"problem_id": 109, "prompt": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    # Initialize the count of rotations\n    count = 0\n\n    # Convert the binary string to a list of characters\n    s = list(s)\n\n    # Iterate over the string\n    for i in range(n):\n        # If the current character is '1'\n        if s[i] == '1':\n            # Increment the count of rotations\n            count += 1\n\n    return count"], "evaluation": true}
{"problem_id": 110, "prompt": "def extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    test_list.sort()\n    missing_ranges = []\n    prev_val = strt_val\n    for val in test_list:\n        if val - prev_val > 1:\n            missing_ranges.append((prev_val, val - 1))\n        prev_val = val\n    if test_list[-1] < stop_val:\n        missing_ranges.append((test_list[-1] + 1, stop_val))\n    return missing_ranges"], "evaluation": false}
{"problem_id": 111, "prompt": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    if not all(isinstance(i, list) for i in nestedlist):\n        raise ValueError(\"All elements in the input list should be lists\")\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements = common_elements & set(sublist)\n    return list(common_elements)"], "evaluation": true}
{"problem_id": 112, "prompt": "def perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    # Write your code here\n    import math\n    radius = diameter/2\n    perimeter = 2*math.pi*radius\n    return perimeter"], "evaluation": false}
{"problem_id": 113, "prompt": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"], "evaluation": true}
{"problem_id": 114, "prompt": "from collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n    return Counter(test_list)"], "evaluation": false}
{"problem_id": 115, "prompt": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    return all(len(d) == 0 for d in list1)"], "evaluation": true}
{"problem_id": 116, "prompt": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))"], "evaluation": true}
{"problem_id": 117, "prompt": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    return [float(i) if isinstance(i, (int, str)) else i for i in test_list]"], "evaluation": false}
{"problem_id": 118, "prompt": "def string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    return list(string)"], "evaluation": false}
{"problem_id": 119, "prompt": "def search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    # Initialize first and last index\n    low = 0\n    high = n - 1\n\n    # Perform Binary Search\n    while low < high:\n        mid = (low + high) // 2\n\n        # If mid is even and element next to mid is same then\n        # the required element lies on the right half\n        if arr[mid] == arr[mid ^ 1]:\n            low = mid + 1\n\n        # If mid is even and element next to mid is not same then\n        # the required element lies on the left half\n        else:\n            high = mid\n\n    return arr[low]"], "evaluation": true}
{"problem_id": 120, "prompt": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"], "evaluation": false}
{"problem_id": 121, "prompt": "def check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0:\n        return False\n    output = check_triplet(A, n - 1, sum, count)\n    if output == True:\n        return True\n    if check_triplet(A, n - 1, sum - A[n - 1], count + 1):\n        return True\n    return False"], "evaluation": true}
{"problem_id": 122, "prompt": "MAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    prime = [True for i in range(MAX + 1)] \n    p = 2\n    while (p * p <= MAX): \n        if (prime[p] == True): \n            for i in range(p * p, MAX+1, p): \n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    cnt = 0\n    res = 0\n    for i in range(2, MAX+1): \n        if (prime[i]): \n            cnt += 1\n        if (cnt == n): \n            res = i\n            break\n    return res"], "evaluation": false}
{"problem_id": 123, "prompt": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    return sum(i for i in range(1, limit) if i == d(d(i)))"], "evaluation": false}
{"problem_id": 124, "prompt": "import cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(a+b*1j)"], "evaluation": false}
{"problem_id": 125, "prompt": "def find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    max_diff = 0\n    count_ones = 0\n    count_zeros = 0\n    for i in range(n): \n        if string[i] == '1': \n            count_ones += 1\n        else: \n            count_zeros += 1\n        if count_ones < count_zeros: \n            count_ones = 0\n            count_zeros = 0\n        max_diff = max(max_diff, abs(count_ones - count_zeros)) \n    return max_diff"], "evaluation": false}
{"problem_id": 126, "prompt": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    def common_divisors(a, b):\n        divisors = []\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    return sum(common_divisors(a, b))"], "evaluation": false}
{"problem_id": 127, "prompt": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        result = -result\n    return result"], "evaluation": true}
{"problem_id": 128, "prompt": "def long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]"], "evaluation": false}
{"problem_id": 129, "prompt": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n    # Check if the matrix is a square matrix\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a 3x3 matrix\n    if len(my_matrix) != 3:\n        return False\n\n    # Calculate the sum of the first row\n    sum_first_row = sum(my_matrix[0])\n\n    # Calculate the sum of each column\n    sum_columns = [sum(column) for column in zip(*my_matrix)]\n\n    # Calculate the sum of the diagonals\n    sum_diagonal1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    sum_diagonal2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    # Check if all sums are equal\n    if sum_first_row == sum_columns[0] == sum_columns[1] == sum_columns[2] == sum_diagonal1 == sum_diagonal2:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 130, "prompt": "from collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_count = max(count_dict.values())\n    return [num for num, count in count_dict.items() if count == max_count]"], "evaluation": false}
{"problem_id": 131, "prompt": "def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str1)"], "evaluation": true}
{"problem_id": 132, "prompt": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    return ''.join(tup1)"], "evaluation": true}
{"problem_id": 133, "prompt": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"], "evaluation": true}
{"problem_id": 134, "prompt": "def check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    for i in range(p):\n        arr.pop()\n    if arr[-1] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""], "evaluation": false}
{"problem_id": 135, "prompt": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return n*(2*n-1)"], "evaluation": true}
{"problem_id": 136, "prompt": "def cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    if units <= 100:\n        return units * 10\n    elif units <= 200:\n        return (100 * 10) + ((units - 100) * 15)\n    elif units <= 300:\n        return (100 * 10) + (100 * 15) + ((units - 200) * 20)\n    else:\n        return (100 * 10) + (100 * 15) + (100 * 20) + ((units - 300) * 25)"], "evaluation": false}
{"problem_id": 137, "prompt": "from array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n    zero_count = nums.count(0)\n    total_count = len(nums)\n    ratio = zero_count / total_count\n    return ratio"], "evaluation": false}
{"problem_id": 138, "prompt": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    # Base case\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n\n    # Recursive case\n    for i in range(n):\n        if is_Sum_Of_Powers_Of_Two(n - 2**i):\n            return True\n\n    return False"], "evaluation": false}
{"problem_id": 139, "prompt": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    import math\n    return 2 * math.pi * r"], "evaluation": false}
{"problem_id": 140, "prompt": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    # Initialize an empty dictionary\n    count_dict = {}\n\n    # Count the occurrence of each element in the list\n    for sublist in test_list:\n        for item in sublist:\n            count_dict[item] = count_dict.get(item, 0) + 1\n\n    # Extract elements that occur singly\n    singly_occurring_elements = [key for key, value in count_dict.items() if value == 1]\n\n    return singly_occurring_elements"], "evaluation": false}
{"problem_id": 141, "prompt": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    # Your code here\n    for cur_size in range(len(nums), 0, -1):\n        max_index = max_element(nums, cur_size)\n        if max_index != cur_size - 1:\n            nums = flip(nums, max_index)\n            nums = flip(nums, cur_size - 1)\n    return nums"], "evaluation": false}
{"problem_id": 142, "prompt": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    # Convert lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n\n    # Find intersection of three sets\n    same_elements = set1.intersection(set2).intersection(set3)\n\n    # Count the same pair\n    count = len(same_elements)\n\n    return count"], "evaluation": false}
{"problem_id": 143, "prompt": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 144, "prompt": "def sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    sum = 0\n    for i in range(0, n): \n        for j in range(i+1, n): \n            sum += abs(arr[i] - arr[j]) \n    return sum"], "evaluation": true}
{"problem_id": 145, "prompt": "def max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    arr.sort()\n    return arr[-1] - arr[0]"], "evaluation": false}
{"problem_id": 146, "prompt": "def ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    total = 0\n    for char in str1:\n        total += ord(char)\n    return total"], "evaluation": false}
{"problem_id": 147, "prompt": "def max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    # Initialize the first value of the path sum array\n    path_sum = [[0 for x in range(m)] for y in range(n)]\n    path_sum[0][0] = tri[0][0]\n\n    # Fill the path_sum array in a bottom-up manner\n    for i in range(1, m):\n        for j in range(i+1):\n            # If the current element is on the boundary of the triangle\n            if j == 0:\n                path_sum[i][j] = path_sum[i-1][j] + tri[i][j]\n            elif j == i:\n                path_sum[i][j] = path_sum[i-1][j-1] + tri[i][j]\n            # If the current element is in the middle of the triangle\n            else:\n                path_sum[i][j] = max(path_sum[i-1][j-1], path_sum[i-1][j]) + tri[i][j]\n\n    # The maximum path sum will be the maximum value in the last row of the path_sum array\n    return max(path_sum[-1])"], "evaluation": false}
{"problem_id": 148, "prompt": "def sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n    # convert number to string\n    N = str(N)\n    # calculate length of the number\n    n = len(N)\n    # sort the number in descending order\n    N = sorted(N, reverse=True)\n    # divide the number into two parts\n    part1 = N[:n//2]\n    part2 = N[n//2:]\n    # calculate sum of digits in both parts\n    sum1 = sum(int(i) for i in part1)\n    sum2 = sum(int(i) for i in part2)\n    # return the maximum sum\n    return max(sum1, sum2)"], "evaluation": false}
{"problem_id": 149, "prompt": "def longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    # Initialize the dp array with 1s\n    dp = [1]*n\n\n    # Initialize the maximum length to 1\n    max_length = 1\n\n    # Traverse through the array from the second element to the end\n    for i in range(1, n):\n        # Check if the adjacent elements have a difference of one\n        if abs(arr[i] - arr[i-1]) == 1:\n            # If so, update the dp value for the current element\n            dp[i] = dp[i-1] + 1\n        # Update the maximum length\n        max_length = max(max_length, dp[i])\n\n    return max_length"], "evaluation": false}
{"problem_id": 150, "prompt": "def does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    # Write your code here\n    if b in a:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 151, "prompt": "def is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    def gcd(x,y):\n        while(y):\n            x, y = y, x % y\n        return x\n    if(gcd(x,y) == 1):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 152, "prompt": "def merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)"], "evaluation": false}
{"problem_id": 153, "prompt": "def parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    # The vertex of a parabola is given by the formula (-b/2a, -(4ac-b^2)/4a^2)\n    x_vertex = -b / (2 * a)\n    y_vertex = -(4 * a * c - b**2) / (4 * a**2)\n    return (x_vertex, y_vertex)"], "evaluation": false}
{"problem_id": 154, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(N):\n        result.append(nums[i])\n    return result"], "evaluation": false}
{"problem_id": 155, "prompt": "def even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)) :\n        if i % 2 == 0 :\n            if binary[i] == '1' :\n                binary[i] = '0'\n            else :\n                binary[i] = '1'\n    return int(''.join(binary), 2)"], "evaluation": false}
{"problem_id": 156, "prompt": "def tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    return tuple(map(int, tuple_str))"], "evaluation": false}
{"problem_id": 157, "prompt": "from itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n    return [(len(list(group)), value) for value, group in groupby(list1)]"], "evaluation": false}
{"problem_id": 158, "prompt": "def min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    arr.sort()\n    ans = float('inf')\n    prefix = [0]*n\n    prefix[0] = arr[0]\n    for i in range(1,n):\n        prefix[i] = prefix[i-1] + arr[i]\n    for i in range(k-1,n):\n        if i == k-1:\n            sum = prefix[i]\n        else:\n            sum = prefix[i] - prefix[i-k]\n        ans = min(ans, sum)\n    return ans*(k-1)"], "evaluation": false}
{"problem_id": 159, "prompt": "def month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    if month in ['January', 'February', 'March']:\n        season = 'Winter'\n    elif month in ['April', 'May', 'June']:\n        season = 'Spring'\n    elif month in ['July', 'August', 'September']:\n        season = 'Summer'\n    else:\n        season = 'Autumn'\n\n    if days == 31:\n        print(f\"{month} is in {season}\")\n    elif days == 30:\n        print(f\"{month} is in {season}\")\n    elif month == 'February' and days == 29:\n        print(f\"{month} is in {season}\")\n    else:\n        print(\"Invalid days for the given month\")"], "evaluation": false}
{"problem_id": 160, "prompt": "def solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    # Initialize x and y to 0\n    x = 0\n    y = 0\n\n    # Check if n is divisible by a and b\n    if n % a == 0 and n % b == 0:\n        # If n is divisible by a, set x to n/a\n        x = n // a\n        # If n is divisible by b, set y to n/b\n        y = n // b\n    else:\n        # If n is not divisible by a or b, return an empty list\n        return []\n\n    # Return x and y\n    return [x, y]"], "evaluation": false}
{"problem_id": 161, "prompt": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]"], "evaluation": true}
{"problem_id": 162, "prompt": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    total = 0\n    while n >= 0:\n        total += n\n        n -= 2\n    return total"], "evaluation": true}
{"problem_id": 163, "prompt": "from math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n    return (s*l**2)/(4*tan(pi/s))"], "evaluation": true}
{"problem_id": 164, "prompt": "import math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n    def sum_of_divisors(n):\n        sum = 0\n        for i in range(1, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                if n / i == i:\n                    sum = sum + i\n                else:\n                    sum = sum + i\n                    sum = sum + (n//i)\n        return sum - n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)"], "evaluation": true}
{"problem_id": 165, "prompt": "def count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    count = 0\n    for i in range(len(str1)):\n        if i == ord(str1[i].lower()) - 97:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 166, "prompt": "def find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    # Initialize result\n    count = 0\n\n    # Create a map to store counts of all elements\n    map = [0] * 256\n\n    # Traverse through all elements of the array\n    for i in range(N):\n        map[A[i]] += 1\n\n    # Traverse through all elements of the map\n    for i in range(256):\n\n        # If there are two elements with the same value\n        if map[i] > 0:\n\n            # Count the pairs\n            count += (map[i] * (map[i] - 1)) // 2\n\n    return count"], "evaluation": false}
{"problem_id": 167, "prompt": "def next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    if (n and not(n & (n - 1))): \n        return n \n    while(n > 0): \n        n >>= 1\n    return 1 << (n + 1)"], "evaluation": false}
{"problem_id": 168, "prompt": "def frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "def get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n + 1):\n            pell.append(2 * pell[i - 1] + pell[i - 2])\n        return pell[n]"], "evaluation": true}
{"problem_id": 170, "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m:n+1])"], "evaluation": true}
{"problem_id": 171, "prompt": "import math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n    return 5 * a"], "evaluation": true}
{"problem_id": 172, "prompt": "def count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 173, "prompt": "import re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n    return re.sub(r'\\W+','', text)"], "evaluation": false}
{"problem_id": 174, "prompt": "def group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d"], "evaluation": true}
{"problem_id": 175, "prompt": "def is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    stack = []\n    dict = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for char in str1:\n        if char in dict.values():\n            stack.append(char)\n        elif char in dict.keys():\n            if stack == [] or dict[char] != stack.pop():\n                return False\n    return stack == []"], "evaluation": true}
{"problem_id": 176, "prompt": "def perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    return a+b+c"], "evaluation": true}
{"problem_id": 177, "prompt": "def answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    def gcd(x, y): \n        while(y): \n            x, y = y, x % y \n        return x \n      \n    def lcm(x, y): \n        lcm = (x*y)//gcd(x,y) \n        return lcm \n\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            if lcm(i, j) >= L and lcm(i, j) <= R:\n                return i, j"], "evaluation": false}
{"problem_id": 178, "prompt": "import re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n    return [re.search(patterns,text) for pattern in patterns]"], "evaluation": false}
{"problem_id": 179, "prompt": "def is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    def is_keith(n):\n        def to_digits(n):\n            return [int(i) for i in str(n)]\n\n        def to_num(digits):\n            return int(''.join(map(str, digits)))\n\n        seen = set()\n        digits = to_digits(n)\n        while len(digits) <= len(str(n)):\n            if to_num(digits) == n:\n                return False\n            if to_num(digits) in seen:\n                return False\n            seen.add(to_num(digits))\n            digits.append(sum(digits[-len(digits):]))\n        return True\n\n    return is_keith(x)"], "evaluation": false}
{"problem_id": 180, "prompt": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n\n    # Haversine formula\n    dlon = elon - slon\n    dlat = elat - slat\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(a)\n    r = 6371  # Radius of earth in kilometers. Use 3956 for miles\n    return (c * r)"], "evaluation": false}
{"problem_id": 181, "prompt": "def common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n\n    if n == 1:\n        return arr[0]\n\n    arr.sort()\n\n    end = min(len(arr[0]), len(arr[n - 1]))\n\n    i = 0\n    while i < end and arr[0][i] == arr[n - 1][i]:\n        i += 1\n\n    return arr[0][0: i]"], "evaluation": true}
{"problem_id": 182, "prompt": "import re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[@_#$%^&*()<>?/\\|}{~:]', string)\n    numeric = re.findall(r'\\d', string)\n\n    return uppercase, lowercase, special_char, numeric"], "evaluation": false}
{"problem_id": 183, "prompt": "def count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    arr = sorted(arr)\n    pairs = []\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] - arr[i] == k:\n            pairs.append((arr[i], arr[j]))\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return len(pairs), pairs"], "evaluation": false}
{"problem_id": 184, "prompt": "def greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    return [i for i in list if i > num]"], "evaluation": false}
{"problem_id": 185, "prompt": "def parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    # The equation of a parabola is y = ax^2 + bx + c\n    # The focus of a parabola is the point where the line perpendicular to the directrix intersects the parabola.\n    # The equation of the line perpendicular to the directrix is y = mx + c, where m is the slope of the directrix.\n    # The intersection point of the line and the parabola can be found by setting the two equations equal to each other and solving for x and y.\n    # The x-coordinate of the focus is given by the formula -b/2a.\n    # The y-coordinate can be found by substituting the x-coordinate into the equation of the parabola.\n    focus_x = -b / (2 * a)\n    focus_y = a * focus_x**2 + b * focus_x + c\n    return (focus_x, focus_y)"], "evaluation": false}
{"problem_id": 186, "prompt": "import re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result"], "evaluation": false}
{"problem_id": 187, "prompt": "def longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0:\n        return []\n    elif X[m-1] == Y[n-1]:\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n    else:\n        lcs1 = longest_common_subsequence(X, Y, m-1, n)\n        lcs2 = longest_common_subsequence(X, Y, m, n-1)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2"], "evaluation": false}
{"problem_id": 188, "prompt": "def prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    while (n % 4 == 0):\n        n /= 4\n    if (n % 8 == 0):\n        return True\n    return False"], "evaluation": false}
{"problem_id": 189, "prompt": "def first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1"], "evaluation": true}
{"problem_id": 190, "prompt": "def count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    # Initialize the count to 0\n    count = 0\n\n    # Iterate over the range of x and y coordinates\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            # If the coordinates are integral, increment the count\n            if x % 1 == 0 and y % 1 == 0:\n                count += 1\n\n    return count"], "evaluation": false}
{"problem_id": 191, "prompt": "def check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in month_30_days:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 192, "prompt": "def check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    has_num = False\n    has_alpha = False\n    for char in str:\n        if char.isdigit():\n            has_num = True\n        elif char.isalpha():\n            has_alpha = True\n        if has_num and has_alpha:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 193, "prompt": "def remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))"], "evaluation": true}
{"problem_id": 194, "prompt": "def octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    decimal, i = 0, 0\n    while(n != 0): \n        dec = n % 10\n        n = int(n / 10)\n        decimal = decimal + dec * pow(8, i) \n        i += 1\n    return decimal"], "evaluation": true}
{"problem_id": 195, "prompt": "def first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    for i in range(0,n): \n        if (arr[i] == x): \n            return i \n    return -1"], "evaluation": true}
{"problem_id": 196, "prompt": "def remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    return [t for t in test_list if len(t) != K]"], "evaluation": true}
{"problem_id": 197, "prompt": "def find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    # convert tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # perform exponentiation\n    result = [a**b for a, b in zip(list1, list2)]\n\n    return tuple(result)"], "evaluation": true}
{"problem_id": 198, "prompt": "import math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n    # The largest triangle that can be inscribed in an ellipse is a right-angled triangle.\n    # The largest right-angled triangle that can be inscribed in an ellipse is a right-angled triangle with the diameter of the ellipse as its base and the semi-major axis of the ellipse as its height.\n    # The area of this triangle is 0.5 * base * height.\n    # The semi-major axis of an ellipse is the distance from the center of the ellipse to either of the foci.\n    # The diameter of an ellipse is the distance between the two foci.\n    # The semi-minor axis of an ellipse is the distance from the center of the ellipse to the vertex of the ellipse.\n    # The area of an ellipse is π * semi-major axis * semi-minor axis.\n    # We can use the formula for the area of an ellipse to find the semi-minor axis.\n    # The semi-minor axis is the square root of (area * (semi-major axis)^2 / π^2 - (diameter)^2)\n    # We can then use this semi-minor axis to find the height of the triangle.\n    # The height of the triangle is the square root of (area - 0.5 * base * height)\n    # We can then use these two values to find the area of the triangle.\n    # The area of a triangle is 0.5 * base * height.\n    # We can then return this area.\n\n    # Calculate the semi-minor axis of the ellipse.\n    semi_minor_axis = math.sqrt((a * a * b) / (math.pi * math.pi) - (2 * a * a))\n\n    # Calculate the height of the triangle.\n    height = math.sqrt((a * a * b) - 0.5 * a * a * semi_minor_axis)\n\n    # Calculate the area of the triangle.\n    area = 0.5 * a * height\n\n    # Return the area of the triangle.\n    return area"], "evaluation": false}
{"problem_id": 199, "prompt": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    res = 0\n    while (n > 0): \n        n >>= 1\n        res += 1\n    return 1 << (res - 1)"], "evaluation": true}
{"problem_id": 200, "prompt": "def position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    max_value = max(list1)\n    max_indexes = [index for index, value in enumerate(list1) if value == max_value]\n    return max_indexes"], "evaluation": true}
