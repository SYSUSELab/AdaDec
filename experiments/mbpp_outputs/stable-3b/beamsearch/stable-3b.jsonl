{"problem_id": 1, "prompt": "R = 3\nC = 3\ndef min_cost(cost, m, n): \n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[m][n]", "\ndef min_cost(cost, m, n): \n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[m][n]", "\ndef min_cost(cost, m, n): \n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[m][n]"], "evaluation": false}
{"problem_id": 2, "prompt": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    similar_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_elements.append(i)\n    return similar_elements", "\ndef similar_elements(test_tup1, test_tup2):\n    similar_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_elements.append(i)\n    return similar_elements", "\ndef similar_elements(test_tup1, test_tup2):\n    similar_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_elements.append(i)\n    return similar_elements"], "evaluation": false}
{"problem_id": 3, "prompt": "import math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"], "evaluation": true}
{"problem_id": 4, "prompt": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    hq.heapify(nums)\n    largest_nums = []\n    while len(largest_nums) < n:\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums", "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    hq.heapify(nums)\n    largest_nums = []\n    while len(largest_nums) < n:\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums", "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    hq.heapify(nums)\n    largest_nums = []\n    while len(largest_nums) < n:\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums"], "evaluation": false}
{"problem_id": 5, "prompt": "def count_ways(n): \n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return count_ways(n-1) + count_ways(n-2)", "\ndef count_ways(n): \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return count_ways(n-1) + count_ways(n-2)", "\ndef count_ways(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return count_ways(n - 1) + count_ways(n - 2)"], "evaluation": false}
{"problem_id": 6, "prompt": "def differ_At_One_Bit_Pos(a,b): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    a_bin = format(a, 'b')\n    b_bin = format(b, 'b')\n    len_a = len(a_bin)\n    len_b = len(b_bin)\n    max_len = max(len_a, len_b)\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n    diff = 0\n    for i in range(max_len):\n        if a_bin[i]!= b_bin[i]:\n            diff += 1\n            if diff > 1:\n                return False\n    if diff == 1:\n        return True\n    else:\n        return False", "\ndef differ_At_One_Bit_Pos(a,b): \n    a_bin = format(a, 'b')\n    b_bin = format(b, 'b')\n    len_a = len(a_bin)\n    len_b = len(b_bin)\n    max_len = max(len_a, len_b)\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n    diff = 0\n    for i in range(max_len):\n        if a_bin[i]!= b_bin[i]:\n            diff += 1\n            if diff > 1:\n                return False\n    if diff == 1:\n        return True\n    else:\n        return False", "\ndef differ_At_One_Bit_Pos(a,b): \n    a_bin = format(a, 'b')\n    b_bin = format(b, 'b')\n    len_a = len(a_bin)\n    len_b = len(b_bin)\n    max_len = max(len_a, len_b)\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n    diff = 0\n    for i in range(max_len):\n        if a_bin[i]!= b_bin[i]:\n            diff += 1\n        if diff > 1:\n            return False\n    if diff == 1:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 7, "prompt": "import re\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    result = re.findall(pattern, text)\n    return result", "import re\n\ndef find_char_long(text):\n    pattern = r\"\\b\\w{4,}\\b\"\n    result = re.findall(pattern, text)\n    return result", "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    result = re.findall(pattern, text)\n    return result"], "evaluation": true}
{"problem_id": 8, "prompt": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))", "\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))", "\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))"], "evaluation": true}
{"problem_id": 9, "prompt": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    n = len(str)\n    for i in range(1, n):\n        if str[:i] == str[i:]*2:\n            return i\n    return n", "\ndef find_Rotations(str): \n    n = len(str)\n    for i in range(1, n):\n        if str[:i] == str[i:2*n:i]:\n            return i\n    return n", "\ndef find_Rotations(str): \n    n = len(str)\n    for i in range(1, n):\n        if str[:i] == str[-i:]:\n            return i\n    return n"], "evaluation": false}
{"problem_id": 10, "prompt": "import heapq\ndef small_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n    list1.sort()\n    return list1[:n]", "import heapq\n\ndef small_nnum(list1,n):\n    list1.sort()\n    return list1[:n]", "import heapq\n\ndef small_nnum(list1,n):\n    list1.sort()\n    return list1[:n]"], "evaluation": true}
{"problem_id": 11, "prompt": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    s = list(s)\n    i = s.index(ch)\n    del s[i]\n    if i!= 0:\n        del s[i-1]\n    if i!= len(s)-1:\n        del s[i]\n    return \"\".join(s)", "\ndef remove_Occ(s,ch): \n    s = list(s)\n    i = s.index(ch)\n    del s[i]\n    if i!= 0:\n        del s[i-1]\n    if i!= len(s)-1:\n        del s[i]\n    return \"\".join(s)", "\ndef remove_Occ(s,ch): \n    s = list(s)\n    i = s.index(ch)\n    del s[i]\n    if i > 0:\n        del s[i-1]\n    if i < len(s)-1:\n        del s[i]\n    return \"\".join(s)"], "evaluation": false}
{"problem_id": 12, "prompt": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    sorted_matrix = [[M[i][j] for j in range(len(M[i]))] for i in sorted_indices]\n    return sorted_matrix", "\ndef sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    sorted_matrix = [[M[i][j] for j in range(len(M[i]))] for i in sorted_indices]\n    return sorted_matrix", "\ndef sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    sorted_matrix = [[M[i][j] for j in range(len(M[i]))] for i in sorted_indices]\n    return sorted_matrix"], "evaluation": true}
{"problem_id": 13, "prompt": "from collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n    counter = Counter(words)\n    return counter.most_common()", "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    return word_counts.most_common()", "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    return word_counts.most_common()"], "evaluation": false}
{"problem_id": 14, "prompt": "def find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    volume = (l*b*h)/3\n    return volume", "\ndef find_Volume(l,b,h) : \n    volume = (l * b * h) / 3\n    return volume", "\ndef find_Volume(l,b,h) : \n    volume = (l * b * h) / 3\n    return volume"], "evaluation": false}
{"problem_id": 15, "prompt": "import re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n    return re.split('([a-z]+)', text)", "import re\n\ndef split_lowerstring(text):\n    return re.split('([a-z]+)', text)", "import re\n\ndef split_lowerstring(text):\n    return re.split('([a-z]+)', text)"], "evaluation": false}
{"problem_id": 16, "prompt": "import re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r\"[a-z]+_\")\n    matches = pattern.findall(text)\n    return [match.lower() for match in matches]", "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r\"[a-z]+_\")\n    matches = pattern.findall(text)\n    return [match.lower() for match in matches]", "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r\"[a-z]+_\")\n    matches = pattern.findall(text)\n    return [match.lower() for match in matches]"], "evaluation": false}
{"problem_id": 17, "prompt": "def square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    return 4 * a", "\ndef square_perimeter(a):\n    perimeter = 4 * a\n    return perimeter", "\ndef square_perimeter(a):\n    return 4 * a"], "evaluation": true}
{"problem_id": 18, "prompt": "NO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n    dirty_chars = set(second_string)\n    clean_string = ''\n    for char in string:\n        if char not in dirty_chars:\n            clean_string += char\n    return clean_string", "\ndef remove_dirty_chars(string, second_string): \n    dirty_chars = set(second_string)\n    clean_string = ''\n    for char in string:\n        if char not in dirty_chars:\n            clean_string += char\n    return clean_string", "\ndef remove_dirty_chars(string, second_string): \n    clean_string = \"\"\n    for char in string:\n        if ord(char) not in second_string:\n            clean_string += char\n    return clean_string"], "evaluation": true}
{"problem_id": 19, "prompt": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"], "evaluation": true}
{"problem_id": 20, "prompt": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return is_woodall(x-1) or is_woodall(x-2) or is_woodall(x-3) or is_woodall(x-4) or is_woodall(x-5)", "\ndef is_woodall(x): \n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return is_woodall(x - 1) or is_woodall(x - 2) or is_woodall(x - 3) or is_woodall(x - 4) or is_woodall(x - 5)", "\ndef is_woodall(x): \n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return is_woodall(x-1) or is_woodall(x-2) or is_woodall(x-3) or is_woodall(x-4) or is_woodall(x-5)"], "evaluation": false}
{"problem_id": 21, "prompt": "def multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    multiples = []\n    for i in range(m):\n        multiples.append(n*i)\n    return multiples", "\ndef multiples_of_num(m,n): \n    multiples = []\n    for i in range(m):\n        multiples.append(n * (i+1))\n    return multiples", "\ndef multiples_of_num(m,n): \n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(n*i)\n    return multiples"], "evaluation": false}
{"problem_id": 22, "prompt": "def find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return -1", "\ndef find_first_duplicate(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return -1", "\ndef find_first_duplicate(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return -1"], "evaluation": true}
{"problem_id": 23, "prompt": "def maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    max_sum = 0\n    for sublist in list1:\n        max_sum = max(max_sum, sum(sublist))\n    return max_sum", "\ndef maximum_Sum(list1): \n    max_sum = 0\n    for sublist in list1:\n        max_sum = max(max_sum, sum(sublist))\n    return max_sum", "\ndef maximum_Sum(list1): \n    max_sum = 0\n    for sublist in list1:\n        max_sum = max(max_sum, sum(sublist))\n    return max_sum"], "evaluation": true}
{"problem_id": 24, "prompt": "def binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    decimal = 0\n    power = len(binary) - 1\n    for digit in binary:\n        decimal += int(digit) * (2 ** power)\n        power -= 1\n    return decimal", "\ndef binary_to_decimal(binary): \n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal", "\ndef binary_to_decimal(binary): \n    decimal = 0\n    power = len(binary) - 1\n    for digit in binary:\n        decimal += int(digit) * (2 ** power)\n        power -= 1\n    return decimal"], "evaluation": false}
{"problem_id": 25, "prompt": "def find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    result = 1\n    for i in range(n):\n        is_repeated = False\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                is_repeated = True\n                break\n        if not is_repeated:\n            result *= arr[i]\n    return result", "\ndef find_Product(arr,n): \n    result = 1\n    for i in range(n):\n        is_repeated = False\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                is_repeated = True\n                break\n        if not is_repeated:\n            result *= arr[i]\n    return result", "\ndef find_Product(arr,n): \n    result = 1\n    for i in range(n):\n        is_repeated = False\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                is_repeated = True\n                break\n        if not is_repeated:\n            result *= arr[i]\n    return result"], "evaluation": true}
{"problem_id": 26, "prompt": "def check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    if len(test_list) < K:\n        return False\n    else:\n        return set(test_list[:K]) == set(test_list[1:])", "\ndef check_k_elements(test_list, K):\n    if len(test_list) < K:\n        return False\n    else:\n        return set(test_list) == set(K * [test_list[0]])", "\ndef check_k_elements(test_list, K):\n    if len(test_list) < K:\n        return False\n    else:\n        return set(test_list[:K]) == set(test_list[1:])"], "evaluation": false}
{"problem_id": 27, "prompt": "import re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    new_list = []\n    for item in list:\n        new_item = re.sub(r'\\d', '', item)\n        new_list.append(new_item)\n    return new_list", "import re  \n\ndef remove(list): \n    new_list = []\n    for item in list:\n        new_item = re.sub(r'\\d', '', item)\n        new_list.append(new_item)\n    return new_list", "import re  \n\ndef remove(list): \n    new_list = []\n    for item in list:\n        new_item = re.sub(r'\\d', '', item)\n        new_list.append(new_item)\n    return new_list"], "evaluation": true}
{"problem_id": 28, "prompt": "def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    if(k==0 or k==n):\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)", "\ndef binomial_Coeff(n,k): \n    if(k==0 or k==n):\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)", "\ndef binomial_Coeff(n,k): \n    if (k==0 or k==n):\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"], "evaluation": true}
{"problem_id": 29, "prompt": "def get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result", "\ndef get_Odd_Occurrence(arr,arr_size):   \n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result", "\ndef get_Odd_Occurrence(arr,arr_size):   \n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result"], "evaluation": true}
{"problem_id": 30, "prompt": "def count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1] and s[i:j] == s[i:j][::-1]:\n                count += 1\n    return count", "\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1] and s[i:j] == s[i:j][::-1]:\n                count += 1\n    return count", "\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 31, "prompt": "def func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    import heapq\n\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    max_heap = []\n    for num, count in counts.items():\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, (-count, num))\n        elif count > -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-count, num))\n\n    return [heapq.heappop(max_heap)[1] for _ in range(k)]", "\ndef func(nums, k):\n    import heapq\n\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    max_heap = []\n    for num, count in counts.items():\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, (-count, num))\n        else:\n            if count > -max_heap[0][0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, (-count, num))\n\n    return [heapq.heappop(max_heap)[1] for _ in range(k)]", "\ndef func(nums, k):\n    import heapq\n\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    max_heap = []\n    for num, count in counts.items():\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, (-count, num))\n        else:\n            if count > -max_heap[0][0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, (-count, num))\n\n    return [heapq.heappop(max_heap)[1] for _ in range(k)]"], "evaluation": false}
{"problem_id": 32, "prompt": "import math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n    i = 2\n    while i * i <= n: \n        if n % i: \n            i += 1\n        else: \n            n //= i \n            while n % i == 0: \n                n //= i \n    if n > 1: \n        return n \n    else: \n        return i-1", "import math \n\ndef max_Prime_Factors (n): \n    i = 2\n    while i * i <= n: \n        if n % i: \n            i += 1\n        else: \n            n //= i \n            while n % i == 0: \n                n //= i \n            i = 2\n    if n > 1: \n        return n \n    else: \n        return i", "import math \n\ndef max_Prime_Factors (n): \n    i = 2\n    while i * i <= n: \n        if n % i: \n            i += 1\n        else: \n            n //= i \n            while n % i == 0: \n                n //= i \n            i = 2\n    if n > 1: \n        return n \n    else: \n        return i"], "evaluation": true}
{"problem_id": 33, "prompt": "def decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N > 1:\n        decimal_To_Binary(N//2)\n    print(N % 2, end='')", "\ndef decimal_To_Binary(N): \n    if N > 1:\n        decimal_To_Binary(N//2)\n    print(N % 2, end='')", "\ndef decimal_To_Binary(N): \n    if N == 0:\n        return 0\n    else:\n        return (N % 2 + 10 * decimal_To_Binary(int(N // 2)))"], "evaluation": false}
{"problem_id": 34, "prompt": "def find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    \n    # Calculate the sum of all numbers from 1 to N\n    total_sum = (N*(N+1))//2\n    \n    # Calculate the sum of all numbers in the array\n    arr_sum = sum(ar)\n    \n    # Find the missing number\n    missing_num = total_sum - arr_sum\n    \n    return missing_num", "\ndef find_missing(ar,N): \n    \n    # Calculate the sum of all numbers from 1 to N\n    total_sum = (N*(N+1))//2\n    \n    # Calculate the sum of all numbers present in the array\n    arr_sum = sum(ar)\n    \n    # Find the missing number\n    missing_num = total_sum - arr_sum\n    \n    return missing_num", "\ndef find_missing(ar,N): \n    \n    # Calculate the sum of all numbers from 1 to N\n    total_sum = (N*(N+1))//2\n    \n    # Calculate the sum of all numbers in the array\n    arr_sum = sum(ar)\n    \n    # Find the missing number\n    missing_num = total_sum - arr_sum\n    \n    return missing_num"], "evaluation": false}
{"problem_id": 35, "prompt": "def find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        for j in range(1, i):\n            if i % j == 0:\n                count += 1\n                if count == n:\n                    return i\n    return -1", "\ndef find_rect_num(n):\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        for j in range(1, i):\n            if i % j == 0:\n                count += 1\n                if count == n:\n                    return i\n    return -1", "\ndef find_rect_num(n):\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        for j in range(1, i):\n            if i % j == 0:\n                count += 1\n                if count == n:\n                    return i\n    return -1"], "evaluation": false}
{"problem_id": 36, "prompt": "def find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n    # Calculate the proper fraction\n    fraction = (p / q)\n    \n    # Convert the fraction to a string\n    fraction_str = str(fraction)\n    \n    # Find the position of the decimal point\n    decimal_pos = fraction_str.index('.')\n    \n    # Extract the digits after the decimal point\n    digits_after_decimal = fraction_str[decimal_pos + 1:]\n    \n    # Check if there are enough digits after the decimal point\n    if len(digits_after_decimal) >= N:\n        # Return the Nth digit from the right\n        return int(digits_after_decimal[-N])\n    else:\n        # Return -1 if there are not enough digits after the decimal point\n        return -1", "\ndef find_Nth_Digit(p,q,N) :  \n    # Calculate the proper fraction\n    fraction = (p / q)\n    \n    # Convert the fraction to a string\n    fraction_str = str(fraction)\n    \n    # Find the position of the decimal point\n    decimal_pos = fraction_str.index('.')\n    \n    # Extract the digits after the decimal point\n    digits_after_decimal = fraction_str[decimal_pos + 1:]\n    \n    # Check if there are enough digits after the decimal point\n    if len(digits_after_decimal) >= N:\n        # Return the Nth digit from the right\n        return int(digits_after_decimal[-N])\n    else:\n        # If there are not enough digits, return -1\n        return -1", "\ndef find_Nth_Digit(p,q,N) :  \n    # Calculate the proper fraction\n    fraction = (p / q)\n    \n    # Convert the fraction to a string\n    fraction_str = str(fraction)\n    \n    # Find the position of the decimal point\n    decimal_pos = fraction_str.index('.')\n    \n    # Extract the digits after the decimal point\n    digits_after_decimal = fraction_str[decimal_pos + 1:]\n    \n    # Check if there are enough digits after the decimal point\n    if len(digits_after_decimal) >= N:\n        # Return the Nth digit from the right\n        return int(digits_after_decimal[-N])\n    else:\n        return \"Not enough digits after the decimal point\""], "evaluation": true}
{"problem_id": 37, "prompt": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: str(x))", "\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (isinstance(x, str), x))", "\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (isinstance(x, int), x))"], "evaluation": true}
{"problem_id": 38, "prompt": "def div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    even_list = [i for i in list1 if i % 2 == 0]\n    odd_list = [i for i in list1 if i % 2!= 0]\n\n    if len(even_list) == 0:\n        return \"No even numbers in the list\"\n    elif len(odd_list) == 0:\n        return \"No odd numbers in the list\"\n    else:\n        return float(sum(even_list)) / len(even_list), float(sum(odd_list)) / len(odd_list)", "\ndef div_even_odd(list1):\n    even_list = [i for i in list1 if i % 2 == 0]\n    odd_list = [i for i in list1 if i % 2!= 0]\n\n    if len(even_list) == 0:\n        return \"No even numbers in the list\"\n    elif len(odd_list) == 0:\n        return \"No odd numbers in the list\"\n    else:\n        return float(sum(even_list)) / len(even_list), float(sum(odd_list)) / len(odd_list)", "\ndef div_even_odd(list1):\n    even_list = [i for i in list1 if i % 2 == 0]\n    odd_list = [i for i in list1 if i % 2!= 0]\n\n    if len(even_list) == 0:\n        return \"No even numbers in the list\"\n    elif len(odd_list) == 0:\n        return \"No odd numbers in the list\"\n    else:\n        return float(sum(even_list)) / len(even_list), float(sum(odd_list)) / len(odd_list)"], "evaluation": false}
{"problem_id": 39, "prompt": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    odd_letters = [k for k, v in counter.items() if v % 2!= 0]\n    return len(odd_letters) <= 1", "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    odd_count_letters = [k for k, v in counter.items() if v % 2!= 0]\n    return len(odd_count_letters) <= 1", "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    odd_count_letters = [k for k, v in counter.items() if v % 2!= 0]\n    return len(odd_count_letters) <= 1"], "evaluation": false}
{"problem_id": 40, "prompt": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain.from_iterable(nums))\n    freq_dict = dict(Counter(flat_list))\n    return freq_dict", "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain(*nums))\n    freq_dict = dict(Counter(flat_list))\n    return freq_dict", "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain(*nums))\n    freq_dict = dict(Counter(flat_list))\n    return freq_dict"], "evaluation": true}
{"problem_id": 41, "prompt": "def filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "def find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                sum += arr[i]\n    return sum", "\ndef find_Sum(arr,n): \n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                sum += arr[i]\n    return sum", "\ndef find_Sum(arr,n): \n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                sum += arr[i]\n    return sum"], "evaluation": false}
{"problem_id": 43, "prompt": "import re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n    pattern = re.compile(r'\\b[a-z]+\\b_?\\b[a-z]+\\b')\n    matches = pattern.findall(text)\n    return matches", "import re\n\ndef text_match(text):\n    pattern = re.compile(r'\\b[a-z]+\\b_?\\b[a-z]+\\b')\n    matches = pattern.findall(text)\n    return matches", "import re\n\ndef text_match(text):\n    pattern = re.compile(r'\\b[a-z]+\\b_?\\b[a-z]+\\b')\n    matches = pattern.findall(text)\n    return matches"], "evaluation": false}
{"problem_id": 44, "prompt": "import re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n    pattern = re.compile(r'\\b\\w+')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None", "import re\n\ndef text_match_string(text):\n    pattern = re.compile(r'\\b\\w+')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None", "import re\n\ndef text_match_string(text):\n    pattern = re.compile(r'\\b\\w+')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"], "evaluation": false}
{"problem_id": 45, "prompt": "def get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    gcd = l[0]\n    for i in range(1, len(l)):\n        gcd = gcd_util(gcd, l[i])\n    return gcd", "\ndef get_gcd(l):\n    gcd = l[0]\n    for i in range(1, len(l)):\n        gcd = gcd_util(gcd, l[i])\n    return gcd", "\ndef get_gcd(l):\n    gcd = l[0]\n    for i in range(1, len(l)):\n        gcd = math.gcd(gcd, l[i])\n    return gcd"], "evaluation": false}
{"problem_id": 46, "prompt": "def test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    return len(data) == len(set(data))", "\ndef test_distinct(data):\n    return len(data) == len(set(data))", "\ndef test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 47, "prompt": "def compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    A_factorial = factorial(A)\n    B_factorial = factorial(B)\n    \n    last_digit = A_factorial % 10\n    while B_factorial > 0:\n        last_digit = (last_digit * 10) % 10\n        B_factorial = B_factorial // 10\n    \n    return last_digit", "\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    A_factorial = factorial(A)\n    B_factorial = factorial(B)\n    \n    last_digit = A_factorial % 10\n    while B_factorial > 0:\n        last_digit = (last_digit * 10) % 10\n        B_factorial = B_factorial // 10\n    \n    return last_digit", "\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    A_factorial = factorial(A)\n    B_factorial = factorial(B)\n    \n    last_digit = A_factorial % 10\n    while B_factorial > 0:\n        last_digit = (last_digit * 10) % 10\n        B_factorial = B_factorial // 10\n    \n    return last_digit"], "evaluation": false}
{"problem_id": 48, "prompt": "def odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    result = 0\n    for i in range(31, -1, -1):\n        if (n >> i) & 1:\n            result |= (1 << i)\n    return result", "\ndef odd_bit_set_number(n):\n    result = 0\n    while n:\n        result |= (1 << (n % 2))\n        n >>= 1\n    return result", "\ndef odd_bit_set_number(n):\n    result = 0\n    while n:\n        result |= (1 << (n % 2))\n        n >>= 1\n    return result"], "evaluation": false}
{"problem_id": 49, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    return [nums[i][N] for i in range(len(nums))]", "\ndef specified_element(nums, N):\n    return [nums[i][N] for i in range(len(nums))]", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N])\n    return result"], "evaluation": true}
{"problem_id": 50, "prompt": "def min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_length_list = [x for x in input_list if len(x) == min_length]\n    return min_length_list", "\ndef min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_length_list = [x for x in input_list if len(x) == min_length]\n    return min_length_list", "\ndef min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_length_list = [x for x in input_list if len(x) == min_length]\n    return min_length_list"], "evaluation": false}
{"problem_id": 51, "prompt": "def check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")", "\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")", "\ndef check_equilateral(x,y,z):\n    if x==y==z:\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")"], "evaluation": false}
{"problem_id": 52, "prompt": "def parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    return b*h", "\ndef parallelogram_area(b,h):\n    return b*h", "\ndef parallelogram_area(b,h):\n    return b*h"], "evaluation": true}
{"problem_id": 53, "prompt": "def check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if len(str) > 0:\n        if str[0] == str[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False", "\ndef check_Equality(str):\n    if len(str) > 0:\n        if str[0] == str[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False", "\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 54, "prompt": "def counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    # Find the maximum value in the list\n    max_val = max(my_list)\n    \n    # Create a count array to store the count of each element\n    count_arr = [0] * (max_val + 1)\n    \n    # Count the occurrence of each element in the list\n    for num in my_list:\n        count_arr[num] += 1\n    \n    # Generate the sorted list by iterating through the count array\n    sorted_list = []\n    for i in range(len(count_arr)):\n        for j in range(count_arr[i]):\n            sorted_list.append(i)\n    \n    return sorted_list", "\ndef counting_sort(my_list):\n    # Find the maximum value in the list\n    max_val = max(my_list)\n    \n    # Create a count array to store the count of each element\n    count_arr = [0] * (max_val + 1)\n    \n    # Count the occurrence of each element in the list\n    for num in my_list:\n        count_arr[num] += 1\n    \n    # Generate the sorted list by iterating through the count array\n    sorted_list = []\n    for i in range(len(count_arr)):\n        if count_arr[i] > 0:\n            sorted_list.extend([i] * count_arr[i])\n    \n    return sorted_list", "\ndef counting_sort(my_list):\n    # Find the maximum value in the list\n    max_val = max(my_list)\n    \n    # Create a count array to store the count of each element\n    count_arr = [0] * (max_val + 1)\n    \n    # Count the occurrence of each element in the list\n    for num in my_list:\n        count_arr[num] += 1\n    \n    # Generate the sorted list by iterating through the count array\n    sorted_list = []\n    for i in range(len(count_arr)):\n        sorted_list.extend([i] * count_arr[i])\n    \n    return sorted_list"], "evaluation": true}
{"problem_id": 55, "prompt": "import math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n    if n==1:\n        return a\n    else:\n        return a*(1-r**(n-1))/ (1-r)", "import math\n\ndef tn_gp(a,n,r):\n    p = a * (1 - r**n) / (1 - r)\n    return round(p, 15)", "import math\n\ndef tn_gp(a,n,r):\n    p = a * (1 - r**n) / (1 - r)\n    return round(p, 5)"], "evaluation": false}
{"problem_id": 56, "prompt": "def check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    # convert the number to a string\n    num_str = str(n)\n    \n    # reverse the string\n    rev_str = num_str[::-1]\n    \n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    \n    # check if the number is one less than twice its reverse\n    if n == (2 * rev_num) - 1:\n        return True\n    else:\n        return False", "\ndef check(n):    \n    # convert the number to a string\n    num_str = str(n)\n    \n    # reverse the string\n    rev_str = num_str[::-1]\n    \n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    \n    # check if the number is one less than twice its reverse\n    if n == (2 * rev_num) - 1:\n        return True\n    else:\n        return False", "\ndef check(n):    \n    # convert the number to a string\n    num_str = str(n)\n    \n    # reverse the string\n    rev_str = num_str[::-1]\n    \n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    \n    # check if the number is one less than twice its reverse\n    if n == (2 * rev_num) - 1:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 57, "prompt": "def find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    arr.sort()\n    max_num = int(''.join(map(str,arr)))\n    return max_num", "\ndef find_Max_Num(arr,n) : \n    arr.sort() \n    max_num = int(''.join(map(str,arr))) \n    return max_num", "\ndef find_Max_Num(arr,n) : \n    arr.sort()\n    max_num = int(''.join(map(str,arr)))\n    return max_num"], "evaluation": false}
{"problem_id": 58, "prompt": "def opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False", "\ndef opposite_Signs(x,y): \n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False", "\ndef opposite_Signs(x,y): \n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 59, "prompt": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    if n < 1:\n        return False\n    return (8 * n - 1) ** 0.5 % 1 == 0", "\ndef is_octagonal(n): \n    if n <= 0:\n        return False\n    else:\n        return (8 * n - 1) ** 0.5 % 1 == 0", "\ndef is_octagonal(n): \n    if n < 1:\n        return False\n    else:\n        return (8 * n - 1) ** 0.5 % 1 == 0"], "evaluation": false}
{"problem_id": 60, "prompt": "def max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    max_len = 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > 1:\n            max_len += 1\n        elif arr[i] - arr[i-1] == 1:\n            max_len += 1\n        else:\n            break\n    return max_len", "\ndef max_len_sub( arr, n): \n    max_len = 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > 1:\n            max_len += 1\n        elif arr[i] - arr[i-1] == 1:\n            max_len += 1\n        else:\n            break\n    return max_len", "\ndef max_len_sub( arr, n): \n    max_len = 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > 1:\n            max_len += 1\n        elif arr[i] - arr[i-1] == 1:\n            max_len += 1\n        else:\n            break\n    return max_len"], "evaluation": false}
{"problem_id": 61, "prompt": "from collections import defaultdict\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_digits = sum(int(digit) for digit in substring if digit.isdigit())\n            if sum_digits == len(substring):\n                count += 1\n    return count", "from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_digits = sum(int(digit) for digit in substring if digit.isdigit())\n            if sum_digits == len(substring):\n                count += 1\n    return count", "from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_digits = sum(int(digit) for digit in substring if digit.isdigit())\n            if sum_digits == len(substring):\n                count+=1\n    return count"], "evaluation": true}
{"problem_id": 62, "prompt": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num", "\ndef smallest_num(xs):\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num", "\ndef smallest_num(xs):\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num"], "evaluation": true}
{"problem_id": 63, "prompt": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"], "evaluation": false}
{"problem_id": 64, "prompt": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return sorted_marks", "\ndef subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return sorted_marks", "\ndef subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return sorted_marks"], "evaluation": false}
{"problem_id": 65, "prompt": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])", "\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])", "\ndef recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"], "evaluation": false}
{"problem_id": 66, "prompt": "def pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count", "\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count", "\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    if n == 0:\n        return 1\n    else:\n        return n * bell_number(n-1) + bell_number(n-2)", "\ndef bell_number(n):   \n    if n == 0:\n        return 1\n    else:\n        return n * bell_number(n-1) + bell_number(n-2)", "\ndef bell_number(n):   \n    if n == 0:\n        return 1\n    else:\n        return n * bell_number(n-1) + bell_number(n-2)"], "evaluation": false}
{"problem_id": 68, "prompt": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    increasing = decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            decreasing = False\n        elif A[i] < A[i + 1]:\n            increasing = False\n\n    return increasing or decreasing", "\ndef is_Monotonic(A): \n    increasing = decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            decreasing = False\n        elif A[i] < A[i + 1]:\n            increasing = False\n\n    return increasing or decreasing", "\ndef is_Monotonic(A): \n    increasing = decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            decreasing = False\n        elif A[i] < A[i + 1]:\n            increasing = False\n\n    return increasing or decreasing"], "evaluation": true}
{"problem_id": 69, "prompt": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False", "\ndef is_sublist(l, s):\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "\ndef is_sublist(l, s):\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 70, "prompt": "def get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    for tup in Input:\n        if len(tup)!= k:\n            return False\n    return True", "\ndef get_equal(Input, k):\n    for tup in Input:\n        if len(tup)!= k:\n            return False\n    return True", "\ndef get_equal(Input, k):\n    for t in Input:\n        if len(t)!= k:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 71, "prompt": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped is True:\n        gap = max(1, int(gap/1.3))\n        swapped = False\n        for i in range(len(nums)-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums", "\ndef comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped is True:\n        gap = max(1, int(gap/1.3))\n        swapped = False\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums", "\ndef comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped is True:\n        gap = max(1, int(gap/1.3))\n        swapped = False\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums"], "evaluation": true}
{"problem_id": 72, "prompt": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i + j*j == n):\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef dif_Square(n): \n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i + j*j) == n:\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef dif_Square(n): \n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i + j*j) == n:\n                return True\n            j += 1\n        i += 1\n    return False"], "evaluation": false}
{"problem_id": 73, "prompt": "import re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n    return re.split('|'.join(text.split()), text)", "import re\n\ndef multiple_split(text):\n    return re.split('|'.join(text.split()), text)", "import re\n\ndef multiple_split(text):\n    regex = re.compile('|'.join(text.split()))\n    return regex.split(text)"], "evaluation": false}
{"problem_id": 74, "prompt": "def is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i] and colors[i]!= patterns[i-1]:\n            return False\n    return True", "\ndef is_samepatterns(colors, patterns):    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True", "\ndef is_samepatterns(colors, patterns):    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 75, "prompt": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        flag = True\n        for elem in tup:\n            if elem % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result", "\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        flag = True\n        for elem in tup:\n            if elem % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result", "\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        flag = True\n        for elem in tup:\n            if elem % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result"], "evaluation": false}
{"problem_id": 76, "prompt": "def count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i+1)**2 + (j+1)**2 <= m*n:\n                count += 1\n    return count", "\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i+1)**2 + (j+1)**2 <= m*n:\n                count += 1\n    return count", "\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i+1)**2 + (j+1)**2 <= m*n:\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 77, "prompt": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    sum_even = 0\n    sum_odd = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            sum_even += int(digit)\n        else:\n            sum_odd += int(digit)\n    return abs(sum_even - sum_odd)", "\ndef is_Diff(n): \n    sum_even = 0\n    sum_odd = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            sum_even += int(digit)\n        else:\n            sum_odd += int(digit)\n    return abs(sum_even - sum_odd)", "\ndef is_Diff(n): \n    sum_even = 0\n    sum_odd = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            sum_even += int(digit)\n        else:\n            sum_odd += int(digit)\n    return abs(sum_even - sum_odd)"], "evaluation": false}
{"problem_id": 78, "prompt": "def count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count", "\ndef count_With_Odd_SetBits(n): \n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count", "\ndef count_With_Odd_SetBits(n): \n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"], "evaluation": false}
{"problem_id": 79, "prompt": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    return len(s) % 2 == 1", "\ndef word_len(s): \n    return len(s) % 2!= 0", "\ndef word_len(s): \n    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""], "evaluation": true}
{"problem_id": 80, "prompt": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return 0\n    else:\n        return n * (n - 1) * (n - 2) * (n - 3) // 24 + tetrahedral_number(n - 1)", "\ndef tetrahedral_number(n): \n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    else:\n        return n * (n - 1) * (n - 2) * (n - 3) // 24 + tetrahedral_number(n - 1)", "\ndef tetrahedral_number(n): \n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0:\n        return 0\n    else:\n        return n * (n - 1) * (n - 2) * (n - 3) // 24 + tetrahedral_number(n - 1)"], "evaluation": false}
{"problem_id": 81, "prompt": "def zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    return zip(test_tup1, test_tup2)", "\ndef zip_tuples(test_tup1, test_tup2):\n    zipped_tup = zip(test_tup1, test_tup2)\n    return zipped_tup", "\ndef zip_tuples(test_tup1, test_tup2):\n    return zip(test_tup1, test_tup2)"], "evaluation": false}
{"problem_id": 82, "prompt": "import math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r**3)", "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3", "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r**3)"], "evaluation": true}
{"problem_id": 83, "prompt": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    sum_char = 0\n    for char in strr:\n        sum_char += ord(char)\n    return chr(sum_char)", "\ndef get_Char(strr):  \n    sum_char = 0\n    for char in strr:\n        sum_char += ord(char)\n    return chr(sum_char)", "\ndef get_Char(strr):  \n    sum_char = 0\n    for char in strr:\n        sum_char += ord(char)\n    return chr(sum_char)"], "evaluation": false}
{"problem_id": 84, "prompt": "def sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "\ndef sequence(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "\ndef sequence(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"], "evaluation": false}
{"problem_id": 85, "prompt": "import math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2", "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)", "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)"], "evaluation": true}
{"problem_id": 86, "prompt": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)", "\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)", "\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1) // 2"], "evaluation": false}
{"problem_id": 87, "prompt": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"], "evaluation": false}
{"problem_id": 88, "prompt": "import collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return freq", "import collections\n\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return dict(freq)", "import collections\n\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return dict(freq)"], "evaluation": true}
{"problem_id": 89, "prompt": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    if N <= 0:\n        return None\n    elif N <= 1:\n        return 0\n    elif N <= 3:\n        return 2\n    else:\n        return N - (N % 2)", "\ndef closest_num(N):\n    if N <= 0:\n        return None\n    elif N <= 1:\n        return 0\n    elif N <= 3:\n        return 2\n    else:\n        return N - (N % 2)", "\ndef closest_num(N):\n    if N <= 0:\n        return None\n    elif N <= 1:\n        return 0\n    elif N <= 3:\n        return 2\n    else:\n        return N - (N % 2) if N % 2!= 0 else N - 1"], "evaluation": false}
{"problem_id": 90, "prompt": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)", "\ndef len_log(list1):\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)", "\ndef len_log(list1):\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"], "evaluation": true}
{"problem_id": 91, "prompt": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False", "\ndef find_substring(str1, sub_str):\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False", "\ndef find_substring(str1, sub_str):\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"], "evaluation": false}
{"problem_id": 92, "prompt": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    # Check if the number is negative\n    if n < 0:\n        return False\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return True\n\n    # Check if the number is divisible by 5\n    if n % 5 == 0:\n        return True\n\n    # Check if the number is divisible by both 3 and 5\n    if n % 3 == 0 and n % 5 == 0:\n        return True\n\n    # If none of the above conditions are met, the number is not undulating\n    return False", "\ndef is_undulating(n): \n    # Check if the number is negative\n    if n < 0:\n        return False\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return True\n\n    # Check if the number is divisible by 5\n    if n % 5 == 0:\n        return True\n\n    # Check if the number is divisible by both 3 and 5\n    if n % 3 == 0 and n % 5 == 0:\n        return True\n\n    return False", "\ndef is_undulating(n): \n    # Check if the number is negative\n    if n < 0:\n        return False\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return True\n\n    # Check if the number is divisible by 5\n    if n % 5 == 0:\n        return True\n\n    # Check if the number is divisible by both 3 and 5\n    if n % 3 == 0 and n % 5 == 0:\n        return True\n\n    # If none of the above conditions are met, the number is not undulating\n    return False"], "evaluation": false}
{"problem_id": 93, "prompt": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a*a, b//2)\n    else:\n        return a * power(a*a, (b-1)//2)", "\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a*a, b//2)\n    else:\n        return a * power(a*a, (b-1)//2)", "\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a*a, b//2)\n    else:\n        return a * power(a*a, (b-1)//2)"], "evaluation": true}
{"problem_id": 94, "prompt": "from operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]", "from operator import itemgetter \n\ndef index_minimum(test_list):\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]", "from operator import itemgetter \n\ndef index_minimum(test_list):\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]"], "evaluation": false}
{"problem_id": 95, "prompt": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    min_length = float('inf')\n    for sublist in ls:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length", "\ndef Find_Min_Length(lst):  \n    min_length = float('inf')\n    for sublist in ls:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length", "\ndef Find_Min_Length(lst):  \n    min_length = float('inf')\n    for sublist in ls:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"], "evaluation": false}
{"problem_id": 96, "prompt": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i!= n // i:\n                count += 1\n    return count", "\ndef divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i!= n // i:\n                count += 1\n    return count", "\ndef divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i!= n // i:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 97, "prompt": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict", "\ndef frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict", "\ndef frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"], "evaluation": false}
{"problem_id": 98, "prompt": "def multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)", "\ndef multiply_num(numbers):  \n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)", "\ndef multiply_num(numbers):  \n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"], "evaluation": true}
{"problem_id": 99, "prompt": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary", "\ndef decimal_to_binary(n): \n    if n == 0:\n        return '0'\n    \n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    \n    return binary", "\ndef decimal_to_binary(n): \n    if n == 0:\n        return '0'\n    \n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    \n    return binary"], "evaluation": true}
{"problem_id": 100, "prompt": "import sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num + 1\n    \n    # Find the middle index of the number\n    mid_index = len(num_str) // 2\n    \n    # Check if the left half of the number is a palindrome\n    left_half = num_str[:mid_index]\n    if left_half == left_half[::-1]:\n        # Check if the right half of the number is a palindrome\n        right_half = num_str[mid_index:]\n        if right_half == right_half[::-1]:\n            # Find the next smallest palindrome by incrementing the middle digit\n            for i in range(1, 10):\n                new_palindrome = int(left_half + str(i) + right_half[::-1])\n                if new_palindrome > num:\n                    return new_palindrome\n    else:\n        # Check if the right half of the number is a palindrome\n        right_half = num_str[mid_index + 1:]\n        if right_half == right_half[::-1]:\n            # Find the next smallest palindrome by incrementing the middle digit\n            for i in range(1, 10):\n                new_palindrome = int(left_half[::-1] + str(i) + right_half)\n                if new_palindrome > num:\n                    return new_palindrome\n    \n    # If no palindrome is found, return the next number\n    return int(num_str) + 1", "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num + 1\n    \n    # Find the middle index of the number\n    mid_index = len(num_str) // 2\n    \n    # Check if the left half of the number is a palindrome\n    left_half = num_str[:mid_index]\n    if left_half == left_half[::-1]:\n        # Check if the right half of the number is a palindrome\n        right_half = num_str[mid_index:]\n        if right_half == right_half[::-1]:\n            # Find the next smallest palindrome by incrementing the middle digit\n            for i in range(1, 10):\n                new_palindrome = int(left_half + str(i) + right_half[::-1])\n                if new_palindrome > num:\n                    return new_palindrome\n    else:\n        # Check if the right half of the number is a palindrome\n        right_half = num_str[mid_index + 1:]\n        if right_half == right_half[::-1]:\n            # Find the next smallest palindrome by incrementing the middle digit\n            for i in range(1, 10):\n                new_palindrome = int(left_half[::-1] + str(i) + right_half)\n                if new_palindrome > num:\n                    return new_palindrome\n    \n    # If no palindrome is found, return the next number\n    return int(num_str) + 1", "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num + 1\n    \n    # Find the middle index of the number\n    mid_index = len(num_str) // 2\n    \n    # Check if the left half of the number is a palindrome\n    left_half = num_str[:mid_index]\n    if left_half == left_half[::-1]:\n        # Check if the right half of the number is a palindrome\n        right_half = num_str[mid_index:]\n        if right_half == right_half[::-1]:\n            # Find the next smallest palindrome by incrementing the middle digit\n            for i in range(1, 10):\n                new_palindrome = int(left_half + str(i) + right_half[::-1])\n                if new_palindrome > num:\n                    return new_palindrome\n    else:\n        # Check if the right half of the number is a palindrome\n        right_half = num_str[mid_index + 1:]\n        if right_half == right_half[::-1]:\n            # Find the next smallest palindrome by incrementing the middle digit\n            for i in range(1, 10):\n                new_palindrome = int(left_half[::-1] + str(i) + right_half)\n                if new_palindrome > num:\n                    return new_palindrome\n    \n    # If no palindrome is found, return the next number\n    return int(num_str) + 1"], "evaluation": false}
{"problem_id": 101, "prompt": "def kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    # Sort the array\n    arr.sort()\n\n    # Return the kth element\n    return arr[k-1]", "\ndef kth_element(arr, n, k):\n    # Sort the array\n    arr.sort()\n    \n    # Return the kth element\n    return arr[k-1]", "\ndef kth_element(arr, n, k):\n    # Sort the array\n    arr.sort()\n\n    # Return the kth element\n    return arr[k-1]"], "evaluation": false}
{"problem_id": 102, "prompt": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    words = word.split('_')\n    camel_word = words[0] + ''.join(x.title() for x in words[1:])\n    return camel_word", "\ndef snake_to_camel(word):\n    words = word.split('_')\n    return ''.join(x.capitalize() for x in words)", "\ndef snake_to_camel(word):\n    words = word.split('_')\n    camel_word = words[0] + ''.join(x.capitalize() for x in words[1:])\n    return camel_word"], "evaluation": false}
{"problem_id": 103, "prompt": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    if n == 0 and m == 0:\n        return 1\n    elif n < 0 or m < 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)", "\ndef eulerian_num(n, m): \n    if n == 0 and m == 0:\n        return 1\n    elif n < 0 or m < 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)", "\ndef eulerian_num(n, m): \n    if n == 0 and m == 0:\n        return 1\n    elif n < 0 or m < 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"], "evaluation": false}
{"problem_id": 104, "prompt": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda sublist: sorted(sublist))", "\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[0])", "\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[0])"], "evaluation": false}
{"problem_id": 105, "prompt": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count", "\ndef count(lst):   \n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count", "\ndef count(lst):   \n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 106, "prompt": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    result = []\n    for item in test_tup:\n        result.append(item + test_list)\n    return result", "\ndef add_lists(test_list, test_tup):\n    result = []\n    for i in test_tup:\n        result.append(test_list + [i])\n    return result", "\ndef add_lists(test_list, test_tup):\n    result = []\n    for item in test_tup:\n        result.append(item + test_list)\n    return result"], "evaluation": false}
{"problem_id": 107, "prompt": "def count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L,R+1):\n        if hex(i)[2:] in ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']:\n            count += 1\n    return count", "\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L,R+1):\n        if hex(i)[2:] in ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']:\n            count += 1\n    return count", "\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L,R+1):\n        if hex(i)[2:] in ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']:\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    for lst in [num1, num2, num3]:\n        for i in lst:\n            heapq.heappush(heap, i)\n    while heap:\n        yield heapq.heappop(heap)", "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    for lst in [num1, num2, num3]:\n        for num in lst:\n            heapq.heappush(heap, num)\n    while heap:\n        yield heapq.heappop(heap)", "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    for lst in [num1, num2, num3]:\n        for item in lst:\n            heapq.heappush(heap, item)\n    while heap:\n        yield heapq.heappop(heap)"], "evaluation": false}
{"problem_id": 109, "prompt": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1' and s[(i+n)%len(s)] == '1':\n            count += 1\n    return count", "\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1' and s[(i+n)%len(s)] == '1':\n            count += 1\n    return count", "\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1' and s[(i+n)%len(s)] == '1':\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 110, "prompt": "def extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    missing_ranges = []\n    for i in range(len(test_list)):\n        if test_list[i] < strt_val:\n            missing_ranges.append((None, strt_val))\n        elif test_list[i] > stop_val:\n            continue\n        else:\n            test_list[i] = None\n    for i in range(len(test_list) - 1, -1, -1):\n        if test_list[i] is None:\n            test_list[i] = stop_val - (len(test_list) - i)\n            missing_ranges.append((stop_val - (len(test_list) - i), test_list[i]))\n            break\n    return missing_ranges", "\ndef extract_missing(test_list, strt_val, stop_val):\n    missing_ranges = []\n    for i in range(len(test_list)):\n        if test_list[i] < strt_val:\n            missing_ranges.append((None, strt_val))\n        elif test_list[i] > stop_val:\n            continue\n        else:\n            test_list[i] = None\n    for i in range(len(test_list) - 1, -1, -1):\n        if test_list[i] is None:\n            test_list[i] = stop_val - (len(test_list) - i)\n            missing_ranges.append((stop_val - (len(test_list) - i), test_list[i]))\n            break\n    return missing_ranges", "\ndef extract_missing(test_list, strt_val, stop_val):\n    missing_ranges = []\n    for i in range(len(test_list)):\n        if test_list[i] < strt_val:\n            missing_ranges.append((None, strt_val))\n        elif test_list[i] > stop_val:\n            continue\n        else:\n            test_list[i] = None\n    for i in range(len(test_list) - 1, -1, -1):\n        if test_list[i] is None:\n            test_list[i] = stop_val - (len(test_list) - i)\n            missing_ranges.append((stop_val - (len(test_list) - i), test_list[i]))\n            break\n    return missing_ranges"], "evaluation": false}
{"problem_id": 111, "prompt": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    flattened_list = [item for sublist in nestedlist for item in sublist]\n    common_elements = set(flattened_list)\n\n    for i in range(len(flattened_list)):\n        for j in range(i + 1, len(flattened_list)):\n            if flattened_list[i] == flattened_list[j]:\n                common_elements.remove(flattened_list[i])\n\n    return common_elements", "\ndef common_in_nested_lists(nestedlist):\n    flattened_list = [item for sublist in nestedlist for item in sublist]\n    common_elements = set(flattened_list)\n\n    for i in range(len(flattened_list)):\n        for j in range(i + 1, len(flattened_list)):\n            if flattened_list[i] == flattened_list[j]:\n                common_elements.remove(flattened_list[i])\n\n    return common_elements", "\ndef common_in_nested_lists(nestedlist):\n    flattened_list = [item for sublist in nestedlist for item in sublist]\n    common_elements = set(flattened_list)\n\n    for i in range(len(flattened_list)):\n        for j in range(i + 1, len(flattened_list)):\n            if flattened_list[i] == flattened_list[j]:\n                common_elements.discard(flattened_list[i])\n\n    return common_elements"], "evaluation": false}
{"problem_id": 112, "prompt": "def perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    perimeter = 2 * (diameter + diameter/math.tan(math.radians(height)))\n    return perimeter", "\ndef perimeter(diameter,height) : \n    perimeter = 2 * (diameter + diameter/math.tan(math.radians(height)))\n    return perimeter", "\ndef perimeter(diameter,height) : \n    radius = diameter / 2\n    perimeter = 2 * 3.14 * (radius * height + radius)\n    return perimeter"], "evaluation": false}
{"problem_id": 113, "prompt": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"], "evaluation": true}
{"problem_id": 114, "prompt": "from collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = Counter(tup)\n    return freq_dict", "from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = Counter(tup)\n    return freq_dict", "from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = Counter(tup)\n    return freq_dict"], "evaluation": false}
{"problem_id": 115, "prompt": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True", "\ndef empty_dit(list1):\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True", "\ndef empty_dit(list1):\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True"], "evaluation": true}
{"problem_id": 116, "prompt": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    result = 1\n    for n in nums:\n        result *= n\n    return result", "\ndef tuple_to_int(nums):\n    result = 1\n    for num in nums:\n        result *= num\n    return result", "\ndef tuple_to_int(nums):\n    result = 1\n    for n in nums:\n        result *= n\n    return result"], "evaluation": false}
{"problem_id": 117, "prompt": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    new_list = []\n    for item in test_list:\n        try:\n            new_list.append(float(item))\n        except ValueError:\n            new_list.append(item)\n    return new_list", "\ndef list_to_float(test_list):\n    result_list = []\n    for item in test_list:\n        try:\n            result_list.append(float(item))\n        except ValueError:\n            result_list.append(item)\n    return result_list", "\ndef list_to_float(test_list):\n    new_list = []\n    for item in test_list:\n        try:\n            new_list.append(float(item))\n        except ValueError:\n            new_list.append(item)\n    return new_list"], "evaluation": false}
{"problem_id": 118, "prompt": "def string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    return list(string)", "\ndef string_to_list(string): \n    return string.split()", "\ndef string_to_list(string): \n    return string.split(\",\")"], "evaluation": false}
{"problem_id": 119, "prompt": "def search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end :\n        mid = (start + end) // 2\n\n        if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1] :\n            result = arr[mid]\n            break\n        elif arr[mid] == arr[mid-1] :\n            end = mid - 1\n        else :\n            start = mid + 1\n\n    return result", "\ndef search(arr,n) :\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end :\n        mid = (start + end) // 2\n\n        if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1] :\n            result = arr[mid]\n            break\n        elif arr[mid] == arr[mid-1] :\n            end = mid - 1\n        else :\n            start = mid + 1\n\n    return result", "\ndef search(arr,n) :\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end :\n        mid = (start + end) // 2\n\n        if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1] :\n            result = arr[mid]\n            break\n        elif arr[mid] == arr[mid-1] :\n            end = mid - 1\n        else :\n            start = mid + 1\n\n    return result"], "evaluation": false}
{"problem_id": 120, "prompt": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i][1], list1[j][1])\n    return max_pair, max_product", "\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i][1], list1[j][1])\n    return max_pair, max_product", "\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"], "evaluation": false}
{"problem_id": 121, "prompt": "def check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n    return count", "\ndef check_triplet(A, n, sum, count):\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n    return count", "\ndef check_triplet(A, n, sum, count):\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n    return count"], "evaluation": false}
{"problem_id": 122, "prompt": "MAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return smartNumber(n-1) + (3*smartNumber(n-2)) - smartNumber(n-3)", "\ndef smartNumber(n): \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return smartNumber(n-1) + (3*smartNumber(n-2)) - smartNumber(n-3)", "\ndef smartNumber(n): \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return smartNumber(n-1) + (3*smartNumber(n-2)) - smartNumber(n-3)"], "evaluation": false}
{"problem_id": 123, "prompt": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    sum_amicable_numbers = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            sum_amicable_numbers += num\n    return sum_amicable_numbers", "\ndef amicable_numbers_sum(limit):\n    result = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            result += num\n    return result", "\ndef amicable_numbers_sum(limit):\n    result = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            result += num\n    return result"], "evaluation": false}
{"problem_id": 124, "prompt": "import cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n    angle = cmath.phase(a*b)\n    return angle", "import cmath\n\ndef angle_complex(a,b):\n    angle = cmath.phase(a*b)\n    return angle", "import cmath\n\ndef angle_complex(a,b):\n    angle = cmath.phase(a*b)\n    return angle"], "evaluation": false}
{"problem_id": 125, "prompt": "def find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if abs(count_0 - count_1) > max_diff:\n            max_diff = abs(count_0 - count_1)\n        if count_0 == n or count_1 == n:\n            if abs(count_0 - count_1) > max_diff:\n                max_diff = abs(count_0 - count_1)\n            count_0 = 0\n            count_1 = 0\n    return max_diff", "\ndef find_length(string, n): \n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if abs(count_0 - count_1) > max_diff:\n            max_diff = abs(count_0 - count_1)\n        if count_0 == n or count_1 == n:\n            if abs(count_0 - count_1) > max_diff:\n                max_diff = abs(count_0 - count_1)\n            count_0 = 0\n            count_1 = 0\n    return max_diff", "\ndef find_length(string, n): \n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if abs(count_0 - count_1) > max_diff:\n            max_diff = abs(count_0 - count_1)\n        if count_0 == n or count_1 == n:\n            if abs(count_0 - count_1) > max_diff:\n                max_diff = abs(count_0 - count_1)\n            count_0 = 0\n            count_1 = 0\n    return max_diff"], "evaluation": false}
{"problem_id": 126, "prompt": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def get_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.extend([i, n//i])\n        return list(set(divisors))\n\n    gcd_val = gcd(a, b)\n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n\n    common_divisors = list(set(divisors_a) & set(divisors_b))\n    common_divisors = [i for i in common_divisors if i % gcd_val == 0]\n\n    return sum(common_divisors)", "\ndef sum(a,b): \n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def get_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.extend([i, n//i])\n        return list(set(divisors))\n\n    gcd_val = gcd(a, b)\n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n\n    common_divisors = list(set(divisors_a) & set(divisors_b))\n    common_divisors = [i for i in common_divisors if i % gcd_val == 0]\n\n    return sum(common_divisors)", "\ndef sum(a,b): \n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def get_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.extend([i, n//i])\n        return list(set(divisors))\n\n    gcd_val = gcd(a, b)\n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n\n    common_divisors = list(set(divisors_a) & set(divisors_b))\n    common_divisors = [i for i in common_divisors if i % gcd_val == 0]\n\n    return sum(common_divisors)"], "evaluation": false}
{"problem_id": 127, "prompt": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    result = 0\n    while y > 0:\n        result += x\n        y -= 1\n    return result", "\ndef multiply_int(x, y):\n    result = 0\n    while y > 0:\n        result += x\n        y -= 1\n    return result", "\ndef multiply_int(x, y):\n    result = 0\n    while y > 0:\n        result += x\n        y -= 1\n    return result"], "evaluation": true}
{"problem_id": 128, "prompt": "def long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words", "\ndef long_words(n, str):\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words", "\ndef long_words(n, str):\n    short_list = []\n    for word in str:\n        if len(word) > n:\n            short_list.append(word)\n    return short_list"], "evaluation": false}
{"problem_id": 129, "prompt": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n    # Calculate the magic sum\n    magic_sum = sum(my_matrix[0])\n\n    # Check each row\n    for row in my_matrix:\n        if sum(row)!= magic_sum:\n            return False\n\n    # Check each column\n    for col in range(len(my_matrix)):\n        col_sum = 0\n        for row in range(len(my_matrix)):\n            col_sum += my_matrix[row][col]\n        if col_sum!= magic_sum:\n            return False\n\n    # Check the two diagonals\n    diagonal_sum_1 = 0\n    diagonal_sum_2 = 0\n    for row in range(len(my_matrix)):\n        diagonal_sum_1 += my_matrix[row][row]\n        diagonal_sum_2 += my_matrix[row][len(my_matrix) - row - 1]\n    if diagonal_sum_1!= magic_sum or diagonal_sum_2!= magic_sum:\n        return False\n\n    # If all checks pass, it is a magic square\n    return True", "\ndef magic_square_test(my_matrix):\n    # Calculate the magic sum\n    magic_sum = sum(my_matrix[0])\n\n    # Check each row\n    for row in my_matrix:\n        if sum(row)!= magic_sum:\n            return False\n\n    # Check each column\n    for col in range(len(my_matrix)):\n        col_sum = 0\n        for row in range(len(my_matrix)):\n            col_sum += my_matrix[row][col]\n        if col_sum!= magic_sum:\n            return False\n\n    # Check the two diagonals\n    diagonal_sum_1 = 0\n    diagonal_sum_2 = 0\n    for row in range(len(my_matrix)):\n        diagonal_sum_1 += my_matrix[row][row]\n        diagonal_sum_2 += my_matrix[row][len(my_matrix) - row - 1]\n    if diagonal_sum_1!= magic_sum or diagonal_sum_2!= magic_sum:\n        return False\n\n    # If all checks pass, it's a magic square\n    return True", "\ndef magic_square_test(my_matrix):\n    # Calculate the magic sum\n    magic_sum = sum(my_matrix[0])\n\n    # Check each row\n    for row in my_matrix:\n        if sum(row)!= magic_sum:\n            return False\n\n    # Check each column\n    for col in range(len(my_matrix)):\n        col_sum = 0\n        for row in range(len(my_matrix)):\n            col_sum += my_matrix[row][col]\n        if col_sum!= magic_sum:\n            return False\n\n    # Check the two diagonals\n    diagonal_sum_1 = 0\n    diagonal_sum_2 = 0\n    for row in range(len(my_matrix)):\n        diagonal_sum_1 += my_matrix[row][row]\n        diagonal_sum_2 += my_matrix[row][len(my_matrix) - row - 1]\n    if diagonal_sum_1!= magic_sum or diagonal_sum_2!= magic_sum:\n        return False\n\n    # If all checks pass, it is a magic square\n    return True"], "evaluation": true}
{"problem_id": 130, "prompt": "from collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    return max_item", "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n\n    return max_item", "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n\n    return max_item, max_count"], "evaluation": false}
{"problem_id": 131, "prompt": "def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] in vowels:\n            if str1[j] in vowels:\n                str1[i], str1[j] = str1[j], str1[i]\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n        else:\n            i += 1\n    return \"\".join(str1)", "\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] in vowels:\n            if str1[j] in vowels:\n                str1[i], str1[j] = str1[j], str1[i]\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n        else:\n            i += 1\n    return \"\".join(str1)", "\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] in vowels:\n            if str1[j] in vowels:\n                str1[i], str1[j] = str1[j], str1[i]\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n        else:\n            i += 1\n    return \"\".join(str1)"], "evaluation": true}
{"problem_id": 132, "prompt": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    tup_string = \"\"\n    for item in tup1:\n        tup_string += str(item) + \" \"\n    return tup_string.strip()", "\ndef tup_string(tup1):\n    tup_string = \"\"\n    for item in tup1:\n        tup_string += str(item)\n    return tup_string", "\ndef tup_string(tup1):\n    tup_string = \"\"\n    for item in tup1:\n        tup_string += str(item) + \" \"\n    return tup_string.strip()"], "evaluation": false}
{"problem_id": 133, "prompt": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"], "evaluation": true}
{"problem_id": 134, "prompt": "def check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    for _ in range(p):\n        n = n - 1 if n > 0 else len(arr) - 1\n        if arr[n] % 2 == 0:\n            arr[n] = arr[n] * 2\n        else:\n            arr[n] = arr[n] * 2 + 1\n    return 'Even' if arr[-1] % 2 == 0 else 'Odd'", "\ndef check_last (arr,n,p): \n    for _ in range(p):\n        n = n - 1 if n > 0 else len(arr) - 1\n        if arr[n] % 2 == 0:\n            arr[n] = arr[n] * 2\n        else:\n            arr[n] = arr[n] * 2 + 1\n    return 'Even' if arr[-1] % 2 == 0 else 'Odd'", "\ndef check_last (arr,n,p): \n    for _ in range(p):\n        n = n - 1 if n > 0 else len(arr) - 1\n        if arr[n] % 2 == 0:\n            arr[n] = arr[n] * 2\n        else:\n            arr[n] = arr[n] * 2 + 1\n    return arr[-1] % 2 == 0"], "evaluation": false}
{"problem_id": 135, "prompt": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return n * (2 * n - 1)", "\ndef hexagonal_num(n): \n    return n * (2 * n - 1)", "\ndef hexagonal_num(n): \n    if n <= 0:\n        return 0\n    return n * (2 * n - 1)"], "evaluation": true}
{"problem_id": 136, "prompt": "def cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    rate = 0.12\n    bill = units * rate\n    return bill", "\ndef cal_electbill(units):\n    rate = 0.12\n    bill = units * rate\n    return bill", "\ndef cal_electbill(units):\n    rate = 0.12\n    bill = units * rate\n    return bill"], "evaluation": false}
{"problem_id": 137, "prompt": "from array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)", "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)", "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 138, "prompt": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    i = 0\n    while n > 0:\n        if (n & 1) == 1:\n            return False\n        n >>= 1\n        i += 1\n    return i > 0", "\ndef is_Sum_Of_Powers_Of_Two(n): \n    i = 0\n    while n > 0:\n        if (n & 1) == 1:\n            return False\n        n >>= 1\n        i += 1\n    return i > 0", "\ndef is_Sum_Of_Powers_Of_Two(n): \n    i = 0\n    while n > 0:\n        if (n & 1) == 1:\n            return False\n        n >>= 1\n        i += 1\n    return i > 0"], "evaluation": false}
{"problem_id": 139, "prompt": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    return 2 * math.pi * r", "\ndef circle_circumference(r):\n    return 2 * 3.14 * r", "\ndef circle_circumference(r):\n    return 2 * math.pi * r"], "evaluation": false}
{"problem_id": 140, "prompt": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    singly_occurring = []\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i]) == 1:\n            singly_occurring.append(test_list[i])\n    return tuple(singly_occurring)", "\ndef extract_singly(test_list):\n    singly_occurring = []\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i]) == 1:\n            singly_occurring.append(test_list[i])\n    return tuple(singly_occurring)", "\ndef extract_singly(test_list):\n    singly_occurring = []\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i]) == 1:\n            singly_occurring.append(test_list[i])\n    return tuple(singly_occurring)"], "evaluation": false}
{"problem_id": 141, "prompt": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        nums[i - 1::-1] = sorted(nums[i - 1::-1])\n    return nums", "\ndef pancake_sort(nums):\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        nums[i - 1::-1] = sorted(nums[i - 1::-1])\n    return nums", "\ndef pancake_sort(nums):\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        nums[i - 1::-1] = sorted(nums[i - 1::-1])\n    return nums"], "evaluation": true}
{"problem_id": 142, "prompt": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                for k in list3:\n                    if i == k:\n                        count += 1\n    return count", "\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                for k in list3:\n                    if i == k:\n                        count += 1\n    return count", "\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j == k:\n                    count += 1\n    return count"], "evaluation": false}
{"problem_id": 143, "prompt": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count", "\ndef find_lists(Input): \n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count", "\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 144, "prompt": "def sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += abs(arr[i] - arr[j])\n    return sum", "\ndef sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += abs(arr[i] - arr[j])\n    return sum", "\ndef sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += abs(arr[i] - arr[j])\n    return sum"], "evaluation": true}
{"problem_id": 145, "prompt": "def max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    arr.sort()\n    max_diff = arr[n-1] - arr[0]\n    return max_diff", "\ndef max_Abs_Diff(arr,n): \n    arr.sort()\n    max_diff = arr[n-1] - arr[0]\n    return max_diff", "\ndef max_Abs_Diff(arr,n): \n    arr.sort()\n    max_diff = arr[n-1] - arr[0]\n    return max_diff"], "evaluation": false}
{"problem_id": 146, "prompt": "def ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    ascii_sum = 0\n    for char in str1:\n        ascii_sum += ord(char)\n    return ascii_sum", "\ndef ascii_value_string(str1):\n    ascii_sum = 0\n    for char in str1:\n        ascii_sum += ord(char)\n    return ascii_sum", "\ndef ascii_value_string(str1):\n    total_ascii = 0\n    for char in str1:\n        total_ascii += ord(char)\n    return total_ascii"], "evaluation": false}
{"problem_id": 147, "prompt": "def max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    if not tri or not m or not n:\n        return 0\n    if m == 0 or n == 0:\n        return tri[m][n]\n    if m == 1 or n == 1:\n        return max(tri[m][n], tri[m-1][n-1])\n    \n    left = max_path_sum(tri, m-1, n)\n    right = max_path_sum(tri, m, n-1)\n    top = max_path_sum(tri, m-1, n-1)\n    \n    return max(tri[m-1][n-1] + min(left, right, top), max(left, right, top))", "\ndef max_path_sum(tri, m, n): \n    if not tri or not m or not n:\n        return 0\n    if m == 0 or n == 0:\n        return tri[m][n]\n    if m == 1 or n == 1:\n        return max(tri[m][n], tri[m-1][n-1])\n    \n    left = max_path_sum(tri, m-1, n)\n    right = max_path_sum(tri, m, n-1)\n    top = max_path_sum(tri, m-1, n-1)\n    \n    return max(tri[m-1][n-1] + min(left, right, top), max(left, right, top))", "\ndef max_path_sum(tri, m, n): \n    if not tri or not m or not n:\n        return 0\n    if m == 0 or n == 0:\n        return tri[m][n]\n    if m == 1 or n == 1:\n        return max(tri[m][n], tri[m-1][n-1])\n    \n    left = max_path_sum(tri, m-1, n)\n    right = max_path_sum(tri, m, n-1)\n    top = max_path_sum(tri, m-1, n-1)\n    \n    return max(tri[m-1][n-1] + min(left, right), top + tri[m][n])"], "evaluation": false}
{"problem_id": 148, "prompt": "def sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n    # convert number to string\n    N_str = str(N)\n    \n    # get the length of the number\n    length = len(N_str)\n    \n    # initialize the maximum sum and the two parts\n    max_sum = 0\n    part1 = 0\n    part2 = 0\n    \n    # loop through all possible divisions\n    for i in range(length//2 + 1):\n        # calculate the sum of digits in the first part\n        sum1 = sum([int(digit) for digit in N_str[:i]])\n        \n        # calculate the sum of digits in the second part\n        sum2 = sum([int(digit) for digit in N_str[i:]])\n        \n        # update the maximum sum and the two parts if necessary\n        if sum1 + sum2 > max_sum:\n            max_sum = sum1 + sum2\n            part1 = int(N_str[:i])\n            part2 = int(N_str[i:])\n    \n    # return the two parts and the maximum sum\n    return part1, part2, max_sum", "\ndef sum_digits_twoparts(N) : \n    # convert number to string\n    N_str = str(N)\n    \n    # get the length of the number\n    length = len(N_str)\n    \n    # initialize the maximum sum and the two parts\n    max_sum = 0\n    part1 = 0\n    part2 = 0\n    \n    # loop through all possible divisions\n    for i in range(length//2 + 1):\n        # calculate the sum of digits in the first part\n        sum1 = sum([int(digit) for digit in N_str[:i]])\n        \n        # calculate the sum of digits in the second part\n        sum2 = sum([int(digit) for digit in N_str[i:]])\n        \n        # update the maximum sum and the two parts if necessary\n        if sum1 + sum2 > max_sum:\n            max_sum = sum1 + sum2\n            part1 = int(N_str[:i])\n            part2 = int(N_str[i:])\n    \n    # return the maximum sum and the two parts\n    return max_sum, part1, part2", "\ndef sum_digits_twoparts(N) : \n    # convert number to string\n    N_str = str(N)\n    \n    # get the length of the number\n    length = len(N_str)\n    \n    # initialize the maximum sum and the two parts\n    max_sum = 0\n    part1 = 0\n    part2 = 0\n    \n    # loop through all possible divisions\n    for i in range(length//2 + 1):\n        # calculate the sum of digits in the first part\n        sum1 = sum([int(digit) for digit in N_str[:i]])\n        \n        # calculate the sum of digits in the second part\n        sum2 = sum([int(digit) for digit in N_str[i:]])\n        \n        # update the maximum sum and the two parts if necessary\n        if sum1 + sum2 > max_sum:\n            max_sum = sum1 + sum2\n            part1 = int(N_str[:i])\n            part2 = int(N_str[i:])\n    \n    return part1, part2"], "evaluation": false}
{"problem_id": 149, "prompt": "def longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    # Initialize result \n    max_len = 1\n  \n    # Pick starting point \n    for i in range(1, n): \n  \n        # If current element is one more than previous \n        if arr[i] == arr[i - 1] + 1: \n            max_len += 1\n  \n    return max_len", "\ndef longest_subseq_with_diff_one(arr, n): \n    # Initialize result \n    max_len = 1\n  \n    # Pick starting point \n    for i in range(1, n): \n  \n        # If current element is one more than previous \n        if arr[i] == arr[i - 1] + 1: \n            max_len = max(max_len, i + 1) \n  \n    return max_len", "\ndef longest_subseq_with_diff_one(arr, n): \n    # Initialize result \n    max_len = 1\n  \n    # Pick starting point \n    for i in range(1, n): \n  \n        # If current element is one more than previous \n        if arr[i] == arr[i - 1] + 1: \n            max_len = max(max_len, i + 1) \n  \n    return max_len"], "evaluation": false}
{"problem_id": 150, "prompt": "def does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    if a == b:\n        return True\n    elif a < b:\n        return does_Contain_B(a+1,b,c)\n    else:\n        return does_Contain_B(a,b+1,c)", "\ndef does_Contain_B(a,b,c): \n    if a == b:\n        return True\n    elif a < b:\n        return does_Contain_B(a+1,b,c)\n    else:\n        return does_Contain_B(a,b+1,c)", "\ndef does_Contain_B(a,b,c): \n    if a == b:\n        return True\n    elif a < b:\n        return does_Contain_B(a+1,b,c)\n    else:\n        return does_Contain_B(a,b+1,c)"], "evaluation": false}
{"problem_id": 151, "prompt": "def is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    if gcd(x,y) == 1:\n        return True\n    else:\n        return False", "\ndef is_coprime(x,y):\n    if gcd(x, y) == 1:\n        return True\n    else:\n        return False", "\ndef is_coprime(x,y):\n    if gcd(x,y) == 1:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 152, "prompt": "def merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    \n    mid = len(x) // 2\n    left_half = x[:mid]\n    right_half = x[mid:]\n    \n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    \n    return merge(left_half, right_half)", "\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    \n    mid = len(x) // 2\n    left_half = x[:mid]\n    right_half = x[mid:]\n    \n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    \n    return merge(left_half, right_half)", "\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    \n    mid = len(x) // 2\n    left = x[:mid]\n    right = x[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)"], "evaluation": false}
{"problem_id": 153, "prompt": "def parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    d = (b**2) - (4*a*c)\n    if d < 0:\n        return None\n    x1 = (-b + sqrt(d)) / (2*a)\n    x2 = (-b - sqrt(d)) / (2*a)\n    y1 = a*(x1)**2 + b*x1 + c\n    y2 = a*(x2)**2 + b*x2 + c\n    return (x1, y1), (x2, y2)", "\ndef parabola_vertex(a, b, c): \n    d = (b**2) - (4*a*c)\n    if d < 0:\n        return None\n    x1 = (-b + sqrt(d)) / (2*a)\n    x2 = (-b - sqrt(d)) / (2*a)\n    y1 = a*(x1)**2 + b*x1 + c\n    y2 = a*(x2)**2 + b*x2 + c\n    return (x1, y1), (x2, y2)", "\ndef parabola_vertex(a, b, c): \n    d = (b**2) - (4*a*c)\n    if d < 0:\n        return None\n    x1 = (-b + sqrt(d)) / (2*a)\n    x2 = (-b - sqrt(d)) / (2*a)\n    y1 = a*(x1)**2 + b*x1 + c\n    y2 = a*(x2)**2 + b*x2 + c\n    return (x1, y1), (x2, y2)"], "evaluation": false}
{"problem_id": 154, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for row in nums:\n        result.append(row[N])\n    return result", "\ndef specified_element(nums, N):\n    extracted_elements = []\n    for row in nums:\n        extracted_elements.append(row[N])\n    return extracted_elements", "\ndef specified_element(nums, N):\n    result = []\n    for row in nums:\n        result.append(row[N])\n    return result"], "evaluation": true}
{"problem_id": 155, "prompt": "def even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    result = 0\n    while n > 0:\n        if n % 2 == 0:\n            result = result ^ 1\n        n = n // 2\n    return result", "\ndef even_bit_toggle_number(n) : \n    result = 0\n    while n:\n        if n & 1:\n            result += 2**(len(bin(n)) - 3)\n        n >>= 1\n    return result", "\ndef even_bit_toggle_number(n) : \n    result = 0\n    while n:\n        if n & 1:\n            result += 2**(len(bin(n)) - 3)\n        n >>= 1\n    return result"], "evaluation": false}
{"problem_id": 156, "prompt": "def tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    return tuple(int(i) for i in tuple_str)", "\ndef tuple_int_str(tuple_str):\n    return tuple(int(x) for x in tuple_str)", "\ndef tuple_int_str(tuple_str):\n    return tuple(int(i) for i in tuple_str)"], "evaluation": false}
{"problem_id": 157, "prompt": "from itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n    list2 = []\n    for k, g in groupby(list1):\n        list2.append([k, len(list(g))])\n    return list2", "from itertools import groupby\n\ndef encode_list(list1):\n    new_list = []\n    for k, g in groupby(list1):\n        new_list.append((k, len(list(g))))\n    return new_list", "from itertools import groupby\n\ndef encode_list(list1):\n    new_list = []\n    for k, g in groupby(list1):\n        new_list.append((k, len(list(g))))\n    return new_list"], "evaluation": false}
{"problem_id": 158, "prompt": "def min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    operations = 0\n    arr.sort()\n    target = arr[n-1]\n    for i in range(n):\n        operations += (target - arr[i]) // k\n        if (target - arr[i]) % k!= 0:\n            operations += 1\n    return operations", "\ndef min_Ops(arr,n,k): \n    operations = 0\n    arr.sort()\n    target = arr[n-1]\n    for i in range(n):\n        operations += (target - arr[i]) // k\n        if (target - arr[i]) % k!= 0:\n            operations += 1\n    return operations", "\ndef min_Ops(arr,n,k): \n    operations = 0\n    arr.sort()\n    target = arr[n-1]\n    for i in range(n):\n        operations += (target - arr[i]) // k\n        if (target - arr[i]) % k!= 0:\n            operations += 1\n    return operations"], "evaluation": false}
{"problem_id": 159, "prompt": "def month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    if month == 12 or month == 1 or month == 2:\n        season = \"winter\"\n    elif month == 3 or month == 4 or month == 5:\n        season = \"spring\"\n    elif month == 6 or month == 7 or month == 8:\n        season = \"summer\"\n    elif month == 9 or month == 10 or month == 11:\n        season = \"fall\"\n    else:\n        print(\"Invalid month\")\n        return\n    print(\"The season for the given month and day is:\",season)\n    print(\"The number of days in this month is:\",days)", "\ndef month_season(month,days):\n    if month == 12 or month == 1 or month == 2:\n        season = \"Winter\"\n    elif month == 3 or month == 4 or month == 5:\n        season = \"Spring\"\n    elif month == 6 or month == 7 or month == 8:\n        season = \"Summer\"\n    elif month == 9 or month == 10 or month == 11:\n        season = \"Fall\"\n    else:\n        print(\"Invalid month\")\n        return\n    print(\"The season for the given month and day is:\",season)\n    print(\"The number of days in this month is:\",days)", "\ndef month_season(month,days):\n    if month == 12 or month == 1 or month == 2:\n        season = \"winter\"\n    elif month == 3 or month == 4 or month == 5:\n        season = \"spring\"\n    elif month == 6 or month == 7 or month == 8:\n        season = \"summer\"\n    elif month == 9 or month == 10 or month == 11:\n        season = \"fall\"\n    else:\n        print(\"Invalid month\")\n        return\n    print(\"The season for the given month and day is:\",season)\n    print(\"The number of days in this month is:\",days)"], "evaluation": false}
{"problem_id": 160, "prompt": "def solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    for x in range(1, a+1):\n        for y in range(1, b+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None", "\ndef solution (a, b, n): \n    for x in range(1, a+1):\n        for y in range(1, b+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None", "\ndef solution (a, b, n): \n    for x in range(1, a+1):\n        for y in range(1, b+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"], "evaluation": false}
{"problem_id": 161, "prompt": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1", "\ndef remove_elements(list1, list2):\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1", "\ndef remove_elements(list1, list2):\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"], "evaluation": true}
{"problem_id": 162, "prompt": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    total = 0\n    for i in range(n, -1, -2):\n        total += i\n    return total", "\ndef sum_series(n):\n    total = 0\n    for i in range(n, -1, -2):\n        total += i\n    return total", "\ndef sum_series(n):\n    sum = 0\n    for i in range(n, -1, -2):\n        sum += i\n    return sum"], "evaluation": true}
{"problem_id": 163, "prompt": "from math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n    n = (len(s)-1)/2\n    apothem = l/(2*tan(pi/n))\n    area = n * apothem * l / 2\n    return area", "from math import tan, pi\n\ndef area_polygon(s,l):\n    n = (len(s)-1)/2\n    apothem_length = l/(2*tan(pi/n))\n    area = n * apothem_length * l / 2\n    return area", "from math import tan, pi\n\ndef area_polygon(s,l):\n    n = (len(s)-1)/2\n    apothem_length = l/(2*tan(pi/n))\n    area = n * apothem_length * l / 2\n    return area"], "evaluation": false}
{"problem_id": 164, "prompt": "import math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n    sum1 = sumOfDivisors(num1)\n    sum2 = sumOfDivisors(num2)\n    if sum1 == sum2:\n        return True\n    else:\n        return False", "import math \n\ndef areEquivalent(num1,num2): \n    sum1 = sumOfDivisors(num1)\n    sum2 = sumOfDivisors(num2)\n    if sum1 == sum2:\n        return True\n    else:\n        return False", "import math \n\ndef areEquivalent(num1,num2): \n    sum1 = sumOfDivisors(num1)\n    sum2 = sumOfDivisors(num2)\n    return sum1 == sum2"], "evaluation": false}
{"problem_id": 165, "prompt": "def count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    count_dict = {}\n    for char in str1:\n        if char.isalpha():\n            char_lower = char.lower()\n            if char_lower in count_dict:\n                count_dict[char_lower] += 1\n            else:\n                count_dict[char_lower] = 1\n    return count_dict", "\ndef count_char_position(str1): \n    count_dict = {}\n    for char in str1:\n        if char.isalpha():\n            char_lower = char.lower()\n            if char_lower in count_dict:\n                count_dict[char_lower] += 1\n            else:\n                count_dict[char_lower] = 1\n    return count_dict", "\ndef count_char_position(str1): \n    count_dict = {}\n    for char in str1:\n        if char.isalpha():\n            char_lower = char.lower()\n            if char_lower in count_dict:\n                count_dict[char_lower] += 1\n            else:\n                count_dict[char_lower] = 1\n    return count_dict"], "evaluation": false}
{"problem_id": 166, "prompt": "def find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count", "\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count", "\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 167, "prompt": "def next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    if (n == 0):\n        return 1\n    power = 0\n    while (n > 1):\n        n /= 2\n        power += 1\n    return int(math.pow(2, power))", "\ndef next_Power_Of_2(n): \n    if (n == 0):\n        return 1\n    power = 0\n    while (n > 1):\n        n /= 2\n        power += 1\n    return int(math.pow(2, power))", "\ndef next_Power_Of_2(n): \n    if (n == 0):\n        return 1\n    power = 0\n    while (n > 1):\n        n /= 2\n        power += 1\n    return int(2 ** power)"], "evaluation": false}
{"problem_id": 168, "prompt": "def frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count", "\ndef frequency(a,x): \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count", "\ndef frequency(a,x): \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "def get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n-1) + get_pell(n-2)", "\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n-1) + get_pell(n-2)", "\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n-1) + get_pell(n-2)"], "evaluation": true}
{"problem_id": 170, "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum", "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total", "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"], "evaluation": true}
{"problem_id": 171, "prompt": "import math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n    return 5*a", "import math\n\ndef perimeter_pentagon(a):\n    return 5 * a", "import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter"], "evaluation": true}
{"problem_id": 172, "prompt": "def count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n   count = 0\n    for char in s:\n        if char =='s' or char == 't' or char == 'd':\n            count += 1\n    return count", "\ndef count_occurance(s):\n   count = 0\n    for ch in s:\n        if ch =='s' or ch == 't' or ch == 'd':\n            count += 1\n    return count", "\ndef count_occurance(s):\n   count = 0\n    for c in s:\n        if c =='s' or c == 't' or c == 'd':\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 173, "prompt": "import re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n    result = re.sub(r'\\W+', '', text)\n    return result", "import re\n\ndef remove_splchar(text): \n    result = re.sub(r'\\W+', '', text)\n    return result", "import re\n\ndef remove_splchar(text): \n    result = re.sub(r'\\W+', '', text)\n    return result"], "evaluation": false}
{"problem_id": 174, "prompt": "def group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k not in d:\n            d[k] = []\n        d[k].append(v)\n    return d", "\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k not in d:\n            d[k] = []\n        d[k].append(v)\n    return d", "\ndef group_keyvalue(l):\n    result = {}\n    for item in l:\n        key, value = item\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result"], "evaluation": true}
{"problem_id": 175, "prompt": "def is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    stack = []\n    for char in str1:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "\ndef is_valid_parenthese( str1):\n    stack = []\n    for char in str1:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "\ndef is_valid_parenthese( str1):\n    stack = []\n    for char in str1:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"], "evaluation": true}
{"problem_id": 176, "prompt": "def perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    perimeter = a + b + c\n    return perimeter", "\ndef perimeter_triangle(a,b,c):\n    perimeter = a + b + c\n    return perimeter", "\ndef perimeter_triangle(a,b,c):\n    perimeter = a + b + c\n    return perimeter"], "evaluation": true}
{"problem_id": 177, "prompt": "def answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n\n    def lcm(a,b):\n        return (a*b)//gcd(a,b)\n\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if lcm(i,j) >= L and lcm(i,j) <= R:\n                return (i,j)\n\n    return None", "\ndef answer(L,R): \n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n\n    def lcm(a,b):\n        return (a*b)//gcd(a,b)\n\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if lcm(i,j) >= L and lcm(i,j) <= R:\n                return (i,j)\n    return None", "\ndef answer(L,R): \n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n\n    def lcm(a,b):\n        return (a*b)//gcd(a,b)\n\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if lcm(i,j) >= L and lcm(i,j) <= R:\n                return (i,j)\n    return None"], "evaluation": false}
{"problem_id": 178, "prompt": "import re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n    results = []\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            results.extend(matches)\n    return results", "import re\n\ndef string_literals(patterns,text):\n    result = []\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            result.extend(matches)\n    return result", "import re\n\ndef string_literals(patterns,text):\n    results = []\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            results.extend(matches)\n    return results"], "evaluation": false}
{"problem_id": 179, "prompt": "def is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    if x < 0:\n        return False\n    while x % 2 == 0:\n        x = x // 2\n    return x == 1", "\ndef is_num_keith(x): \n    if x < 0:\n        return False\n    while x % 2 == 0:\n        x = x // 2\n    return x == 1", "\ndef is_num_keith(x): \n    if x < 0:\n        return False\n    while x % 2 == 0:\n        x = x // 2\n    return x == 1"], "evaluation": false}
{"problem_id": 180, "prompt": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    # convert latitude and longitude from string to float\n    slat, slon, elat, elon = float(slat), float(slon), float(elat), float(elon)\n\n    # convert latitude and longitude from degrees to radians\n    slat_rad, slon_rad, elat_rad, elon_rad = radians(slat), radians(slon), radians(elat), radians(elon)\n\n    # calculate the differences in latitude and longitude\n    dlat = elat_rad - slat_rad\n    dlon = elon_rad - slon_rad\n\n    # calculate the distance using the Haversine formula\n    a = sin(dlat/2)**2 + cos(slat_rad) * cos(elat_rad) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    r = 6371 # radius of the Earth in kilometers\n\n    # return the distance\n    return c * r", "from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    # convert latitude and longitude from string to float\n    slat, slon, elat, elon = float(slat), float(slon), float(elat), float(elon)\n\n    # convert latitude and longitude from degrees to radians\n    slat_rad, slon_rad, elat_rad, elon_rad = radians(slat), radians(slon), radians(elat), radians(elon)\n\n    # calculate the differences in latitude and longitude\n    dlat = elat_rad - slat_rad\n    dlon = elon_rad - slon_rad\n\n    # calculate the distance using the Haversine formula\n    a = sin(dlat/2)**2 + cos(slat_rad) * cos(elat_rad) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n\n    # return the distance in kilometers\n    return 6371 * c", "from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    # convert latitude and longitude from string to float\n    slat, slon, elat, elon = float(slat), float(slon), float(elat), float(elon)\n\n    # convert latitude and longitude from degrees to radians\n    slat_rad, slon_rad, elat_rad, elon_rad = radians(slat), radians(slon), radians(elat), radians(elon)\n\n    # calculate the differences in latitude and longitude\n    dlat = elat_rad - slat_rad\n    dlon = elon_rad - slon_rad\n\n    # calculate the distance using the Haversine formula\n    a = sin(dlat/2)**2 + cos(slat_rad) * cos(elat_rad) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    r = 6371 # radius of the Earth in kilometers\n\n    # return the distance\n    return c * r"], "evaluation": false}
{"problem_id": 181, "prompt": "def common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n\n    prefix = arr[0]\n    for i in range(1, n):\n        while arr[i].find(prefix)!= 0:\n            prefix = prefix[:len(prefix)-1]\n            if len(prefix) == 0:\n                return \"\"\n    return prefix", "\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n    \n    prefix = arr[0]\n    for i in range(1, n):\n        while arr[i].find(prefix)!= 0:\n            prefix = prefix[:len(prefix)-1]\n            if len(prefix) == 0:\n                return \"\"\n    return prefix", "\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n    \n    prefix = arr[0]\n    for i in range(1, n):\n        while arr[i].find(prefix)!= 0:\n            prefix = prefix[:len(prefix)-1]\n            if len(prefix) == 0:\n                return \"\"\n    return prefix"], "evaluation": true}
{"problem_id": 182, "prompt": "import re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\n    numeric = re.findall(r'[0-9]', string)\n\n    return uppercase, lowercase, special_char, numeric", "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    numeric_values = re.findall(r'[0-9]', string)\n\n    return uppercase, lowercase, special_characters, numeric_values", "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\n    numeric = re.findall(r'[0-9]', string)\n    \n    return uppercase, lowercase, special_char, numeric"], "evaluation": false}
{"problem_id": 183, "prompt": "def count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count", "\ndef count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count", "\ndef count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 184, "prompt": "def greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    greater_list = []\n    for i in list:\n        if i > num:\n            greater_list.append(i)\n    return greater_list", "\ndef greater_specificnum(list,num):\n    greater_list = []\n    for i in list:\n        if i > num:\n            greater_list.append(i)\n    return greater_list", "\ndef greater_specificnum(list,num):\n    greater_list = []\n    for i in list:\n        if i > num:\n            greater_list.append(i)\n    return greater_list"], "evaluation": false}
{"problem_id": 185, "prompt": "def parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return -b/(2*a)\n    else:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        return (x1, x2)", "\ndef parabola_focus(a, b, c): \n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return -b/(2*a)\n    else:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        return (x1, x2)", "\ndef parabola_focus(a, b, c): \n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return -b/(2*a)\n    else:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        return (x1, x2)"], "evaluation": false}
{"problem_id": 186, "prompt": "import re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n    result = []\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            result.extend(matches)\n    return result", "import re\n\ndef check_literals(text, patterns):\n    result = []\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            result.append((pattern, matches))\n    return result", "import re\n\ndef check_literals(text, patterns):\n    result = []\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            result.append((pattern, matches))\n    return result"], "evaluation": false}
{"problem_id": 187, "prompt": "def longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"], "evaluation": true}
{"problem_id": 188, "prompt": "def prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        j = 0\n        while j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef prod_Square(n):\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        j = 0\n        while j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef prod_Square(n):\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        j = 0\n        while j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False"], "evaluation": false}
{"problem_id": 189, "prompt": "def first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    arr = [x for x in arr if x > 0 and x <=n]\n    arr_set = set(arr)\n    for i in range(1, n+1):\n        if i not in arr_set:\n            return i\n    return n+1", "\ndef first_Missing_Positive(arr,n): \n    arr = [x for x in arr if x > 0 and x <=n]\n    arr_set = set(arr)\n    \n    for i in range(1, n+1):\n        if i not in arr_set:\n            return i\n    \n    return n+1", "\ndef first_Missing_Positive(arr,n): \n    arr = [x for x in arr if x > 0 and x <=n]\n    arr_set = set(arr)\n    \n    for i in range(1, n+1):\n        if i not in arr_set:\n            return i\n    \n    return n+1"], "evaluation": true}
{"problem_id": 190, "prompt": "def count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if (x1 <= x <= x2) and (y1 <= y <= y2):\n                count += 1\n    return count", "\ndef count_Intgral_Points(x1,y1,x2,y2): \n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if (x1 <= x <= x2) and (y1 <= y <= y2):\n                count += 1\n    return count", "\ndef count_Intgral_Points(x1,y1,x2,y2): \n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if (x1 <= x <= x2) and (y1 <= y <= y2):\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 191, "prompt": "def check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    days_in_month = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n    if monthname3 in days_in_month.keys():\n        if days_in_month[monthname3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False", "\ndef check_monthnumber(monthname3):\n    days_in_month = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n\n    if monthname3 in days_in_month.keys():\n        if days_in_month[monthname3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False", "\ndef check_monthnumber(monthname3):\n    days_in_month = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n    if monthname3 in days_in_month.keys():\n        if days_in_month[monthname3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"], "evaluation": true}
{"problem_id": 192, "prompt": "def check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    has_letter = False\n    has_number = False\n    for char in str:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False", "\ndef check_String(str): \n    has_letter = False\n    has_number = False\n    for char in str:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False", "\ndef check_String(str): \n    has_letter = False\n    has_number = False\n    for char in str:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 193, "prompt": "def remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    new_tup = tuple(set(test_tup))\n    return new_tup", "\ndef remove_tuple(test_tup):\n    new_tup = tuple(set(test_tup))\n    return new_tup", "\ndef remove_tuple(test_tup):\n    new_tup = tuple(set(test_tup))\n    return new_tup"], "evaluation": true}
{"problem_id": 194, "prompt": "def octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    n = str(n)\n    decimal = 0\n    for i in range(len(n)):\n        decimal += int(n[i]) * (8 ** (len(n) - 1 - i))\n    return decimal", "\ndef octal_To_Decimal(n):  \n    n = str(n)\n    decimal = 0\n    for i in range(len(n)):\n        decimal += int(n[i]) * (8 ** (len(n) - 1 - i))\n    return decimal", "\ndef octal_To_Decimal(n):  \n    n = str(n)\n    base = len(n)\n    decimal = 0\n    for i in range(len(n)):\n        decimal += int(n[i]) * (8 ** (base - 1 - i))\n    return decimal"], "evaluation": true}
{"problem_id": 195, "prompt": "def first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1", "\ndef first(arr,x,n): \n    start=0\n    end=n-1\n    while start<=end:\n        mid=start+(end-start)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            start=mid+1\n        else:\n            end=mid-1\n    return -1", "\ndef first(arr,x,n): \n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1"], "evaluation": true}
{"problem_id": 196, "prompt": "def remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    new_list = [t for t in test_list if len(t)!= K]\n    return new_list", "\ndef remove_tuples(test_list, K):\n    new_list = [t for t in test_list if len(t)!= K]\n    return new_list", "\ndef remove_tuples(test_list, K):\n    new_list = [t for t in test_list if len(t)!= K]\n    return new_list"], "evaluation": true}
{"problem_id": 197, "prompt": "def find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    result_tup1 = (test_tup1[0] ** test_tup2[0], test_tup1[1] ** test_tup2[1])\n    result_tup2 = (test_tup1[0] ** test_tup2[0], test_tup1[1] ** test_tup2[1])\n    return result_tup1, result_tup2", "\ndef find_exponentio(test_tup1, test_tup2):\n    result_tup1 = (test_tup1[0] ** test_tup2[0], test_tup1[0] ** test_tup2[1])\n    result_tup2 = (test_tup1[1] ** test_tup2[0], test_tup1[1] ** test_tup2[1])\n    return result_tup1, result_tup2", "\ndef find_exponentio(test_tup1, test_tup2):\n    result_tup1 = (test_tup1[0] ** test_tup2[0], test_tup1[1] ** test_tup2[1])\n    result_tup2 = (test_tup1[0] ** test_tup2[0], test_tup1[1] ** test_tup2[1])\n    return result_tup1, result_tup2"], "evaluation": false}
{"problem_id": 198, "prompt": "import math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n    # Calculate the semi-axes of the ellipse\n    a_sq = a**2\n    b_sq = b**2\n    \n    # Calculate the area of the ellipse\n    ellipse_area = math.pi * a_sq * b_sq\n    \n    # Calculate the area of the triangle\n    triangle_area = 0.5 * a * b\n    \n    # Find the largest triangle that can be inscribed in the ellipse\n    largest_triangle_area = triangle_area * (ellipse_area / (math.pi * a_sq * b_sq))\n    \n    return largest_triangle_area", "import math\n\ndef largest_triangle(a,b): \n    # Calculate the semi-axes of the ellipse\n    a_sq = a**2\n    b_sq = b**2\n    \n    # Calculate the area of the ellipse\n    ellipse_area = math.pi * a_sq * b_sq\n    \n    # Calculate the area of the triangle\n    triangle_area = 0.5 * a * b\n    \n    # Find the largest triangle that can be inscribed in the ellipse\n    largest_triangle_area = triangle_area * (ellipse_area / (math.pi * a_sq * b_sq))\n    \n    return largest_triangle_area", "import math\n\ndef largest_triangle(a,b): \n    # Calculate the semi-axes of the ellipse\n    a_sq = a**2\n    b_sq = b**2\n    \n    # Calculate the area of the ellipse\n    ellipse_area = math.pi * a_sq * b_sq\n    \n    # Calculate the area of the triangle\n    triangle_area = 0.5 * a * b\n    \n    # Find the largest triangle that can be inscribed in the ellipse\n    largest_triangle_area = triangle_area * (ellipse_area / (math.pi * a_sq * b_sq))\n    \n    return largest_triangle_area"], "evaluation": false}
{"problem_id": 199, "prompt": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)", "\ndef highest_Power_of_2(n): \n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)", "\ndef highest_Power_of_2(n): \n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)"], "evaluation": true}
{"problem_id": 200, "prompt": "def position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    max_val = max(list1)\n    positions = [i for i, val in enumerate(list1) if val == max_val]\n    return positions", "\ndef position_max(list1):\n    max_val = max(list1)\n    positions = [i for i, x in enumerate(list1) if x == max_val]\n    return positions", "\ndef position_max(list1):\n    max_val = max(list1)\n    positions = [i for i, val in enumerate(list1) if val == max_val]\n    return positions"], "evaluation": true}
