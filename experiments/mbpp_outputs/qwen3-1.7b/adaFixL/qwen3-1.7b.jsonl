{"problem_id": 1, "prompt": "/no_think\nR = 3\nC = 3\ndef min_cost(cost, m, n): \n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n    dp = [[0]*n for _ in range(m)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    return dp[m-1][n-1]"], "evaluation": false}
{"problem_id": 2, "prompt": "/no_think\ndef similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    # Initialize a list to store the result\n    res = []\n    # Iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is present in the second tuple\n        if test_tup2.count(test_tup1[i]) > 0:\n            # If present, add to the result list\n            res.append(test_tup1[i])\n    # Return the result list\n    return res"], "evaluation": false}
{"problem_id": 3, "prompt": "/no_think\nimport math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    max_divisor = math.isqrt(n) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 4, "prompt": "/no_think\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    # Create a max heap\n    max_heap = []\n    for i in range(n):\n        hq.heappush(max_heap, -nums[i])\n    # Find the largest element\n    largest = -max_heap[0]\n    return largest"], "evaluation": false}
{"problem_id": 5, "prompt": "/no_think\ndef count_ways(n): \n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    # Base cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    # Recursive case\n    return count_ways(n-1) + count_ways(n-2) + count_ways(n-3) + count_ways(n-4) + count_ways(n-5) + count_ways(n-6) + count_ways(n-7) + count_ways(n-8) + count_ways(n-9) + count_ways(n-10) + count_ways(n-11) + count_ways(n-12) + count_ways(n-13) + count_ways(n-14) + count_ways(n-15) + count_ways(n-16) + count_ways(n-17) + count_ways(n-18) + count_ways(n-19) + count_ways(n-20) + count_ways(n-21) + count_ways(n-22) + count_ways(n-23) + count_ways(n-24) + count_ways(n-25) + count_ways(n-26) + count_ways(n-27) + count_ways(n-28) + count_ways(n-29) + count_ways(n-30) + count_ways(n-31) + count_ways(n-32) + count_ways(n-33) + count_ways(n-34) + count_ways(n-35) + count_ways(n-36) + count_ways(n-37) + count_ways(n-38) + count_ways(n-39) + count_ways(n-40) + count_ways(n-41) + count_ways(n-42) + count_ways(n-43) + count_ways(n-44) + count_ways(n-45) + count_ways(n-46) + count_ways(n-47) + count_ways(n-48) + count_ways(n-49) + count_ways(n-50) + count_ways(n-51) + count_ways(n-52) + count_ways(n-"], "evaluation": false}
{"problem_id": 6, "prompt": "/no_think\ndef differ_At_One_Bit_Pos(a,b): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    xor = a ^ b\n    if (xor & 0x00000001) == 0:\n        return False\n    else:\n        return True"], "evaluation": false}
{"problem_id": 7, "prompt": "/no_think\nimport re\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"], "evaluation": true}
{"problem_id": 8, "prompt": "/no_think\ndef square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))"], "evaluation": true}
{"problem_id": 9, "prompt": "/no_think\ndef find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    # Your code here\n    # Return the minimum number of rotations\n    pass"], "evaluation": false}
{"problem_id": 10, "prompt": "/no_think\nimport heapq\ndef small_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n    # Your code here\n    heapq.heapify(list1)\n    for i in range(n):\n        smallest = heapq.heappop(list1)\n        yield smallest\n    return list(list1)  # Return the list after all elements are processed"], "evaluation": false}
{"problem_id": 11, "prompt": "/no_think\ndef remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    # Check if the character is present in the string\n    if ch not in s:\n        return s\n    # Find the first occurrence of the character\n    first_occ = s.find(ch)\n    # Find the last occurrence of the character\n    last_occ = s.rfind(ch)\n    # Remove the first occurrence\n    s = s[:first_occ] + s[first_occ+1:]\n    # Remove the last occurrence\n    s = s[:last_occ] + s[last_occ+1:]\n    return s"], "evaluation": false}
{"problem_id": 12, "prompt": "/no_think\ndef sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = sorted(M, key=lambda row: sum(row))\n    return sorted_matrix"], "evaluation": true}
{"problem_id": 13, "prompt": "/no_think\nfrom collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n    # Your code here\n    common = {}\n    for word in words:\n        if word in common:\n            common[word] += 1\n        else:\n            common[word] = 1\n    # Now, find the most common words\n    sorted_words = sorted(common.items(), key=lambda x: (-x[1], x[0]))\n    # Return the first two words\n    return sorted_words[:2]"], "evaluation": false}
{"problem_id": 14, "prompt": "/no_think\ndef find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    return l * b * h"], "evaluation": false}
{"problem_id": 15, "prompt": "/no_think\nimport re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n    # Your code here\n    result = []\n    i = 0\n    while i < len(text):\n        if text[i].islower():\n            # Split the string at the lowercase letter\n            result.append(text[i])\n            i += 1\n        else:\n            # If the current character is not lowercase, add it to the result\n            result.append(text[i])\n            i += 1\n    return ''.join(result)"], "evaluation": false}
{"problem_id": 16, "prompt": "/no_think\nimport re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n    # Use regular expression to find all sequences of lowercase letters joined with an underscore\n    matches = re.findall(r'[a-z]+_[a-z]+', text)\n    # Return the matches as a list of strings\n    return matches"], "evaluation": false}
{"problem_id": 17, "prompt": "/no_think\ndef square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    return 4 * a"], "evaluation": true}
{"problem_id": 18, "prompt": "/no_think\nNO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n    result = []\n    for char in string:\n        if char not in second_string:\n            result.append(char)\n    return ''.join(result)"], "evaluation": true}
{"problem_id": 19, "prompt": "/no_think\ndef test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    # Your code here\n    # Check if the array has any duplicate elements\n    # Return True if there is at least one duplicate, False otherwise\n    return len(set(arraynums)) != len(arraynums)"], "evaluation": true}
{"problem_id": 20, "prompt": "/no_think\ndef is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    if x < 0:\n        return False\n    if x == 0:\n        return False\n    if x == 1:\n        return False\n    if x == 2:\n        return False\n    if x == 3:\n        return False\n    if x == 4:\n        return False\n    if x == 5:\n        return False\n    if x == 6:\n        return False\n    if x == 7:\n        return False\n    if x == 8:\n        return False\n    if x == 9:\n        return False\n    if x == 10:\n        return False\n    if x == 11:\n        return False\n    if x == 12:\n        return False\n    if x == 13:\n        return False\n    if x == 14:\n        return False\n    if x == 15:\n        return False\n    if x == 16:\n        return False\n    if x == 17:\n        return False\n    if x == 18:\n        return False\n    if x == 19:\n        return False\n    if x == 20:\n        return False\n    if x == 21:\n        return False\n    if x == 22:\n        return False\n    if x == 23:\n        return False\n    if x == 24:\n        return False\n    if x == 25:\n        return False\n    if x == 26:\n        return False\n    if x == 27:\n        return False\n    if x == 28:\n        return False\n    if x == 29:\n        return False\n    if x == 30:\n        return False\n    if x == 31:\n        return False\n    if x == 32:\n        return False\n    if x == 33:\n        return False\n    if x == 34:\n        return False\n    if x == 35:\n        return False\n    if x == 36:\n        return False\n    if x == 37:\n        return False\n    if x == 38:\n        return False\n    if x == 39:\n        return False\n    if x == 40:\n        return False\n    if x == 41:\n        return False\n    if x == 42"], "evaluation": false}
{"problem_id": 21, "prompt": "/no_think\ndef multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    # your code here\n    count = 0\n    for i in range(1, m+1):\n        if n * i <= m:\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 22, "prompt": "/no_think\ndef find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1  # If no duplicate found"], "evaluation": true}
{"problem_id": 23, "prompt": "/no_think\ndef maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    # Your code here\n    max_sum = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max_sum:\n                max_sum = list1[i][j]\n    return max_sum"], "evaluation": false}
{"problem_id": 24, "prompt": "/no_think\ndef binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    decimal = 0\n    for bit in binary:\n        decimal = decimal * 2 + int(bit)\n    return decimal"], "evaluation": false}
{"problem_id": 25, "prompt": "/no_think\ndef find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    # Your code here\n    from collections import Counter\n    count = Counter(arr)\n    product = 1\n    for key in count:\n        if count[key] == 1:\n            product *= key\n    return product"], "evaluation": true}
{"problem_id": 26, "prompt": "/no_think\ndef check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    # Check if the length of the tuple list is at least K\n    if len(test_list) < K:\n        return False\n    # Check if all elements in the tuple list are of the same type\n    if not all(isinstance(x, type(test_list[0])) for x in test_list):\n        return False\n    # Check if the first K elements are all the same\n    if all(x == test_list[0] for x in test_list[:K]):\n        return True\n    return False"], "evaluation": false}
{"problem_id": 27, "prompt": "/no_think\nimport re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    # your code here\n    new_list = []\n    for item in list:\n        # remove all digits from the string\n        cleaned = re.sub(r'\\d', '', item)\n        new_list.append(cleaned)\n    return new_list"], "evaluation": true}
{"problem_id": 28, "prompt": "/no_think\ndef binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    if k > n - k:\n        k = n - k\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"], "evaluation": true}
{"problem_id": 29, "prompt": "/no_think\ndef get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    # Your code here\n    for i in range(arr_size):\n        if arr.count(arr[i]) == 1:\n            print(arr[i])\n            return\n    return -1"], "evaluation": false}
{"problem_id": 30, "prompt": "/no_think\ndef count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 31, "prompt": "/no_think\ndef func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 32, "prompt": "/no_think\nimport math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n    max_factor = 1\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            max_factor = i\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1:\n        max_factor = max(max_factor, n)\n    return max_factor"], "evaluation": true}
{"problem_id": 33, "prompt": "/no_think\ndef decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N == 0:\n        return \"0\"\n    binary = \"\"\n    while N > 0:\n        binary = str(N % 2) + binary\n        N = N // 2\n    return binary"], "evaluation": false}
{"problem_id": 34, "prompt": "/no_think\ndef find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    # Your code here\n    for i in range(len(ar)):\n        if ar[i] != i:\n            return i\n    return -1"], "evaluation": false}
{"problem_id": 35, "prompt": "/no_think\ndef find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    # Your code here\n    return n * (n + 1) * 2"], "evaluation": false}
{"problem_id": 36, "prompt": "/no_think\ndef find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n    a = p\n    b = q\n    if b == 0:\n        return 0\n    if a == 0:\n        return 0\n    if b == 1:\n        return 0\n    if a == b:\n        return 0\n    if a > b:\n        a, b = b, a\n    if a == 1:\n        return 0\n    if b == 1:\n        return 0\n    if b == 2:\n        return 0\n    if b == 3:\n        return 0\n    if b == 4:\n        return 0\n    if b == 5:\n        return 0\n    if b == 6:\n        return 0\n    if b == 7:\n        return 0\n    if b == 8:\n        return 0\n    if b == 9:\n        return 0\n    if b == 10:\n        return 0\n    if b == 11:\n        return 0\n    if b == 12:\n        return 0\n    if b == 13:\n        return 0\n    if b == 14:\n        return 0\n    if b == 15:\n        return 0\n    if b == 16:\n        return 0\n    if b == 17:\n        return 0\n    if b == 18:\n        return 0\n    if b == 19:\n        return 0\n    if b == 20:\n        return 0\n    if b == 21:\n        return 0\n    if b == 22:\n        return 0\n    if b == 23:\n        return 0\n    if b == 24:\n        return 0\n    if b == 25:\n        return 0\n    if b == 26:\n        return 0\n    if b == 27:\n        return 0\n    if b == 28:\n        return 0\n    if b == 29:\n        return 0\n    if b == 30:\n        return 0\n    if b == 31:\n        return 0\n    if b == 32:\n        return 0\n    if b == 33:\n        return 0\n    if b == 34:"], "evaluation": false}
{"problem_id": 37, "prompt": "/no_think\ndef sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    # Separate the list into integers and strings\n    integers = []\n    strings = []\n    for item in mixed_list:\n        if isinstance(item, int):\n            integers.append(item)\n        else:\n            strings.append(item)\n    \n    # Sort the integers and strings separately\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted lists\n    sorted_list = integers + strings\n    return sorted_list"], "evaluation": true}
{"problem_id": 38, "prompt": "/no_think\ndef div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return (sum(even) / sum(odd)) if sum(odd) != 0 else 0  # Return 0 if sum of odd is zero to avoid division by zero error"], "evaluation": false}
{"problem_id": 39, "prompt": "/no_think\nimport heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    # Count the frequency of each character\n    freq = Counter(S)\n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq[char], char) for char, freq in freq.items()]\n    heapq.heapify(max_heap)\n    \n    # While the heap is not empty\n    while max_heap:\n        # Pop the character with the highest frequency\n        count, char = heapq.heappop(max_heap)\n        count = -count  # Convert back to positive\n        # If the count is zero, skip\n        if count == 0:\n            continue\n        # If the current character is the same as the previous one, skip\n        if char == prev_char:\n            continue\n        # Add the character to the result string\n        result += char\n        # Decrement the count\n        count -= 1\n        # If the count is still positive, push it back into the heap\n        if count > 0:\n            heapq.heappush(max_heap, (-count, char))\n        # Update the previous character\n        prev_char = char\n    \n    # If the result string is empty, return None\n    return result if len(result) > 0 else None"], "evaluation": false}
{"problem_id": 40, "prompt": "/no_think\nfrom collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    # Your code here\n    return Counter(chain.from_iterable(nums))"], "evaluation": true}
{"problem_id": 41, "prompt": "/no_think\ndef filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "/no_think\ndef find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    # your code here\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] +=1\n        else:\n            count[num] =1\n    result = 0\n    for key in count:\n        if count[key] >1:\n            result += key * count[key]\n    return result"], "evaluation": true}
{"problem_id": 43, "prompt": "/no_think\nimport re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 44, "prompt": "/no_think\nimport re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 45, "prompt": "/no_think\ndef get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    # Check if the array is empty\n    if not l:\n        return None\n    # Find the gcd of the first two elements\n    a, b = l[0], l[1]\n    while b != 0:\n        a, b = b, a % b\n    return a"], "evaluation": true}
{"problem_id": 46, "prompt": "/no_think\ndef test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    return len(data) == len(set(data))  # Check if the length of the list is equal to the length of the set, which is the number of distinct elements"], "evaluation": true}
{"problem_id": 47, "prompt": "/no_think\ndef compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    if A > B:\n        return 0\n    if A == 0:\n        return 0\n    if B == 0:\n        return 0\n    if A == B:\n        return 0\n    if A == 1:\n        return 1\n    if B == 1:\n        return 1\n    if A == 2:\n        return 2\n    if B == 2:\n        return 2\n    if A == 3:\n        return 3\n    if B == 3:\n        return 3\n    if A == 4:\n        return 4\n    if B == 4:\n        return 4\n    if A == 5:\n        return 5\n    if B == 5:\n        return 5\n    if A == 6:\n        return 6\n    if B == 6:\n        return 6\n    if A == 7:\n        return 7\n    if B == 7:\n        return 7\n    if A == 8:\n        return 8\n    if B == 8:\n        return 8\n    if A == 9:\n        return 9\n    if B == 9:\n        return 9\n    if A == 10:\n        return 0\n    if B == 10:\n        return 0\n    if A == 11:\n        return 1\n    if B == 11:\n        return 1\n    if A == 12:\n        return 2\n    if B == 12:\n        return 2\n    if A == 13:\n        return 3\n    if B == 13:\n        return 3\n    if A == 14:\n        return 4\n    if B == 14:\n        return 4\n    if A == 15:\n        return 5\n    if B == 15:\n        return 5\n    if A == 16:\n        return 6\n    if B == 16:\n        return 6\n    if A == 17:\n        return 7\n    if B == 17:\n        return 7\n    if A == 18:\n        return 8\n    if B == 18:\n        return 8\n    if A == 19:\n        return 9\n    if B"], "evaluation": false}
{"problem_id": 48, "prompt": "/no_think\ndef odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 49, "prompt": "/no_think\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    # Your code here\n    result = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            result.append(nums[i][0])\n        else:\n            result.append(nums[i][N-1])\n    return result"], "evaluation": false}
{"problem_id": 50, "prompt": "/no_think\ndef min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))"], "evaluation": false}
{"problem_id": 51, "prompt": "/no_think\ndef check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    # Check if all sides are equal\n    if x == y and y == z:\n        print(\"Equilateral\")\n    else:\n        print(\"Not equilateral\")"], "evaluation": false}
{"problem_id": 52, "prompt": "/no_think\ndef parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    return b * h"], "evaluation": true}
{"problem_id": 53, "prompt": "/no_think\ndef check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 54, "prompt": "/no_think\ndef counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    if not my_list:\n        return my_list\n    max_val = max(my_list)\n    min_val = min(my_list)\n    range_of_values = max_val - min_val + 1\n    count = [0] * (range_of_values)\n    for num in my_list:\n        count[num - min_val] += 1\n    # Build the sorted list\n    sorted_list = []\n    for i in range(range_of_values):\n        sorted_list.extend([min_val + i] * count[i])\n    return sorted_list"], "evaluation": true}
{"problem_id": 55, "prompt": "/no_think\nimport math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n    return a * (r ** (n-1))"], "evaluation": true}
{"problem_id": 56, "prompt": "/no_think\ndef check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    # Convert the number to a string\n    s = str(n)\n    # Reverse the string\n    reversed_s = s[::-1]\n    # Check if the original number is one less than twice the reversed number\n    return n == 2 * int(reversed_s) - 1"], "evaluation": true}
{"problem_id": 57, "prompt": "/no_think\ndef find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    # your code here\n    arr.sort(reverse=True)\n    return ''.join(map(str,arr))"], "evaluation": false}
{"problem_id": 58, "prompt": "/no_think\ndef opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    # your code here\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 59, "prompt": "/no_think\ndef is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    return n * (3 * n - 2) * (3 * n - 1) // 6"], "evaluation": false}
{"problem_id": 60, "prompt": "/no_think\ndef max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if arr[i] - arr[j] > 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"], "evaluation": false}
{"problem_id": 61, "prompt": "/no_think\nfrom collections import defaultdict\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(c) for c in s[i:j]) == j - i:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 62, "prompt": "/no_think\ndef smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    # your code here\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"], "evaluation": true}
{"problem_id": 63, "prompt": "/no_think\ndef max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] > test_list[i]:\n                max_diff = max(max_diff, test_list[j] - test_list[i])\n    return max_diff"], "evaluation": false}
{"problem_id": 64, "prompt": "/no_think\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n    # Sort the list of tuples based on the subject name using lambda\n    sorted_subjects = sorted(subjectmarks, key=lambda x: x[0])\n    return sorted_subjects"], "evaluation": false}
{"problem_id": 65, "prompt": "/no_think\ndef recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])  # Base case: if the list is empty, return 0.\n        # Recursive case: add the first element to the sum of the rest of the list.\n        # This is a simple recursive approach where we add the first element to the sum of the remaining list.\n        # However, this approach is not efficient for large lists because it makes multiple recursive calls.\n        # For example, for a list of size n, it makes n-1 recursive calls, which can be slow for large n.\n        # But for the purpose of this exercise, it's a valid recursive solution.\n        # The function returns the sum of all elements in the list.\n        # You can test this function with a list like [1, 2, 3, 4], and it should return 10.\n        # You can also test with an empty list, which should return 0.\n        # You can test with a list of one element, which should return that element.\n        # You can test with a list of negative numbers, which should return the sum of all elements.\n        # You can test with a list of floating-point numbers, which should return the sum of all elements.\n        # You can test with a list of strings, which should return the sum of all elements.\n        # You can test with a list of lists, which should return the sum of all elements in the lists.\n        # You can test with a list of tuples, which should return the sum of all elements in the tuples.\n        # You can test with a list of dictionaries, which should return the sum of all elements in the dictionaries.\n        # You can test with a list of custom objects, which should return the sum of all elements in the objects.\n        # You can test with a list of numbers, which should return the sum of all elements.\n        # You can test with a list of integers, which should return the sum of all elements.\n        # You can test with a list of floats, which should return the sum of all elements.\n        # You can test with a list of strings, which should return the sum of all elements.\n        # You can test with a list of lists, which should return the sum of all elements in the lists.\n        # You can test with a list of tuples, which should return the sum of all elements in the tuples."], "evaluation": false}
{"problem_id": 66, "prompt": "/no_think\ndef pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "/no_think\ndef bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    # Initialize the Bell triangle\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][n]  # Return the nth Bell number"], "evaluation": false}
{"problem_id": 68, "prompt": "/no_think\ndef is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    is_increasing = True\n    is_decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            is_increasing = False\n        if A[i] < A[i+1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing"], "evaluation": true}
{"problem_id": 69, "prompt": "/no_think\ndef is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 70, "prompt": "/no_think\ndef get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    # Check if the input is a list of tuples\n    if not isinstance(Input, list) or not all(isinstance(x, tuple) for x in Input):\n        return False\n\n    # Check if all tuples have the same length\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if len(Input[i]) != len(Input[j]):\n                return False\n    return True"], "evaluation": false}
{"problem_id": 71, "prompt": "/no_think\ndef comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap * 0.25))\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums"], "evaluation": true}
{"problem_id": 72, "prompt": "/no_think\ndef dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    # your code here\n    if n % 2 == 0:\n        return False\n    else:\n        return True"], "evaluation": true}
{"problem_id": 73, "prompt": "/no_think\nimport re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n    # Use a regular expression to split the string on one or more whitespace characters\n    # and then split the result on one or more newline characters\n    # and then split the result on one or more tabs\n    # and then split the result on one or more semicolons\n    # and then split the result on one or more commas\n    # and then split the result on one or more periods\n    # and then split the result on one or more spaces\n    # and then split the result on one or more hyphens\n    # and then split the result on one or more underscores\n    # and then split the result on one or more parentheses\n    # and then split the result on one or more square brackets\n    # and then split the result on one or more curly brackets\n    # and then split the result on one or more exclamation marks\n    # and then split the result on one or more question marks\n    # and then split the result on one or more colons\n    # and then split the result on one or more asterisks\n    # and then split the result on one or more plus signs\n    # and then split the result on one or more minus signs\n    # and then split the result on one or more slashes\n    # and then split the result on one or more backslashes\n    # and then split the result on one or more at signs\n    # and then split the result on one or more numbers\n    # and then split the result on one or more letters\n    # and then split the result on one or more symbols\n    # and then split the result on one or more special characters\n    # and then split the result on one or more punctuation marks\n    # and then split the result on one or more whitespace characters\n    # and then split the result on one or more tabs\n    # and then split the result on one or more semicolons\n    # and then split the result on one or more commas\n    # and then split the result on one or more periods\n    # and then split the result on one or more spaces\n    # and then split the result on one or more hyphens\n    # and then split the result on one or more underscores\n    # and then split the result on one or more parentheses\n    # and then split the result on one or more square brackets\n    # and then split the result on one or more curly brackets\n    #"], "evaluation": false}
{"problem_id": 74, "prompt": "/no_think\ndef is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n    # Check if the number of colors and patterns are the same\n    if len(colors) != len(patterns):\n        return False\n    \n    # Check if the first color and pattern are the same\n    if colors[0] != patterns[0]:\n        return False\n    \n    # Check if the second color and pattern are the same\n    if colors[1] != patterns[1]:\n        return False\n    \n    # Check if the third color and pattern are the same\n    if colors[2] != patterns[2]:\n        return False\n    \n    # Check if the fourth color and pattern are the same\n    if colors[3] != patterns[3]:\n        return False\n    \n    # Check if the fifth color and pattern are the same\n    if colors[4] != patterns[4]:\n        return False\n    \n    # Check if the sixth color and pattern are the same\n    if colors[5] != patterns[5]:\n        return False\n    \n    # Check if the seventh color and pattern are the same\n    if colors[6] != patterns[6]:\n        return False\n    \n    # Check if the eighth color and pattern are the same\n    if colors[7] != patterns[7]:\n        return False\n    \n    # Check if the ninth color and pattern are the same\n    if colors[8] != patterns[8]:\n        return False\n    \n    # Check if the tenth color and pattern are the same\n    if colors[9] != patterns[9]:\n        return False\n    \n    # Check if the eleventh color and pattern are the same\n    if colors[10] != patterns[10]:\n        return False\n    \n    # Check if the twelfth color and pattern are the same\n    if colors[11] != patterns[11]:\n        return False\n    \n    # Check if the thirteenth color and pattern are the same\n    if colors[12] != patterns[12]:\n        return False\n    \n    # Check if the fourteenth color and pattern are the same\n    if colors[13] != patterns[13]:\n        return False\n    \n    # Check if the fifteenth color and pattern are the same\n    if colors[14] != patterns[14]:\n        return False\n    \n    # Check if the sixteenth color and pattern are the same\n    if colors[15] != patterns[15]:\n        return False\n    \n    # Check if the seventeenth color and pattern are the same\n    if colors"], "evaluation": false}
{"problem_id": 75, "prompt": "/no_think\ndef find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"], "evaluation": false}
{"problem_id": 76, "prompt": "/no_think\ndef count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    # Your code here\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 77, "prompt": "/no_think\ndef is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    sum_even = 0\n    sum_odd = 0\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 0:\n            sum_even += digit\n        else:\n            sum_odd += digit\n    return sum_even - sum_odd"], "evaluation": false}
{"problem_id": 78, "prompt": "/no_think\ndef count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 == 1:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 79, "prompt": "/no_think\ndef word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    return len(s) % 2 == 1"], "evaluation": true}
{"problem_id": 80, "prompt": "/no_think\ndef tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    return n * (n + 1) * (n + 2) // 6"], "evaluation": true}
{"problem_id": 81, "prompt": "/no_think\ndef zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    # Initialize a list to store the result\n    res = []\n    # Iterate through both tuples\n    for i in range(len(test_tup1)):\n        # Check if the elements are of the same type\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            # If both are tuples, recursively zip them\n            res.append(zip_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            # If not, add the elements directly\n            res.append((test_tup1[i], test_tup2[i]))\n    return res"], "evaluation": false}
{"problem_id": 82, "prompt": "/no_think\nimport math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3"], "evaluation": true}
{"problem_id": 83, "prompt": "/no_think\ndef get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    # your code here\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return sum"], "evaluation": false}
{"problem_id": 84, "prompt": "/no_think\ndef sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)"], "evaluation": false}
{"problem_id": 85, "prompt": "/no_think\nimport math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2"], "evaluation": true}
{"problem_id": 86, "prompt": "/no_think\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    return n * (3 * n - 2) * (3 * n - 1) // 2"], "evaluation": false}
{"problem_id": 87, "prompt": "/no_think\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    # Your code here\n    return dict1 | dict2 | dict3"], "evaluation": false}
{"problem_id": 88, "prompt": "/no_think\nimport collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n    # Create a frequency dictionary\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"], "evaluation": true}
{"problem_id": 89, "prompt": "/no_think\ndef closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 90, "prompt": "/no_think\ndef len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"], "evaluation": true}
{"problem_id": 91, "prompt": "/no_think\ndef find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    # Check if the substring is present in the list\n    if sub_str in str1:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 92, "prompt": "/no_think\ndef is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    # Convert the number to a string\n    s = str(n)\n    # Check if the length is less than 2\n    if len(s) < 2:\n        return False\n    # Check if the number is a palindrome\n    if s == s[::-1]:\n        return False\n    # Check if the number is a multiple of 11\n    if n % 11 == 0:\n        return False\n    # Check if the number is a multiple of 101\n    if n % 101 == 0:\n        return False\n    # Check if the number is a multiple of 1001\n    if n % 1001 == 0:\n        return False\n    # Check if the number is a multiple of 10001\n    if n % 10001 == 0:\n        return False\n    # Check if the number is a multiple of 100001\n    if n % 100001 == 0:\n        return False\n    # Check if the number is a multiple of 1000001\n    if n % 1000001 == 0:\n        return False\n    # Check if the number is a multiple of 10000001\n    if n % 10000001 == 0:\n        return False\n    # Check if the number is a multiple of 100000001\n    if n % 100000001 == 0:\n        return False\n    # Check if the number is a multiple of 1000000001\n    if n % 1000000001 == 0:\n        return False\n    # Check if the number is a multiple of 10000000001\n    if n % 10000000001 == 0:\n        return False\n    # Check if the number is a multiple of 100000000001\n    if n % 100000000001 == 0:\n        return False\n    # Check if the number is a multiple of 1000000000"], "evaluation": false}
{"problem_id": 93, "prompt": "/no_think\ndef power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a ** b"], "evaluation": true}
{"problem_id": 94, "prompt": "/no_think\nfrom operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n    if not test_list:\n        return None\n    min_val = min(test_list)\n    min_index = [i for i, val in enumerate(test_list) if val == min_val]\n    return min_index[0] if min_index else None"], "evaluation": false}
{"problem_id": 95, "prompt": "/no_think\ndef Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    min_length = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_sublist = lst[i:j]\n            if len(current_sublist) < min_length:\n                min_length = len(current_sublist)\n    return min_length"], "evaluation": false}
{"problem_id": 96, "prompt": "/no_think\ndef divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 97, "prompt": "/no_think\ndef frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    # Create a dictionary to store the frequency of each list\n    freq = {}\n    # Iterate through each list in the input list\n    for lst in list1:\n        # Check if the list is already in the dictionary\n        if lst in freq:\n            # If it is, increment the count\n            freq[lst] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            freq[lst] = 1\n    # Return the frequency dictionary\n    return freq"], "evaluation": false}
{"problem_id": 98, "prompt": "/no_think\ndef multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers) if len(numbers) != 0 else 0  # Handle the case when the list is empty"], "evaluation": true}
{"problem_id": 99, "prompt": "/no_think\ndef decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"], "evaluation": true}
{"problem_id": 100, "prompt": "/no_think\nimport sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string\n    s = str(num)\n    # Check if the number is a palindrome\n    if s == s[::-1]:\n        return num\n    # If not, find the next smallest palindrome\n    # Start with the next possible candidates\n    # Increment the number by 1 and check if it's a palindrome\n    # If not, increment by 1 and check again\n    # This is a simple approach but may not be efficient for very large numbers\n    # However, for the purpose of this problem, it's acceptable\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num\n        # If the number is too large, break the loop\n        if num > 10**18:\n            return -1\n    return -1"], "evaluation": false}
{"problem_id": 101, "prompt": "/no_think\ndef kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    # Your code here\n    return arr[k-1]  # This is a placeholder; you need to implement the correct logic"], "evaluation": true}
{"problem_id": 102, "prompt": "/no_think\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    parts = word.split('_')\n    camel_case = parts[0].capitalize()\n    for part in parts[1:]:\n        camel_case += part[0].upper() + part[1:]\n    return camel_case"], "evaluation": true}
{"problem_id": 103, "prompt": "/no_think\ndef eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    # Base cases\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 0\n    if n == m:\n        return 1\n    # Recursive case\n    return (eulerian_num(n-1, m-1) + \n            eulerian_num(n-1, m) * (n - m + 1) / (n + 1))"], "evaluation": false}
{"problem_id": 104, "prompt": "/no_think\ndef sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    # Sort each sublist using a lambda function as the key\n    sorted_list = [sorted(sublist, key=lambda x: x) for sublist in input_list]\n    return sorted_list"], "evaluation": true}
{"problem_id": 105, "prompt": "/no_think\ndef count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    return sum(1 for x in lst if x)  # returns the count of true booleans in the list"], "evaluation": true}
{"problem_id": 106, "prompt": "/no_think\ndef add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    # Convert the tuple to a list\n    list_to_add = list(test_tup)\n    # Add the list to the tuple\n    result = list_to_add + test_list\n    return result"], "evaluation": false}
{"problem_id": 107, "prompt": "/no_think\ndef count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for num in range(L, R+1):\n        # Check if the number is hexadecimal\n        if is_hex(num):\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "/no_think\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    # Create a heap\n    heap = []\n    # Add elements to the heap\n    for num in [num1, num2, num3]:\n        heapq.heappush(heap, num)\n    # Extract elements from the heap\n    merged = []\n    while heap:\n        merged.append(heapq.heappop(heap))\n    return merged"], "evaluation": false}
{"problem_id": 109, "prompt": "/no_think\ndef odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count +=1\n    if count %2 ==1:\n        return count\n    else:\n        return 0"], "evaluation": false}
{"problem_id": 110, "prompt": "/no_think\ndef extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    # Check if the list is empty\n    if not test_list:\n        return []\n    # Check if the list has only one element\n    if len(test_list) == 1:\n        if test_list[0] == strt_val:\n            return []\n        else:\n            return [test_list[0]]\n    # Check if the first element is not equal to the start value\n    if test_list[0] != strt_val:\n        return [test_list[0]]\n    # Check if the last element is not equal to the end value\n    if test_list[-1] != stop_val:\n        return [test_list[-1]]\n    # Initialize the result list\n    result = []\n    # Initialize the current value\n    current_val = strt_val\n    # Iterate through the list\n    for i in range(len(test_list)):\n        # If the current value is not equal to the next value, add the missing range\n        if test_list[i] != current_val:\n            # Check if the current value is the start value\n            if current_val == strt_val:\n                # Add the start value to the result\n                result.append(strt_val)\n            # Check if the current value is the end value\n            if current_val == stop_val:\n                # Add the end value to the result\n                result.append(stop_val)\n            # Update the current value\n            current_val = test_list[i]\n        # If the current value is equal to the next value, continue\n        else:\n            current_val = test_list[i]\n    # Return the result\n    return result"], "evaluation": false}
{"problem_id": 111, "prompt": "/no_think\ndef common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    # Convert the nested list into a single list\n    flat_list = []\n    for sublist in nestedlist:\n        for item in sublist:\n            flat_list.append(item)\n    # Find the intersection of all lists\n    common_elements = set(flat_list)\n    return list(common_elements)"], "evaluation": false}
{"problem_id": 112, "prompt": "/no_think\ndef perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    pi = 3.14159\n    radius = diameter / 2\n    surface_area = 2 * pi * radius * height\n    return surface_area"], "evaluation": false}
{"problem_id": 113, "prompt": "/no_think\ndef check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    # Check if the string is empty\n    if not text:\n        return False\n\n    # Check if all characters are digits\n    if text.isdigit():\n        return True\n\n    # Check if the string starts with a digit and has at least one non-digit character\n    if text[0].isdigit() and not text[1:].isdigit():\n        return True\n\n    # If none of the above, return False\n    return False"], "evaluation": true}
{"problem_id": 114, "prompt": "/no_think\nfrom collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n    # Initialize a dictionary to store the frequency of each tuple\n    freq_dict = {}\n    # Iterate through each tuple in the list\n    for t in test_list:\n        # Check if the tuple is already in the dictionary\n        if t in freq_dict:\n            # If yes, increment its count by 1\n            freq_dict[t] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            freq_dict[t] = 1\n    # Create a list of tuples where the first element is the tuple and the second is its frequency\n    result = [(t, freq_dict[t]) for t in test_list]\n    return result"], "evaluation": false}
{"problem_id": 115, "prompt": "/no_think\ndef empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    for d in list1:\n        if d:\n            return False\n    return True"], "evaluation": true}
{"problem_id": 116, "prompt": "/no_think\ndef tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    # Convert the tuple to a string by joining the elements with no separators\n    # Then convert the string to an integer\n    return int(''.join(map(str, nums)))"], "evaluation": true}
{"problem_id": 117, "prompt": "/no_think\ndef list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], (int, float)):\n            continue\n        elif isinstance(test_list[i], str):\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                test_list[i] = None\n        elif isinstance(test_list[i], (list, tuple)):\n            test_list[i] = list_to_float(test_list[i])\n    return test_list"], "evaluation": false}
{"problem_id": 118, "prompt": "/no_think\ndef string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    # your code here\n    return list(string)"], "evaluation": false}
{"problem_id": 119, "prompt": "/no_think\ndef search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == n:\n            return mid\n        elif arr[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"], "evaluation": false}
{"problem_id": 120, "prompt": "/no_think\ndef max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max_product:\n                max_product = list1[i][j]\n    return max_product"], "evaluation": false}
{"problem_id": 121, "prompt": "/no_think\ndef check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n    return count"], "evaluation": false}
{"problem_id": 122, "prompt": "/no_think\nMAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    # Initialize a list to store the smart numbers\n    smart_numbers = []\n    # Initialize a variable to keep track of the current number\n    current = 0\n    # Loop until we have found n smart numbers\n    while len(smart_numbers) < n:\n        # Check if the current number is a smart number\n        if is_smart_number(current):\n            smart_numbers.append(current)\n        # Increment the current number\n        current += 1\n    return smart_numbers[n-1]  # Return the nth smart number"], "evaluation": false}
{"problem_id": 123, "prompt": "/no_think\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    sum_amicable = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            sum_amicable += i\n    return sum_amicable"], "evaluation": false}
{"problem_id": 124, "prompt": "/no_think\nimport cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n    # Convert a and b to complex numbers\n    a = complex(a)\n    b = complex(b)\n    # Calculate the angle\n    angle = cmath.phase(a - b)\n    return angle"], "evaluation": false}
{"problem_id": 125, "prompt": "/no_think\ndef find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    # Your code here\n    max_diff = 0\n    current_diff = 0\n    left = 0\n    for right in range(len(string)):\n        current_diff += 1 if string[right] == '1' else -1\n        if current_diff < 0:\n            left = right + 1\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff"], "evaluation": false}
{"problem_id": 126, "prompt": "/no_think\ndef sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    # Your code here\n    # Find the greatest common divisor (gcd) of a and b\n    gcd_val = math.gcd(a, b)\n    # Find all divisors of the gcd\n    divisors = set()\n    for i in range(1, int(math.sqrt(gcd_val)) + 1):\n        if gcd_val % i == 0:\n            divisors.add(i)\n            divisors.add(gcd_val // i)\n    # Calculate the sum of the divisors\n    sum_divisors = sum(divisors)\n    return sum_divisors"], "evaluation": false}
{"problem_id": 127, "prompt": "/no_think\ndef multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    # Your code here\n    result = 0\n    for _ in range(y):\n        result += x\n    return result"], "evaluation": true}
{"problem_id": 128, "prompt": "/no_think\ndef long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]"], "evaluation": false}
{"problem_id": 129, "prompt": "/no_think\ndef magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n    # Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # Check if all elements are integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n\n    # Check if all elements are between 1 and 8\n    for row in my_matrix:\n        for element in row:\n            if not (1 <= element <= 8):\n                return False\n\n    # Check if the sum of each row is the same\n    row_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != row_sum:\n            return False\n\n    # Check if the sum of each column is the same\n    for col in range(len(my_matrix[0])):\n        column_sum = 0\n        for row in range(len(my_matrix)):\n            column_sum += my_matrix[row][col]\n        if column_sum != row_sum:\n            return False\n\n    # Check if the sum of the diagonals is the same\n    diag1 = 0\n    diag2 = 0\n    for i in range(len(my_matrix)):\n        diag1 += my_matrix[i][i]\n        diag2 += my_matrix[i][len(my_matrix) - 1 - i]\n    if diag1 != diag2 != row_sum:\n        return False\n\n    # All checks passed\n    return True"], "evaluation": false}
{"problem_id": 130, "prompt": "/no_think\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    # Find the maximum frequency\n    max_freq = max(frequency.values())\n    # Find the item(s) with maximum frequency\n    max_items = [key for key, value in frequency.items() if value == max_freq]\n    return max_items"], "evaluation": false}
{"problem_id": 131, "prompt": "/no_think\ndef reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = list(str1)\n    i = 0\n    j = len(vowels) - 1\n    while i < j:\n        if new_str[i] in vowels and new_str[j] in vowels:\n            new_str[i], new_str[j] = new_str[j], new_str[i]\n            i += 1\n            j -= 1\n        elif new_str[i] in vowels:\n            j -= 1\n        elif new_str[j] in vowels:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return ''.join(new_str)"], "evaluation": false}
{"problem_id": 132, "prompt": "/no_think\ndef tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    # Convert the tuple to a string using the join() method\n    return ''.join(tup1)"], "evaluation": true}
{"problem_id": 133, "prompt": "/no_think\ndef sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    return sum(lambda x: x if x < 0 else 0, nums)"], "evaluation": false}
{"problem_id": 134, "prompt": "/no_think\ndef check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    # Your code here\n    for i in range(p):\n        arr[-1] = arr[-1] + arr[-2]\n    return arr[-1] % 2 == 0"], "evaluation": false}
{"problem_id": 135, "prompt": "/no_think\ndef hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return n * (n + 1) * 3 - n * (n - 1) * 2"], "evaluation": false}
{"problem_id": 136, "prompt": "/no_think\ndef cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    if units <= 100:\n        return units * 1.5\n    elif units <= 200:\n        return 100 * 1.5 + (units - 100) * 2.0\n    elif units <= 300:\n        return 100 * 1.5 + 100 * 2.0 + (units - 200) * 2.5\n    elif units <= 400:\n        return 100 * 1.5 + 100 * 2.0 + 100 * 2.5 + (units - 300) * 3.0\n    else:\n        return 100 * 1.5 + 100 * 2.0 + 100 * 2.5 + 100 * 3.0 + (units - 400) * 4.0"], "evaluation": false}
{"problem_id": 137, "prompt": "/no_think\nfrom array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums) if len(nums) > 0 else 0.0"], "evaluation": false}
{"problem_id": 138, "prompt": "/no_think\ndef is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    # Your code here\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2\n            if n % 2 == 0:\n                return True\n            else:\n                return False\n    return False"], "evaluation": false}
{"problem_id": 139, "prompt": "/no_think\ndef circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    return 2 * math.pi * r"], "evaluation": false}
{"problem_id": 140, "prompt": "/no_think\ndef extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    # Count the occurrences of each element\n    count = {}\n    for element in test_list:\n        count[element] = count.get(element, 0) + 1\n\n    # Filter elements that occur exactly once\n    result = [element for element, freq in count.items() if freq == 1]\n\n    return result"], "evaluation": false}
{"problem_id": 141, "prompt": "/no_think\ndef pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the subarray\n        max_index = nums.index(max(nums[:i+1]))\n        # If the maximum element is not at the current position, flip it to the top\n        if max_index != i:\n            # Flip the subarray from 0 to max_index\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            # Flip the subarray from 0 to i\n            nums[:i+1] = nums[:i+1][::-1]\n        # If the maximum element is already at the current position, do nothing\n    return nums"], "evaluation": true}
{"problem_id": 142, "prompt": "/no_think\ndef count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    # your code here\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] == list3[j]:\n                count +=1\n    return count"], "evaluation": false}
{"problem_id": 143, "prompt": "/no_think\ndef find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    # Your code here\n    count = 0\n    for i in range(len(Input)):\n        if isinstance(Input[i], tuple):\n            count += 1\n            # Recursively find lists in the tuple\n            count += find_lists(Input[i])\n    return count"], "evaluation": false}
{"problem_id": 144, "prompt": "/no_think\ndef sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    # Your code here\n    arr.sort()\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += abs(arr[i] - arr[j])\n    return total"], "evaluation": true}
{"problem_id": 145, "prompt": "/no_think\ndef max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            current_diff = abs(arr[i] - arr[j])\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff"], "evaluation": true}
{"problem_id": 146, "prompt": "/no_think\ndef ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    # Your code here\n    total_chars = len(str1)\n    ascii_values = [ord(char) for char in str1]\n    return total_chars, ascii_values"], "evaluation": false}
{"problem_id": 147, "prompt": "/no_think\ndef max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    # Initialize a 2D array to store the maximum path sums at each position\n    dp = [[0] * (n + 1) for _ in range(m)]\n    \n    # Base case: the first row of the triangle\n    for i in range(n):\n        dp[0][i] = tri[0][i]\n    \n    # Fill the dp array\n    for i in range(1, m):\n        for j in range(n):\n            # The current position can be reached from the position above it\n            # or from the position above-left or above-right\n            # However, since the triangle is right-aligned, we only need to consider\n            # the position above-left and above-right\n            dp[i][j] = tri[i][j] + max(dp[i-1][j-1], dp[i-1][j])\n    \n    # The maximum path sum is the maximum value in the last row\n    return max(dp[m-1])"], "evaluation": false}
{"problem_id": 148, "prompt": "/no_think\ndef sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n    # Your code here\n    # Return the sum of the two parts\n    # For example, if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10\n    # But if N is 1234, return 1+2+3+4 = 10"], "evaluation": false}
{"problem_id": 149, "prompt": "/no_think\ndef longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    dp = [ [0]*n for _ in range(n) ]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if abs(arr[j] - arr[i]) == 1:\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = 1\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] > max_len:\n                max_len = dp[i][j]\n    return max_len"], "evaluation": false}
{"problem_id": 150, "prompt": "/no_think\ndef does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    # your code here\n    # return True if the number is present in the sequence, else False\n    # the sequence is defined as follows:\n    # the sequence starts with 1, then 2, then 3, then 4, and so on.\n    # but every time a number is added to the sequence, it is added to the end of the sequence.\n    # for example, the sequence starts as [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133"], "evaluation": false}
{"problem_id": 151, "prompt": "/no_think\ndef is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    # your code here\n    return gcd(x,y) == 1"], "evaluation": false}
{"problem_id": 152, "prompt": "/no_think\ndef merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)"], "evaluation": false}
{"problem_id": 153, "prompt": "/no_think\ndef parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    x = -b / (2 * a)\n    y = (-b**2 + 4 * a * c) / (4 * a)\n    return (x, y)"], "evaluation": true}
{"problem_id": 154, "prompt": "/no_think\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    # Your code here\n    result = []\n    for i in range(len(nums)):\n        if i % N == 0:\n            result.append(nums[i][N])\n    return result"], "evaluation": false}
{"problem_id": 155, "prompt": "/no_think\ndef even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    # Step 1: Find the number of bits in the given number\n    bit_count = n.bit_length()\n    # Step 2: Create a mask that has all 1s for the number of bits\n    mask = (1 << bit_count) - 1\n    # Step 3: XOR the original number with the mask to toggle even bits\n    result = n ^ mask\n    return result"], "evaluation": false}
{"problem_id": 156, "prompt": "/no_think\ndef tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    return tuple(int(x) for x in tuple_str)  # Convert each string in the tuple to an integer"], "evaluation": false}
{"problem_id": 157, "prompt": "/no_think\nfrom itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n    # Your code here\n    if not list1:\n        return []\n    result = []\n    for key, group in groupby(list1):\n        result.append((key, len(list))\n    return result"], "evaluation": false}
{"problem_id": 158, "prompt": "/no_think\ndef min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    # Your code here\n    return 0"], "evaluation": false}
{"problem_id": 159, "prompt": "/no_think\ndef month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    if month == 12 or month == 1 or month == 2:\n        return \"Winter\"\n    elif month == 3 or month == 4 or month == 5:\n        return \"Spring\"\n    elif month == 6 or month == 7 or month == 8:\n        return \"Summer\"\n    elif month == 9 or month == 10 or month == 11:\n        return \"Autumn\"\n    else:\n        return \"Invalid month\""], "evaluation": false}
{"problem_id": 160, "prompt": "/no_think\ndef solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    # Your code here\n    x = 0\n    y = 0\n    if n == 0:\n        return (0, 0)\n    if a == 0:\n        if b == 0:\n            return (0, 0)\n        if n % b == 0:\n            return (0, n//b)\n        else:\n            return (0, 0)\n    if b == 0:\n        if a == 0:\n            return (0, 0)\n        if n % a == 0:\n            return (0, n//a)\n        else:\n            return (0, 0)\n    # Find x and y such that ax + by = n\n    # Use the extended Euclidean algorithm to find x and y\n    # Implement the extended Euclidean algorithm here\n    def extended_gcd(a, b):\n        if b == 0:\n            return (a, 1, 0)\n        else:\n            g, x1, y1 = extended_gcd(b, a % b)\n            x = y1\n            y = x1 - (a // b) * y1\n            return (g, x, y)\n    g, x, y = extended_gcd(a, b)\n    if g != 1:\n        return (0, 0)\n    return (x, y)"], "evaluation": false}
{"problem_id": 161, "prompt": "/no_think\ndef remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    # Remove elements from list1 that are present in list2\n    list1 = [x for x in list1 if x not in list2]\n    return list1"], "evaluation": true}
{"problem_id": 162, "prompt": "/no_think\ndef sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total"], "evaluation": true}
{"problem_id": 163, "prompt": "/no_think\nfrom math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n    # YOUR CODE HERE\n    return 0.0"], "evaluation": false}
{"problem_id": 164, "prompt": "/no_think\nimport math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n    # your code here\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, num1+1):\n        if num1 % i == 0:\n            sum1 += i\n    for i in range(1, num2+1):\n        if num2 % i == 0:\n            sum2 += i\n    return sum1 == sum2"], "evaluation": false}
{"problem_id": 165, "prompt": "/no_think\ndef count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    # your code here\n    count = 0\n    for i in range(len(str1)):\n        char = str1[i]\n        if char.isalpha():\n            if ord(char) - ord('a') + 1 == i + 1:\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 166, "prompt": "/no_think\ndef find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 167, "prompt": "/no_think\ndef next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    if n.bit_length() == 1:\n        return 1\n    else:\n        return 1 << (n.bit_length() - 1)  # 1 << k is 2^k"], "evaluation": false}
{"problem_id": 168, "prompt": "/no_think\ndef frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "/no_think\ndef get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * get_pell(n-1) + get_pell(n-2) - get_pell(n-3)"], "evaluation": false}
{"problem_id": 170, "prompt": "/no_think\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    # Your code here\n    total = 0\n    for i in range(len(list1)):\n        if m <= i <= n:\n            total += list1[i]\n    return total"], "evaluation": true}
{"problem_id": 171, "prompt": "/no_think\nimport math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n    return 5 * a"], "evaluation": true}
{"problem_id": 172, "prompt": "/no_think\ndef count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s) - 3):\n        if s[i:i+4] == 'std':\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 173, "prompt": "/no_think\nimport re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n    # Remove all non-alphanumeric characters\n    cleaned = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned"], "evaluation": true}
{"problem_id": 174, "prompt": "/no_think\ndef group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result"], "evaluation": true}
{"problem_id": 175, "prompt": "/no_think\ndef is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    stack = []\n    for char in str1:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"], "evaluation": true}
{"problem_id": 176, "prompt": "/no_think\ndef perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    return a + b + c"], "evaluation": true}
{"problem_id": 177, "prompt": "/no_think\ndef answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    # Your code here\n    from math import gcd\n    from functools import reduce\n    def lcm(a,b):\n        return a*b//gcd(a,b)\n    return reduce(lcm, L, R) if reduce(lcm, L, R) <= R else reduce(lcm, L, R) if reduce(lcm, L, R) >= L else reduce(lcm, L, R)"], "evaluation": false}
{"problem_id": 178, "prompt": "/no_think\nimport re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n    # Your code here\n    result = []\n    for pattern in patterns:\n        # Check if the pattern is a literal string\n        if isinstance(pattern, str):\n            # Check if the pattern is a literal string\n            if pattern in text:\n                result.append(pattern)\n        else:\n            # Check if the pattern is a regular expression\n            if re.search(pattern, text):\n                result.append(pattern)\n    return result"], "evaluation": false}
{"problem_id": 179, "prompt": "/no_think\ndef is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    # Check if x is a positive integer\n    if not isinstance(x, int) or x <= 0:\n        return False\n    # Check if x is a perfect square\n    if not is_perfect_square(x):\n        return False\n    # Check if x is a perfect cube\n    if not is_perfect_cube(x):\n        return False\n    # Check if x is a perfect fourth power\n    if not is_perfect_fourth_power(x):\n        return False\n    # Check if x is a perfect fifth power\n    if not is_perfect_fifth_power(x):\n        return False\n    # Check if x is a perfect sixth power\n    if not is_perfect_sixth_power(x):\n        return False\n    # Check if x is a perfect seventh power\n    if not is_perfect_seventh_power(x):\n        return False\n    # Check if x is a perfect eighth power\n    if not is_perfect_eighth_power(x):\n        return False\n    # Check if x is a perfect ninth power\n    if not is_perfect_ninth_power(x):\n        return False\n    # Check if x is a perfect tenth power\n    if not is_perfect_tenth_power(x):\n        return False\n    return True"], "evaluation": false}
{"problem_id": 180, "prompt": "/no_think\nfrom math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    dlat = radians(elat - slat)\n    dlon = radians(elon - slon)\n    a = sin(dlat/2) ** 2 + cos(slat) * cos(elat) * sin(dlon/2) ** 2\n    c = 2 * acos(a)\n    d = R * c\n    return d"], "evaluation": false}
{"problem_id": 181, "prompt": "/no_think\ndef common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    # Find the minimum length string in the array\n    min_len = min(len(s) for s in arr)\n    # Initialize the prefix as an empty string\n    prefix = \"\"\n    # Iterate through each character in the strings\n    for i in range(min_len):\n        # Check if all strings have the same character at position i\n        all_same = True\n        for s in arr:\n            if s[i] != arr[0][i]:\n                all_same = False\n                break\n        if all_same:\n            prefix += arr[0][i]\n        else:\n            break\n    return prefix"], "evaluation": true}
{"problem_id": 182, "prompt": "/no_think\nimport re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n    pattern = r'([A-Z])|([a-z])|([^A-Za-z0-9])|(\\d)'\n    matches = re.finditer(pattern, string)\n    result = []\n    for match in matches:\n        group0 = match.group(0)\n        group1 = match.group(1)\n        group2 = match.group(2)\n        group3 = match.group(3)\n        group4 = match.group(4)\n        if group1:\n            result.append((group1, 'lowercase'))\n        elif group2:\n            result.append((group2, 'lowercase'))\n        elif group3:\n            result.append((group3, 'special'))\n        elif group4:\n            result.append((group4, 'numeric'))\n        else:\n            result.append((group0, 'uppercase'))\n    return result"], "evaluation": false}
{"problem_id": 183, "prompt": "/no_think\ndef count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] == k:\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 184, "prompt": "/no_think\ndef greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    return [x for x in list if x > num]"], "evaluation": false}
{"problem_id": 185, "prompt": "/no_think\ndef parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    # Calculate the vertex of the parabola\n    vertex_x = -b / (2 * a)\n    vertex_y = c - (b**2) / (4 * a)\n    \n    # Calculate the focus\n    focus_x = vertex_x\n    focus_y = vertex_y + 1/(4*a)\n    \n    return (focus_x, focus_y)"], "evaluation": true}
{"problem_id": 186, "prompt": "/no_think\nimport re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False"], "evaluation": false}
{"problem_id": 187, "prompt": "/no_think\ndef longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    # Create a 2D array to store the lengths of the longest common subsequence\n    dp = [[0]*(n+1) for _ in range(m+1)]\n    \n    # Fill the dp array\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]"], "evaluation": true}
{"problem_id": 188, "prompt": "/no_think\ndef prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    # Your code here\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            j = n // i\n            if j * j == n:\n                return True\n            elif j * j == n:\n                return True\n            else:\n                return False\n        i += 1\n    return False"], "evaluation": false}
{"problem_id": 189, "prompt": "/no_think\ndef first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    # Your code here\n    arr.sort()\n    for i in range(n):\n        if arr[i] != i+1:\n            return i+1\n    return n+1"], "evaluation": false}
{"problem_id": 190, "prompt": "/no_think\ndef count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    # Calculate the number of vertical lines\n    vertical_lines = x1 - x2\n    # Calculate the number of horizontal lines\n    horizontal_lines = y1 - y2\n    # Calculate the number of integral points\n    integral_points = vertical_lines * horizontal_lines\n    return integral_points"], "evaluation": false}
{"problem_id": 191, "prompt": "/no_think\ndef check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthname3 in month_days:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 192, "prompt": "/no_think\ndef check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    has_letter = False\n    has_number = False\n    for char in str:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n    if has_letter and has_number:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 193, "prompt": "/no_think\ndef remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    # Convert the tuple to a list\n    lst = list(test_tup)\n    # Use a set to remove duplicates\n    unique_lst = list(set(lst))\n    # Convert back to a tuple\n    unique_tup = tuple(unique_lst)\n    return unique_tup"], "evaluation": true}
{"problem_id": 194, "prompt": "/no_think\ndef octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    decimal = 0\n    i = 0\n    while n > 0:\n        decimal = decimal * 8 + n % 8\n        n = n // 8\n        i += 1\n    return decimal"], "evaluation": false}
{"problem_id": 195, "prompt": "/no_think\ndef first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            # if x is found, check if it's the first occurrence\n            if mid == 0 or arr[mid-1] != arr[mid]:\n                return mid\n            else:\n                high = mid -1\n        elif arr[mid] < x:\n            low = mid +1\n        else:\n            high = mid -1\n    return -1"], "evaluation": true}
{"problem_id": 196, "prompt": "/no_think\ndef remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    # Use list comprehension to filter out tuples with length k\n    result = [tpl for tpl in test_list if len(tpl) != K]\n    return result"], "evaluation": true}
{"problem_id": 197, "prompt": "/no_think\ndef find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    # Check if the tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        return None\n\n    # Create a list to store the results\n    results = []\n\n    # Iterate through each pair of elements in the tuples\n    for i in range(len(test_tup1)):\n        # Check if the elements are integers\n        if not isinstance(test_tup1[i], int) or not isinstance(test_tup2[i], int):\n            return None\n\n        # Perform exponentiation\n        result = test_tup1[i] ** test_tup2[i]\n\n        # Append the result to the list\n        results.append(result)\n\n    # Return the list of results\n    return results"], "evaluation": false}
{"problem_id": 198, "prompt": "/no_think\nimport math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n    # The area of a triangle inscribed in an ellipse with semi-axes a and b\n    # is given by (1/2)*a*b*sqrt(1 - (x^2/a^2)^2 - (y^2/b^2)^2)\n    # But this is not the maximum area.\n    # The maximum area is achieved when the triangle is formed by the points\n    # (a,0), (0,b), and (-a,0)\n    # The area is (1/2)*a*b*sqrt(1 - (x^2/a^2)^2 - (y^2/b^2)^2)\n    # But this is not the maximum area.\n    # The maximum area is achieved when the triangle is formed by the points\n    # (a,0), (0,b), and (-a,0)\n    # The area is (1/2)*a*b*sqrt(1 - (x^2/a^2)^2 - (y^2/b^2)^2)\n    # But this is not the maximum area.\n    # The maximum area is achieved when the triangle is formed by the points\n    # (a,0), (0,b), and (-a,0)\n    # The area is (1/2)*a*b*sqrt(1 - (x^2/a^2)^2 - (y^2/b^2)^2)\n    # But this is not the maximum area.\n    # The maximum area is achieved when the triangle is formed by the points\n    # (a,0), (0,b), and (-a,0)\n    # The area is (1/2)*a*b*sqrt(1 - (x^2/a^2)^2 - (y^2/b^2)^2)\n    # But this is not the maximum area.\n    # The maximum area is achieved when the triangle is formed by the points\n    # (a,0), (0,b), and (-a,0)\n    # The area is (1/2)*a*b*sqrt(1 - (x^2/a^2)^2 - (y^2/b^2)^2)\n    # But this is not the maximum area.\n    # The maximum area is achieved when the triangle is formed by the points\n    # (a,0), (0,b), and (-a,0)\n    # The area is (1/2)*a*b"], "evaluation": false}
{"problem_id": 199, "prompt": "/no_think\ndef highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    return 1 << (n.bit_length() - 1) if n > 0 else 0"], "evaluation": true}
{"problem_id": 200, "prompt": "/no_think\ndef position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    max_val = max(list1)\n    return [i for i, val in enumerate(list1) if val == max_val]"], "evaluation": true}
