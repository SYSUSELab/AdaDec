{"problem_id": 1, "prompt": "R = 3\nC = 3\ndef min_cost(cost, m, n): \n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n    if m < 0 or n < 0:\n        return float('inf')\n    elif m == 0 and n == 0:\n        return cost[m][n]\n    else:\n        return cost[m][n] + min(min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1))", "\ndef min_cost(cost, m, n): \n    if m < 0 or n < 0:\n        return float('inf')\n    elif m == 0 and n == 0:\n        return cost[m][n]\n    else:\n        return cost[m][n] + min(min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1))", "\ndef min_cost(cost, m, n): \n    if m < 0 or n < 0:\n        return float('inf')\n    elif m == 0 and n == 0:\n        return cost[m][n]\n    else:\n        return cost[m][n] + min(min_cost(cost, m-1, n), min_cost(cost, m, n-1))"], "evaluation": true}
{"problem_id": 2, "prompt": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    return [x for x in test_tup1 if x in test_tup2]", "\ndef similar_elements(test_tup1, test_tup2):\n    return [i for i in test_tup1 if i in test_tup2]", "\ndef similar_elements(test_tup1, test_tup2):\n    return [i for i in test_tup1 if i in test_tup2]"], "evaluation": false}
{"problem_id": 3, "prompt": "import math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"], "evaluation": false}
{"problem_id": 4, "prompt": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    return hq.nlargest(n, nums)", "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    return hq.nlargest(n, nums)", "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    return hq.nlargest(n,nums)"], "evaluation": true}
{"problem_id": 5, "prompt": "def count_ways(n): \n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return count_ways(n - 1) + count_ways(n - 2)", "\ndef count_ways(n): \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return count_ways(n - 1) + count_ways(n - 2) * 2", "\ndef count_ways(n): \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return count_ways(n - 1) + count_ways(n - 2) * 2"], "evaluation": false}
{"problem_id": 6, "prompt": "def differ_At_One_Bit_Pos(a,b): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    return a != b", "\ndef differ_At_One_Bit_Pos(a,b): \n    return a != b", "\ndef differ_At_One_Bit_Pos(a,b): \n    return a != b"], "evaluation": false}
{"problem_id": 7, "prompt": "import re\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)", "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)", "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"], "evaluation": true}
{"problem_id": 8, "prompt": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))", "\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))", "\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))"], "evaluation": true}
{"problem_id": 9, "prompt": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    def is_rotation(s1, s2):\n        return s1 in (s2 + s2)\n\n    min_rotations = 0\n    for i in range(len(str)):\n        if is_rotation(str, str[i:] + str[:i]):\n            min_rotations = i\n            break\n    return min_rotations", "\ndef find_Rotations(str): \n    def is_rotation(s1, s2):\n        return s1 in (s2 + s2)\n\n    rotations = 0\n    for i in range(len(str)):\n        if is_rotation(str, str[i:] + str[:i]):\n            return rotations\n        rotations += 1\n\n    return -1", "\ndef find_Rotations(str): \n    def is_rotation(s1, s2):\n        return s1 in (s2 + s2)\n\n    min_rotations = 0\n    for i in range(len(str)):\n        if is_rotation(str, str[i:] + str[:i]):\n            min_rotations = i\n            break\n    return min_rotations"], "evaluation": false}
{"problem_id": 10, "prompt": "import heapq\ndef small_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n    return heapq.nsmallest(n, list1)", "import heapq\n\ndef small_nnum(list1,n):\n    return heapq.nsmallest(n, list1)", "import heapq\n\ndef small_nnum(list1,n):\n    return heapq.nsmallest(n, list1)"], "evaluation": true}
{"problem_id": 11, "prompt": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1 and first_occurrence != last_occurrence:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    elif first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n    elif last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence+1:]\n    else:\n        s = s\n        \n    return s", "\ndef remove_Occ(s,ch): \n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1 and first_occurrence != last_occurrence:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    elif first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n    elif last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence+1:]\n    else:\n        s = s\n    return s", "\ndef remove_Occ(s,ch): \n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1 and first_occurrence != last_occurrence:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    elif first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n    elif last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence+1:]\n    else:\n        s = s\n        \n    return s"], "evaluation": true}
{"problem_id": 12, "prompt": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(cols-j-1):\n                if sum(M[i]) > sum(M[i+1]):\n                    M[i], M[i+1] = M[i+1], M[i]\n    return M", "\ndef sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols):\n            M[i][j] = sum(M[i])\n    M.sort()\n    return M", "\ndef sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(cols-j-1):\n                if sum(M[i]) > sum(M[i+1]):\n                    M[i], M[i+1] = M[i+1], M[i]\n    return M"], "evaluation": false}
{"problem_id": 13, "prompt": "from collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common = word_counts.most_common(1)\n    return most_common[0]", "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common = word_counts.most_common(1)\n    return most_common[0]", "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common = word_counts.most_common(1)\n    return most_common[0][0]"], "evaluation": false}
{"problem_id": 14, "prompt": "def find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    return l * b * h", "\ndef find_Volume(l,b,h) : \n    return l*b*h", "\ndef find_Volume(l,b,h) : \n    return l * b * h"], "evaluation": false}
{"problem_id": 15, "prompt": "import re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n    return re.split('(?=[a-z])', text)", "import re\n\ndef split_lowerstring(text):\n    return re.split('(?=[a-z])', text)", "import re\n\ndef split_lowerstring(text):\n    return re.split('(?<=[a-z])', text)"], "evaluation": false}
{"problem_id": 16, "prompt": "import re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return matches", "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return matches", "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return matches"], "evaluation": false}
{"problem_id": 17, "prompt": "def square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    return 4 * a", "\ndef square_perimeter(a):\n    return 4 * a", "\ndef square_perimeter(a):\n    return 4 * a"], "evaluation": true}
{"problem_id": 18, "prompt": "NO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n    second_set = set(second_string)\n    return ''.join(ch for ch in string if ch not in second_set)", "\ndef remove_dirty_chars(string, second_string): \n    second_set = set(second_string)\n    return ''.join(ch for ch in string if ch not in second_set)", "\ndef remove_dirty_chars(string, second_string): \n    second_set = set(second_string)\n    return ''.join(ch for ch in string if ch not in second_set)"], "evaluation": true}
{"problem_id": 19, "prompt": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"], "evaluation": true}
{"problem_id": 20, "prompt": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return False\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    elif x == 6:\n        return False\n    elif x == 7:\n        return False\n    elif x == 8:\n        return False\n    elif x == 9:\n        return False\n    elif x == 10:\n        return False\n    elif x == 11:\n        return False\n    elif x == 12:\n        return False\n    elif x == 13:\n        return False\n    elif x == 14:\n        return False\n    elif x == 15:\n        return False\n    elif x == 16:\n        return False\n    elif x == 17:\n        return False\n    elif x == 18:\n        return False\n    elif x == 19:\n        return False\n    elif x == 20:\n        return False\n    elif x == 21:\n        return False\n    elif x == 22:\n        return False\n    elif x == 23:\n        return False\n    elif x == 24:\n        return False\n    elif x == 25:\n        return False\n    elif x == 26:\n        return False\n    elif x == 27:\n        return False\n    elif x == 28:\n        return False\n    elif x == 29:\n        return False\n    elif x == 30:\n        return False\n    elif x == 31:\n        return False\n    elif x == 32:\n        return False\n    elif x == 33:\n        return False\n    elif x == 34:\n        return False\n    elif x == 35:\n        return False\n    elif x == 36:\n        return False\n    elif x == 37:\n        return False\n    elif x == 38:\n        return False\n    elif x == 39:\n        return False\n    elif x == 40:\n        return False\n    elif x == 41:\n        return False\n    elif x == 42:", "\ndef is_woodall(x): \n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return False\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    elif x == 6:\n        return False\n    elif x == 7:\n        return False\n    elif x == 8:\n        return False\n    elif x == 9:\n        return False\n    elif x == 10:\n        return False\n    elif x == 11:\n        return False\n    elif x == 12:\n        return False\n    elif x == 13:\n        return False\n    elif x == 14:\n        return False\n    elif x == 15:\n        return False\n    elif x == 16:\n        return False\n    elif x == 17:\n        return False\n    elif x == 18:\n        return False\n    elif x == 19:\n        return False\n    elif x == 20:\n        return False\n    elif x == 21:\n        return False\n    elif x == 22:\n        return False\n    elif x == 23:\n        return False\n    elif x == 24:\n        return False\n    elif x == 25:\n        return False\n    elif x == 26:\n        return False\n    elif x == 27:\n        return False\n    elif x == 28:\n        return False\n    elif x == 29:\n        return False\n    elif x == 30:\n        return False\n    elif x == 31:\n        return False\n    elif x == 32:\n        return False\n    elif x == 33:\n        return False\n    elif x == 34:\n        return False\n    elif x == 35:\n        return False\n    elif x == 36:\n        return False\n    elif x == 37:\n        return False\n    elif x == 38:\n        return False\n    elif x == 39:\n        return False\n    elif x == 40:\n        return False\n    else:\n        return True", "\ndef is_woodall(x): \n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return False\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    elif x == 6:\n        return False\n    elif x == 7:\n        return False\n    elif x == 8:\n        return False\n    elif x == 9:\n        return False\n    elif x == 10:\n        return False\n    elif x == 11:\n        return False\n    elif x == 12:\n        return False\n    elif x == 13:\n        return False\n    elif x == 14:\n        return False\n    elif x == 15:\n        return False\n    elif x == 16:\n        return False\n    elif x == 17:\n        return False\n    elif x == 18:\n        return False\n    elif x == 19:\n        return False\n    elif x == 20:\n        return False\n    elif x == 21:\n        return False\n    elif x == 22:\n        return False\n    elif x == 23:\n        return False\n    elif x == 24:\n        return False\n    elif x == 25:\n        return False\n    elif x == 26:\n        return False\n    elif x == 27:\n        return False\n    elif x == 28:\n        return False\n    elif x == 29:\n        return False\n    elif x == 30:\n        return False\n    elif x == 31:\n        return False\n    elif x == 32:\n        return False\n    elif x == 33:\n        return False\n    elif x == 34:\n        return False\n    elif x == 35:\n        return False\n    elif x == 36:\n        return False\n    elif x == 37:\n        return False\n    elif x == 38:\n        return False\n    elif x == 39:\n        return False\n    elif x == 40:\n        return False\n    elif x == 41:\n        return False\n    else:\n        return False"], "evaluation": false}
{"problem_id": 21, "prompt": "def multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    return [n*i for i in range(1, m+1)]", "\ndef multiples_of_num(m,n): \n    return [n*i for i in range(1,m+1)]", "\ndef multiples_of_num(m,n): \n    return [n*i for i in range(1, m+1)]"], "evaluation": true}
{"problem_id": 22, "prompt": "def find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None", "\ndef find_first_duplicate(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None", "\ndef find_first_duplicate(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None"], "evaluation": false}
{"problem_id": 23, "prompt": "def maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    max_sum = 0\n    for sublist in list1:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n    return max_sum", "\ndef maximum_Sum(list1): \n    max_sum = 0\n    for sublist in list1:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n    return max_sum", "\ndef maximum_Sum(list1): \n    max_sum = 0\n    for sublist in list1:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n    return max_sum"], "evaluation": true}
{"problem_id": 24, "prompt": "def binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal", "\ndef binary_to_decimal(binary): \n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal", "\ndef binary_to_decimal(binary): \n    binary = str(binary)\n    decimal = 0\n    for digit in binary: \n        decimal = decimal*2 + int(digit)\n    return decimal"], "evaluation": true}
{"problem_id": 25, "prompt": "def find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    return product", "\ndef find_Product(arr,n): \n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    return product", "\ndef find_Product(arr,n): \n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    if product == 1:\n        return -1\n    else:\n        return product"], "evaluation": true}
{"problem_id": 26, "prompt": "def check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    return all(len(lst) == K for lst in test_list)", "\ndef check_k_elements(test_list, K):\n    return all(len(lst) == K for lst in test_list)", "\ndef check_k_elements(test_list, K):\n    return all(len(lst) == K for lst in test_list)"], "evaluation": false}
{"problem_id": 27, "prompt": "import re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    return [''.join(re.sub(r'\\d', '', s) for s in list) for s in list]", "import re  \n\ndef remove(list): \n    return [''.join(re.sub(r'\\d', '', s) for s in list) for s in list]", "import re  \n\ndef remove(list): \n    return [''.join(re.sub(r'\\d', '', word) for word in list)"], "evaluation": false}
{"problem_id": 28, "prompt": "def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    if k>n or k<0 or n<0:\n        return \"Invalid input\"\n    if k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)", "\ndef binomial_Coeff(n,k): \n    if k>n or k<0 or n<0:\n        return \"Invalid input\"\n    if k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)", "\ndef binomial_Coeff(n,k): \n    if k>n or k<0 or n<0:\n        return \"Invalid input\"\n    if k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"], "evaluation": true}
{"problem_id": 29, "prompt": "def get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    res = [0]*32\n    for i in range(0, arr_size):\n        bit = (arr[i] & 1)\n        res[bit] = res[bit] + 1\n\n    res[0] = arr_size - res[0]\n    res[1] = arr_size - res[1]\n\n    res[0] = min(res[0], res[1])\n    res[1] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[2])\n    res[2] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[3])\n    res[3] = min(res[0], res[2])\n\n    res[0] = min(res[0], res[4])\n    res[4] = min(res[0], res[3])\n\n    res[0] = min(res[0], res[5])\n    res[5] = min(res[0], res[4])\n\n    res[0] = min(res[0], res[6])\n    res[6] = min(res[0], res[5])\n\n    res[0] = min(res[0], res[7])\n    res[7] = min(res[0], res[6])\n\n    res[0] = min(res[0], res[8])\n    res[8] = min(res[0], res[7])\n\n    res[0] = min(res[0], res[9])\n    res[9] = min(res[0], res[8])\n\n    res[0] = min(res[0], res[10])\n    res[10] = min(res[0], res[9])\n\n    res[0] = min(res[0], res[11])\n    res[11] = min(res[0], res[10])\n\n    res[0] = min(res[0], res[12])\n    res[12] = min(res[0], res[11])\n\n    res[", "\ndef get_Odd_Occurrence(arr,arr_size):   \n    res = [0]*32\n    for i in range(0, arr_size):\n        bit = (arr[i] & 1)\n        res[bit] = res[bit] + 1\n\n    res[0] = arr_size - res[0]\n    res[1] = arr_size - res[1]\n\n    res[0] = min(res[0], res[1])\n    res[1] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[2])\n    res[2] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[3])\n    res[3] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[4])\n    res[4] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[5])\n    res[5] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[6])\n    res[6] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[7])\n    res[7] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[8])\n    res[8] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[9])\n    res[9] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[10])\n    res[10] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[11])\n    res[11] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[12])\n    res[12] = min(res[0], res[1])\n\n    res[0]", "\ndef get_Odd_Occurrence(arr,arr_size):   \n    res = [0]*32\n    for i in range(0, arr_size):\n        bit = (arr[i] & 1)\n        res[bit] = res[bit] + 1\n\n    res[0] = arr_size - res[0]\n    res[1] = arr_size - res[1]\n\n    res[0] = min(res[0], res[1])\n    res[1] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[2])\n    res[2] = min(res[0], res[1])\n\n    res[0] = min(res[0], res[3])\n    res[3] = min(res[0], res[2])\n\n    res[0] = min(res[0], res[4])\n    res[4] = min(res[0], res[3])\n\n    res[0] = min(res[0], res[5])\n    res[5] = min(res[0], res[4])\n\n    res[0] = min(res[0], res[6])\n    res[6] = min(res[0], res[5])\n\n    res[0] = min(res[0], res[7])\n    res[7] = min(res[0], res[6])\n\n    res[0] = min(res[0], res[8])\n    res[8] = min(res[0], res[7])\n\n    res[0] = min(res[0], res[9])\n    res[9] = min(res[0], res[8])\n\n    res[1] = min(res[1], res[2])\n    res[2] = min(res[1], res[3])\n\n    res[1] = min(res[1], res[4])\n    res[4] = min(res[1], res[5])\n\n    res[1] = min(res[1], res[6])\n    res[6] = min(res[1], res[7])\n\n    res[1] = min(res[1"], "evaluation": false}
{"problem_id": 30, "prompt": "def count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count", "\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    length = len(s)\n    for i in range(length):\n        for j in range(i+2, length+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count", "\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 31, "prompt": "def func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    from collections import Counter\n    import heapq\n\n    def top_k_frequent(nums, k):\n        count = Counter(nums)\n        heap = []\n        for num, freq in count.items():\n            if len(heap) < k:\n                heapq.heappush(heap, (freq, num))\n            else:\n                if freq > heap[0][0]:\n                    heapq.heapreplace(heap, (freq, num))\n        return [x[1] for x in heap]\n\n    return top_k_frequent(nums, k)", "\ndef func(nums, k):\n    from collections import Counter\n    import heapq\n\n    def top_k_frequent(nums, k):\n        count = Counter(nums)\n        heap = []\n        for num, freq in count.items():\n            if len(heap) < k:\n                heapq.heappush(heap, (freq, num))\n            else:\n                if freq > heap[0][0]:\n                    heapq.heapreplace(heap, (freq, num))\n        return [x[1] for x in heap]\n\n    return top_k_frequent(nums, k)", "\ndef func(nums, k):\n    from collections import Counter\n    import heapq\n\n    def top_k_frequent(nums, k):\n        count = Counter(nums)\n        heap = []\n        for num, freq in count.items():\n            if len(heap) < k:\n                heapq.heappush(heap, (freq, num))\n            else:\n                if freq > heap[0][0]:\n                    heapq.heapreplace(heap, (freq, num))\n        return [x[1] for x in heap]\n\n    return top_k_frequent(nums, k)"], "evaluation": false}
{"problem_id": 32, "prompt": "import math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n    max_prime = -1\n    while n % 2 == 0: \n        max_prime = 2\n        n >>= 1\n  \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            max_prime = i \n            n = n / i \n  \n    if n > 2: \n        max_prime = n \n  \n    return int(max_prime)", "import math \n\ndef max_Prime_Factors (n): \n    max_prime = -1\n    while n % 2 == 0: \n        max_prime = 2\n        n >>= 1\n  \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            max_prime = i \n            n = n / i \n  \n    if n > 2: \n        max_prime = n \n  \n    return int(max_prime)", "import math \n\ndef max_Prime_Factors (n): \n    max_prime = -1\n    while n % 2 == 0: \n        max_prime = 2\n        n >>= 1\n  \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            max_prime = i \n            n = n / i \n  \n    if n > 2: \n        max_prime = n \n  \n    return int(max_prime)"], "evaluation": true}
{"problem_id": 33, "prompt": "def decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N > 1: \n        decimal_To_Binary(N // 2) \n    print(N % 2, end = '')", "\ndef decimal_To_Binary(N): \n    if N >= 1:\n        decimal_To_Binary(N // 2)\n        print(N % 2, end = '')", "\ndef decimal_To_Binary(N): \n    if N >= 1:\n        decimal_To_Binary(N // 2)\n    print(N % 2, end = '')"], "evaluation": false}
{"problem_id": 34, "prompt": "def find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    # Initialize the left and right pointers\n    l = 0\n    r = len(ar) - 1\n  \n    while l <= r:\n        mid = (l + r) // 2\n  \n        # If the mid element is not at its correct position\n        if ar[mid] != mid:\n  \n            # If the mid element is greater than or equal to the length of the array\n            if ar[mid] >= len(ar):\n                r = mid - 1\n  \n            # If the mid element is less than the length of the array\n            else:\n                l = mid + 1\n  \n        # If the mid element is at its correct position\n        else:\n            if ar[mid - 1] == mid - 1:\n                l = mid + 1\n            else:\n                return mid\n  \n    return -1", "\ndef find_missing(ar,N): \n    # Initialize the left and right pointers\n    l = 0\n    r = len(ar) - 1\n  \n    while l <= r:\n        mid = (l + r) // 2\n  \n        # If the mid element is not at its correct position\n        if ar[mid] != mid:\n  \n            # If the mid element is greater than or equal to the length of the array\n            if ar[mid] >= len(ar):\n                r = mid - 1\n  \n            # If the mid element is smaller than the length of the array\n            else:\n                l = mid + 1\n  \n        # If the mid element is at its correct position\n        else:\n            if ar[mid - 1] == mid - 1:\n                l = mid + 1\n            else:\n                return mid\n  \n    return -1", "\ndef find_missing(ar,N): \n    # Initialize the left and right pointers\n    l = 0\n    r = len(ar) - 1\n  \n    while l <= r:\n        mid = (l + r) // 2\n  \n        # If the mid element is not at its correct position\n        if ar[mid] != mid:\n  \n            # If the mid element is greater than or equal to the length of the array\n            if ar[mid] >= len(ar):\n                r = mid - 1\n  \n            # If the mid element is less than the length of the array\n            else:\n                l = mid + 1\n  \n        # If the mid element is at its correct position\n        else:\n            if ar[mid - 1] == mid - 1:\n                l = mid + 1\n            else:\n                return mid\n  \n    return -1"], "evaluation": false}
{"problem_id": 35, "prompt": "def find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    i = 1\n    while True:\n        rect_num = i * (i + 1) // 2\n        if rect_num == n:\n            return rect_num\n        elif rect_num < n:\n            i += 1\n        else:\n            return rect_num - 1", "\ndef find_rect_num(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    i = 1\n    while True:\n        rect_num = i * (i + 1) // 2\n        if rect_num == n:\n            return rect_num\n        elif rect_num < n:\n            i += 1\n        else:\n            return rect_num - 1", "\ndef find_rect_num(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    i = 1\n    while True:\n        rect_num = i * (i + 1) // 2\n        if rect_num == n:\n            return rect_num\n        elif rect_num < n:\n            i += 1\n        else:\n            return rect_num - 1"], "evaluation": false}
{"problem_id": 36, "prompt": "def find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n    def find_Nth_Digit(p,q,N) :\n        if p == q :\n            return str(p)[N-1]\n        else :\n            length = len(str(p)) + len(str(q))\n            base = pow(10,length//2)\n            half = pow(10,length//2+length%2)\n            a = p // base\n            b = p % base\n            c = q // base\n            d = q % base\n            if N <= a :\n                return find_Nth_Digit(b,c,N)\n            else :\n                N -= a\n                return find_Nth_Digit(d,c,N)\n    return find_Nth_Digit(p,q,N)", "\ndef find_Nth_Digit(p,q,N) :  \n    def find_Nth_Digit(p,q,N) :\n        if p == q :\n            return str(p)[N-1]\n        else :\n            length = len(str(p)) + len(str(q))\n            base = pow(10,length//2)\n            half = pow(10,length//2+length%2)\n            a = p // base\n            b = p % base\n            c = q // base\n            d = q % base\n            if N <= a :\n                return find_Nth_Digit(b,d,N)\n            else :\n                N -= a\n                return find_Nth_Digit(d,c,N)\n    return find_Nth_Digit(p,q,N)", "\ndef find_Nth_Digit(p,q,N) :  \n    def find_Nth_Digit(p,q,N) :\n        if p == q :\n            return str(p)[N-1]\n        else :\n            length = len(str(p)) + len(str(q))\n            base = pow(10,length // 2)\n            half = pow(10,length // 2 +  length % 2)\n            a = p // base\n            b = p % base\n            c = q // base\n            d = q % base\n            if N <= a :\n                return find_Nth_Digit(b,d,N)\n            else :\n                N -= a\n                return find_Nth_Digit(d,c,N)\n    return find_Nth_Digit(p,q,N)"], "evaluation": false}
{"problem_id": 37, "prompt": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    str_list = []\n    int_list = []\n\n    for i in mixed_list:\n        if isinstance(i, str):\n            str_list.append(i)\n        elif isinstance(i, int):\n            int_list.append(i)\n\n    str_list.sort()\n    int_list.sort()\n\n    return str_list + int_list", "\ndef sort_mixed_list(mixed_list):\n    str_list = []\n    int_list = []\n\n    for i in mixed_list:\n        if isinstance(i, str):\n            str_list.append(i)\n        elif isinstance(i, int):\n            int_list.append(i)\n\n    str_list.sort()\n    int_list.sort()\n\n    return str_list + int_list", "\ndef sort_mixed_list(mixed_list):\n    str_list = []\n    int_list = []\n    for i in mixed_list:\n        if isinstance(i, int):\n            int_list.append(i)\n        elif isinstance(i, str):\n            str_list.append(i)\n    int_list.sort()\n    str_list.sort()\n    return int_list + str_list"], "evaluation": false}
{"problem_id": 38, "prompt": "def div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > odd_count:\n        return even_count / odd_count\n    else:\n        return odd_count / even_count", "\ndef div_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > odd_count:\n        return even_count / odd_count\n    else:\n        return odd_count / even_count", "\ndef div_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > odd_count:\n        return even_count / odd_count\n    else:\n        return odd_count / even_count"], "evaluation": false}
{"problem_id": 39, "prompt": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    count = Counter(S)\n    max_heap = []\n    for k, v in count.items():\n        heapq.heappush(max_heap, (-v, k))\n    result = []\n    while len(max_heap) > 1:\n        v1, k1 = heapq.heappop(max_heap)\n        v2, k2 = heapq.heappop(max_heap)\n        result.append(k1)\n        result.append(k2)\n        if v1 < -1:\n            heapq.heappush(max_heap, (v1+1, k1))\n        if v2 < -1:\n            heapq.heappush(max_heap, (v2+1, k2))\n    if max_heap:\n        v, k = heapq.heappop(max_heap)\n        if v < 0:\n            return \"\"\n        result.append(k)\n    return \"\".join(result)", "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    count = Counter(S)\n    max_heap = []\n    for k, v in count.items():\n        heapq.heappush(max_heap, (-v, k))\n    result = []\n    while len(max_heap) > 1:\n        v1, k1 = heapq.heappop(max_heap)\n        v2, k2 = heapq.heappop(max_heap)\n        result.append(k1)\n        result.append(k2)\n        if v1 < -1:\n            heapq.heappush(max_heap, (v1 + 1, k1))\n        if v2 < -1:\n            heapq.heappush(max_heap, (v2 + 1, k2))\n    if max_heap:\n        v, k = heapq.heappop(max_heap)\n        if v < 0:\n            return \"\"\n        result.append(k)\n    return \"\".join(result)", "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    count = Counter(S)\n    max_heap = []\n    for k, v in count.items():\n        heapq.heappush(max_heap, (-v, k))\n    result = []\n    while len(max_heap) > 1:\n        v1, k1 = heapq.heappop(max_heap)\n        v2, k2 = heapq.heappop(max_heap)\n        result.append(k1)\n        result.append(k2)\n        if v1 < -1:\n            heapq.heappush(max_heap, (v1+1, k1))\n        if v2 < -1:\n            heapq.heappush(max_heap, (v2+1, k2))\n    if max_heap:\n        v, k = heapq.heappop(max_heap)\n        if v < 0:\n            return \"\"\n        result.append(k)\n    return ''.join(result)"], "evaluation": false}
{"problem_id": 40, "prompt": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain(*nums))\n    freq_dict = dict(Counter(flat_list))\n    return freq_dict", "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain(*nums))\n    return dict(Counter(flat_list))", "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)"], "evaluation": true}
{"problem_id": 41, "prompt": "def filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "def find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    sum = 0\n    freq = {}\n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n    for key, value in freq.items(): \n        if value > 1: \n            sum += key * value \n    return sum", "\ndef find_Sum(arr,n): \n    sum = 0\n    freq = {}\n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n  \n    for key, value in freq.items(): \n        if value > 1: \n            sum += key * value \n    return sum", "\ndef find_Sum(arr,n): \n    sum = 0\n    freq = {}\n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n  \n    for key, value in freq.items(): \n        if value > 1: \n            sum += key * value \n    return sum"], "evaluation": true}
{"problem_id": 43, "prompt": "import re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return matches", "import re\n\ndef text_match(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return matches", "import re\n\ndef text_match(text):\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches"], "evaluation": false}
{"problem_id": 44, "prompt": "import re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n    pattern = r\"^\\w+\"\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None", "import re\n\ndef text_match_string(text):\n    pattern = r\"^\\w+\"\n    match = re.match(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None", "import re\n\ndef text_match_string(text):\n    pattern = r\"^\\w+\"\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"], "evaluation": false}
{"problem_id": 45, "prompt": "def get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = min(num1, num2)\n\n    while(gcd):\n        if(num1 % gcd == 0 and num2 % gcd == 0):\n            break\n        gcd -= 1\n\n    return gcd", "\ndef get_gcd(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = min(num1, num2)\n\n    while gcd:\n        if num1 % gcd == 0 and num2 % gcd == 0:\n            break\n        gcd -= 1\n\n    return gcd", "\ndef get_gcd(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = min(num1, num2)\n\n    while gcd:\n        if num1 % gcd == 0 and num2 % gcd == 0:\n            break\n        gcd -= 1\n\n    return gcd"], "evaluation": true}
{"problem_id": 46, "prompt": "def test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    return len(data) == len(set(data))", "\ndef test_distinct(data):\n    return len(data) == len(set(data))", "\ndef test_distinct(data):\n    return len(set(data)) == len(data)"], "evaluation": true}
{"problem_id": 47, "prompt": "def compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = factorial(A) % 10\n    last_digit_B = factorial(B) % 10\n\n    if last_digit_A == last_digit_B:\n        return last_digit_A\n    else:\n        return last_digit_A if last_digit_A > last_digit_B else last_digit_B", "\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = factorial(A) % 10\n    last_digit_B = factorial(B) % 10\n\n    if last_digit_A == last_digit_B:\n        return last_digit_A\n    else:\n        return last_digit_A if last_digit_A > last_digit_B else last_digit_B", "\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = factorial(A) % 10\n    last_digit_B = factorial(B) % 10\n\n    if last_digit_A == last_digit_B:\n        return last_digit_A\n    else:\n        return last_digit_A if last_digit_A > last_digit_B else last_digit_B"], "evaluation": false}
{"problem_id": 48, "prompt": "def odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    return n ^ 0x55555555", "\ndef odd_bit_set_number(n):\n    return n ^ 0x55555555", "\ndef odd_bit_set_number(n):\n    return n ^ 0x55555555"], "evaluation": false}
{"problem_id": 49, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if j < N:\n                result.append(nums[i][j])\n    return result", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if j < N:\n                result.append(nums[i][j])\n    return result", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if j < N:\n                result.append(nums[i][j])\n    return result"], "evaluation": false}
{"problem_id": 50, "prompt": "def min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))", "\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))", "\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))"], "evaluation": false}
{"problem_id": 51, "prompt": "def check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    if x == y and y == z:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")", "\ndef check_equilateral(x,y,z):\n    if x == y and y == z:\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")", "\ndef check_equilateral(x,y,z):\n    if x == y and y == z:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")"], "evaluation": false}
{"problem_id": 52, "prompt": "def parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    area = b * h\n    return area", "\ndef parallelogram_area(b,h):\n    return b * h", "\ndef parallelogram_area(b,h):\n    return b * h"], "evaluation": true}
{"problem_id": 53, "prompt": "def check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if len(str) > 1:\n        if str[0] == str[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False", "\ndef check_Equality(str):\n    if len(str) > 1:\n        if str[0] == str[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False", "\ndef check_Equality(str):\n    if len(str) > 1:\n        if str[0] == str[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False"], "evaluation": false}
{"problem_id": 54, "prompt": "def counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    if len(my_list) == 0:\n        return my_list\n\n    max_value = max(my_list)\n    count = [0] * (max_value + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list", "\ndef counting_sort(my_list):\n    if len(my_list) == 0:\n        return my_list\n\n    max_value = max(my_list)\n    count = [0] * (max_value + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list", "\ndef counting_sort(my_list):\n    if len(my_list) == 0:\n        return my_list\n\n    max_value = max(my_list)\n    count = [0] * (max_value + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list"], "evaluation": true}
{"problem_id": 55, "prompt": "import math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n    return a * (1 - r**n) / (1 - r)", "import math\n\ndef tn_gp(a,n,r):\n    return a * (1 - r**n) / (1 - r)", "import math\n\ndef tn_gp(a,n,r):\n    return a * (1 - r**n) / (1 - r)"], "evaluation": false}
{"problem_id": 56, "prompt": "def check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    def reverse(n):\n        return int(str(n)[::-1])\n    \n    return n == 2 * reverse(n) - 1", "\ndef check(n):    \n    def reverse(n):\n        return int(str(n)[::-1])\n\n    return n == 2 * reverse(n) - 1", "\ndef check(n):    \n    def reverse(n):\n        return int(str(n)[::-1])\n    \n    return n == 2 * reverse(n) - 1"], "evaluation": true}
{"problem_id": 57, "prompt": "def find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    arr.sort()\n    max_num = 0\n    for i in range(n) : \n        max_num = max_num*10 + arr[n-i-1]\n    return max_num", "\ndef find_Max_Num(arr,n) : \n    arr.sort()\n    max_num = 0\n    for i in range(n) : \n        max_num = max_num*10 + arr[n-i-1]\n    return max_num", "\ndef find_Max_Num(arr,n) : \n    arr.sort()\n    max_num = 0\n    for i in range(n) : \n        max_num = max_num*10 + arr[n-i-1]\n    return max_num"], "evaluation": true}
{"problem_id": 58, "prompt": "def opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    if ((x < 0 and y > 0) or (x > 0 and y < 0)):\n        return True\n    else:\n        return False", "\ndef opposite_Signs(x,y): \n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False", "\ndef opposite_Signs(x,y): \n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 59, "prompt": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    return n * (7 * n - 5) / 2", "\ndef is_octagonal(n): \n    return n * (7 * n - 5) / 2", "\ndef is_octagonal(n): \n    return n * (7 * n - 5) / 2"], "evaluation": false}
{"problem_id": 60, "prompt": "def max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    if n == 0 or n == 1:\n        return n\n\n    max_len = 1\n    curr_len = 1\n\n    for i in range(1, n):\n        if (arr[i] - arr[i-1] == 1):\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 1\n\n    if curr_len > max_len:\n        max_len = curr_len\n\n    return max_len", "\ndef max_len_sub( arr, n): \n    if n == 0 or n == 1:\n        return n\n\n    max_len = 1\n    curr_len = 1\n\n    for i in range(1, n):\n        if (arr[i] - arr[i-1] == 1):\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 1\n\n    if curr_len > max_len:\n        max_len = curr_len\n\n    return max_len", "\ndef max_len_sub( arr, n): \n    if n == 0 or n == 1:\n        return n\n\n    max_len = 1\n    curr_len = 1\n\n    for i in range(1, n):\n        if (arr[i] - arr[i-1] == 1):\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 1\n\n    if curr_len > max_len:\n        max_len = curr_len\n\n    return max_len"], "evaluation": false}
{"problem_id": 61, "prompt": "from collections import defaultdict\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(c) for c in substring) == len(substring):\n                count_dict[substring] += 1\n    return sum(v for v in count_dict.values())", "from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(c) for c in substring) == len(substring):\n                count_dict[substring] += 1\n    return sum(count_dict.values())", "from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(c) for c in substring) == len(substring):\n                count_dict[substring] += 1\n    return sum(v for v in count_dict.values())"], "evaluation": true}
{"problem_id": 62, "prompt": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    return min(xs)", "\ndef smallest_num(xs):\n    return min(xs)", "\ndef smallest_num(xs):\n    return min(xs)"], "evaluation": true}
{"problem_id": 63, "prompt": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    if len(test_list) < 2:\n        return None\n    min_val = test_list[0]\n    max_diff = test_list[1] - test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_val > max_diff:\n            max_diff = test_list[i] - min_val\n        if test_list[i] < min_val:\n            min_val = test_list[i]\n    return max_diff", "\ndef max_difference(test_list):\n    if len(test_list) < 2:\n        return None\n    min_val = test_list[0]\n    max_diff = test_list[1] - test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_val > max_diff:\n            max_diff = test_list[i] - min_val\n        if test_list[i] < min_val:\n            min_val = test_list[i]\n    return max_diff", "\ndef max_difference(test_list):\n    if len(test_list) < 2:\n        return None\n    min_val = test_list[0]\n    max_diff = test_list[1] - test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_val > max_diff:\n            max_diff = test_list[i] - min_val\n        if test_list[i] < min_val:\n            min_val = test_list[i]\n    return max_diff"], "evaluation": false}
{"problem_id": 64, "prompt": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks", "\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])", "\ndef subject_marks(subjectmarks):\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks"], "evaluation": true}
{"problem_id": 65, "prompt": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])", "\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])", "\ndef recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"], "evaluation": false}
{"problem_id": 66, "prompt": "def pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count", "\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count", "\ndef pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    bell = [0 for _ in range(n+1)]\n    bell[0] = 1\n\n    for i in range(1, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n\n    return bell[n]", "\ndef bell_number(n):   \n    bell = [0 for _ in range(n+1)]\n    bell[0] = 1\n\n    for i in range(1, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n\n    return bell[n]", "\ndef bell_number(n):   \n    bell = [0 for _ in range(n+1)]\n    bell[0] = 1\n\n    for i in range(1, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n\n    return bell[n]"], "evaluation": false}
{"problem_id": 68, "prompt": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))", "\ndef is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))", "\ndef is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))"], "evaluation": true}
{"problem_id": 69, "prompt": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    if s in l:\n        return True\n    else:\n        return False", "\ndef is_sublist(l, s):\n    if s in l:\n        return True\n    else:\n        return False", "\ndef is_sublist(l, s):\n    if s in l:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 70, "prompt": "def get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    return all(len(t) == k for t in Input)", "\ndef get_equal(Input, k):\n    return all(len(i) == k for i in Input)", "\ndef get_equal(Input, k):\n    return all(len(x) == k for x in Input)"], "evaluation": false}
{"problem_id": 71, "prompt": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped == True:\n        gap = gap // 2\n        swapped = False\n        i = 0\n        while i < len(nums) - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums", "\ndef comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped == True:\n        gap = gap // 2\n        swapped = False\n        i = 0\n        while i < len(nums) - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums", "\ndef comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped == True:\n        gap = gap // 2\n        swapped = False\n        i = 0\n        while i < len(nums) - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums"], "evaluation": true}
{"problem_id": 72, "prompt": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    i = 1\n    while i*i <= n:\n        j = 1\n        while j*j <= n:\n            if i*i - j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef dif_Square(n): \n    i = 1\n    while i*i <= n:\n        j = 1\n        while j*j <= n:\n            if i*i - j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef dif_Square(n): \n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i - j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False"], "evaluation": false}
{"problem_id": 73, "prompt": "import re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n    pattern = re.compile(r'\\b(?=(\\w+\\b))+\\b')\n    return pattern.findall(text)", "import re\n\ndef multiple_split(text):\n    pattern = re.compile(r'\\b(?=(\\w+\\b))+\\b')\n    return pattern.findall(text)", "import re\n\ndef multiple_split(text):\n    pattern = re.compile(r'\\b(?=(\\w+\\b))+\\b')\n    return pattern.findall(text)"], "evaluation": false}
{"problem_id": 74, "prompt": "def is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True", "\ndef is_samepatterns(colors, patterns):    \n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True", "\ndef is_samepatterns(colors, patterns):    \n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 75, "prompt": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result", "\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result", "\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"], "evaluation": false}
{"problem_id": 76, "prompt": "def count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    return m*n", "\ndef count_Squares(m,n):\n    return m * n", "\ndef count_Squares(m,n):\n    return m*n"], "evaluation": false}
{"problem_id": 77, "prompt": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum", "\ndef is_Diff(n): \n    even_sum = 0\n    odd_sum = 0\n\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n\n    return even_sum - odd_sum", "\ndef is_Diff(n): \n    even_sum = 0\n    odd_sum = 0\n\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n\n    return even_sum - odd_sum"], "evaluation": false}
{"problem_id": 78, "prompt": "def count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count", "\ndef count_With_Odd_SetBits(n): \n    def count_SetBits(n): \n        count = 0\n        while n: \n            count += n & 1\n            n >>= 1\n        return count\n\n    count = 0\n    for i in range(1, n+1):\n        if count_SetBits(i) % 2 != 0:\n            count += 1\n    return count", "\ndef count_With_Odd_SetBits(n): \n    def count_SetBits(n): \n        count = 0\n        while (n): \n            count += n & 1\n            n >>= 1\n        return count\n\n    count = 0\n    for i in range(1, n+1):\n        if count_SetBits(i) % 2 != 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 79, "prompt": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"", "\ndef word_len(s): \n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"", "\ndef word_len(s): \n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""], "evaluation": false}
{"problem_id": 80, "prompt": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    return n * (n + 1) * (n + 2) // 6", "\ndef tetrahedral_number(n): \n    return n * (n + 1) * (n + 2) // 6", "\ndef tetrahedral_number(n): \n    return n * (n + 1) * (n + 2) // 6"], "evaluation": true}
{"problem_id": 81, "prompt": "def zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))", "\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))", "\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))"], "evaluation": false}
{"problem_id": 82, "prompt": "import math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n    volume = (4/3) * math.pi * (r**3)\n    return volume", "import math\n\ndef volume_sphere(r):\n    volume = (4/3) * math.pi * (r**3)\n    return volume", "import math\n\ndef volume_sphere(r):\n    volume = (4/3) * math.pi * (r**3)\n    return volume"], "evaluation": true}
{"problem_id": 83, "prompt": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr(result)", "\ndef get_Char(strr):  \n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr(result)", "\ndef get_Char(strr):  \n    result = 0\n    for char in strr:\n        result += ord(char)\n    return result"], "evaluation": false}
{"problem_id": 84, "prompt": "def sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        sequence = [2, 1]\n        for i in range(2, n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[n-1]", "\ndef sequence(n): \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        seq = [2, 1]\n        for i in range(2, n):\n            seq.append(seq[i-1] + seq[i-2])\n        return seq[-1]", "\ndef sequence(n): \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        seq = [2, 1]\n        for i in range(2, n):\n            seq.append(seq[i-1] + seq[i-2])\n        return seq[-1]"], "evaluation": false}
{"problem_id": 85, "prompt": "import math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n    surfacearea = 4 * math.pi * r**2\n    return surfacearea", "import math\n\ndef surfacearea_sphere(r):\n    surfacearea = 4 * math.pi * r**2\n    return surfacearea", "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2"], "evaluation": true}
{"problem_id": 86, "prompt": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    return n * (9 * n - 7) // 2", "\ndef centered_hexagonal_number(n):\n    return n * (9 * n - 7) // 2", "\ndef centered_hexagonal_number(n):\n    return n * (9 * n - 7) // 2"], "evaluation": false}
{"problem_id": 87, "prompt": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return {**dict1, **dict2, **dict3}"], "evaluation": false}
{"problem_id": 88, "prompt": "import collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n    return collections.Counter(list1)", "import collections\n\ndef freq_count(list1):\n    count_dict = collections.Counter(list1)\n    return count_dict", "import collections\n\ndef freq_count(list1):\n    count_dict = collections.Counter(list1)\n    return count_dict"], "evaluation": true}
{"problem_id": 89, "prompt": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    # Convert the number to a string\n    str_N = str(N)\n\n    # Get the length of the string\n    length = len(str_N)\n\n    # If the length of the string is 1, return the number itself\n    if length == 1:\n        return N\n\n    # If the length of the string is 2, return the number itself\n    if length == 2:\n        return int(str_N[0]) if str_N[1] < str_N[0] else int(str_N[1] + str_N[0])\n\n    # If the length of the string is greater than 2\n    for i in range(length - 1, 0, -1):\n        if str_N[i] < str_N[i - 1]:\n            for j in range(i - 1, -1, -1):\n                if str_N[j] < str_N[i]:\n                    str_N = str_N[:j] + str_N[i-1:i+1][::-1] + str_N[j+1:]\n                    return int(str_N)\n            return int(str_N[:i] + str_N[i-1:i+1][::-1] + str_N[i+1:])\n\n    return int(str_N[:1] + str_N[1:])", "\ndef closest_num(N):\n    # Convert the number to a string\n    str_N = str(N)\n\n    # Get the length of the string\n    length = len(str_N)\n\n    # If the length of the string is 1, return the number itself\n    if length == 1:\n        return N\n\n    # If the length of the string is 2, return the number itself\n    if length == 2:\n        return int(str_N[0]) if str_N[1] < str_N[0] else int(str_N[1] + str_N[0])\n\n    # If the length of the string is greater than 2\n    for i in range(length - 1, 0, -1):\n        if str_N[i] < str_N[i - 1]:\n            for j in range(i - 1, -1, -1):\n                if str_N[j] < str_N[i]:\n                    str_N = str_N[:j] + str_N[i-1:i+1][::-1] + str_N[j+1:]\n                    return int(str_N)\n            return int(str_N[:i] + str_N[i-1:i+1][::-1] + str_N[i+1:])\n    return int(str_N + str_N[0] + str_N[1:])", "\ndef closest_num(N):\n    # Convert the number to a string\n    str_N = str(N)\n\n    # Get the length of the string\n    length = len(str_N)\n\n    # If the length of the string is 1, return the number itself\n    if length == 1:\n        return N\n\n    # If the length of the string is 2, return the number itself\n    if length == 2:\n        return int(str_N[0]) if str_N[1] < str_N[0] else int(str_N[1] + str_N[0])\n\n    # If the length of the string is greater than 2\n    for i in range(length - 1, 0, -1):\n        if str_N[i] < str_N[i - 1]:\n            for j in range(i - 1, -1, -1):\n                if str_N[j] < str_N[i]:\n                    str_N = str_N[:j] + str_N[i-1:i+1][::-1] + str_N[j+1:]\n                    return int(str_N)\n            return int(str_N[:i] + str_N[i-1:i+1][::-1] + str_N[i+1:])\n    return int(str_N + str_N[0] + str_N[1:])"], "evaluation": false}
{"problem_id": 90, "prompt": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    longest_word = max(list1, key=len)\n    return len(longest_word)", "\ndef len_log(list1):\n    longest_word = max(list1, key=len)\n    return len(longest_word)", "\ndef len_log(list1):\n    longest_word = max(list1, key=len)\n    return len(longest_word)"], "evaluation": true}
{"problem_id": 91, "prompt": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False", "\ndef find_substring(str1, sub_str):\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False", "\ndef find_substring(str1, sub_str):\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 92, "prompt": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    if n < 1:\n        return False\n\n    str_n = str(n)\n    len_n = len(str_n)\n\n    for i in range(len_n - 1):\n        if abs(int(str_n[i]) - int(str_n[i + 1])) != 1:\n            return False\n\n    return True", "\ndef is_undulating(n): \n    if n < 1:\n        return False\n\n    str_n = str(n)\n    len_n = len(str_n)\n\n    for i in range(len_n - 1):\n        if abs(int(str_n[i]) - int(str_n[i + 1])) != 1:\n            return False\n\n    return True", "\ndef is_undulating(n): \n    if n < 1:\n        return False\n\n    str_n = str(n)\n    len_n = len(str_n)\n\n    for i in range(len_n - 1):\n        if abs(int(str_n[i]) - int(str_n[i + 1])) != 1:\n            return False\n\n    return True"], "evaluation": false}
{"problem_id": 93, "prompt": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    return a**b", "\ndef power(a,b):\n    return a**b", "\ndef power(a,b):\n    return a ** b"], "evaluation": true}
{"problem_id": 94, "prompt": "from operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]", "from operator import itemgetter \n\ndef index_minimum(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]", "from operator import itemgetter \n\ndef index_minimum(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]"], "evaluation": false}
{"problem_id": 95, "prompt": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length", "\ndef Find_Min_Length(lst):  \n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length", "\ndef Find_Min_Length(lst):  \n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"], "evaluation": true}
{"problem_id": 96, "prompt": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 97, "prompt": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict", "\ndef frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict", "\ndef frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"], "evaluation": true}
{"problem_id": 98, "prompt": "def multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    return sum(numbers) / len(numbers)", "\ndef multiply_num(numbers):  \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "\ndef multiply_num(numbers):  \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"], "evaluation": false}
{"problem_id": 99, "prompt": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\", \"\")", "\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\", \"\")", "\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\", \"\")"], "evaluation": true}
{"problem_id": 100, "prompt": "import sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def increment(n):\n        return int(str(n) + str(n)[::-1])\n\n    if not is_palindrome(num):\n        num = increment(num)\n        while not is_palindrome(num):\n            num = increment(num)\n    return num", "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def increment(n):\n        return int(str(n) + str(n)[::-1])\n\n    if not is_palindrome(num):\n        num = increment(num)\n        while not is_palindrome(num):\n            num = increment(num)\n    return num", "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def increment(n):\n        return int(str(n) + str(n)[::-1])\n\n    if not is_palindrome(num):\n        num = increment(num)\n        while not is_palindrome(num):\n            num = increment(num)\n        return num\n    else:\n        return increment(num)"], "evaluation": false}
{"problem_id": 101, "prompt": "def kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    if k > n:\n        return None\n    else:\n        return arr[k-1]", "\ndef kth_element(arr, n, k):\n    if k <= n:\n        return arr[k-1]\n    else:\n        return None", "\ndef kth_element(arr, n, k):\n    if k > n:\n        return None\n    else:\n        return arr[k-1]"], "evaluation": true}
{"problem_id": 102, "prompt": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    words = word.split('_')\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n    return ''.join(words)", "\ndef snake_to_camel(word):\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])", "\ndef snake_to_camel(word):\n    words = word.split('_')\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n    return ''.join(words)"], "evaluation": false}
{"problem_id": 103, "prompt": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    if n == 0 and m == 0:\n        return 0\n    elif m == 0:\n        return eulerian_num(n-1, 1)\n    else:\n        return n + eulerian_num(n-1, eulerian_num(n, m-1))", "\ndef eulerian_num(n, m): \n    if n == 0 and m == 0:\n        return 0\n    elif m == 0:\n        return eulerian_num(n-1, 1)\n    else:\n        return n + eulerian_num(n-1, eulerian_num(n, m-1))", "\ndef eulerian_num(n, m): \n    if n == 0 and m == 0:\n        return 0\n    elif n == 0:\n        return m - 1\n    elif m == 0:\n        return n - 1\n    else:\n        return eulerian_num(n - 1, m - 1) + n + m - 1"], "evaluation": false}
{"problem_id": 104, "prompt": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    input_list.sort(key=lambda x: x[0])\n    return input_list", "\ndef sort_sublists(input_list):\n    input_list.sort(key=lambda x: x[0])\n    return input_list", "\ndef sort_sublists(input_list):\n    input_list.sort(key=lambda x: x[0])\n    return input_list"], "evaluation": false}
{"problem_id": 105, "prompt": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count", "\ndef count(lst):   \n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count", "\ndef count(lst):   \n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 106, "prompt": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)", "\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)", "\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)"], "evaluation": false}
{"problem_id": 107, "prompt": "def count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1) :\n        if '0' <= str(hex(i))[2:] <= '9' or 'A' <= str(hex(i))[2:] <= 'F' or 'a' <= str(hex(i))[2:] <= 'f' :\n            count += 1\n    return count", "\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1) :\n        if '0' <= str(hex(i))[2:] <= '9' or 'A' <= str(hex(i))[2:] <= 'F' or 'a' <= str(hex(i))[2:] <= 'f' :\n            count += 1\n    return count", "\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1) :\n        if '0' <= str(hex(i))[2:] <= '9' or 'A' <= str(hex(i))[2:] <= 'F' or 'a' <= str(hex(i))[2:] <= 'f' :\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    merged_list = []\n    while num1 or num2 or num3:\n        if num1 and num2:\n            if num1[0] <= num2[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num2))\n        elif num1 and num3:\n            if num1[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num2 and num3:\n            if num2[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num1:\n            merged_list.append(heapq.heappop(num1))\n        elif num2:\n            merged_list.append(heapq.heappop(num2))\n        elif num3:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list", "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    merged_list = []\n    while num1 or num2 or num3:\n        if num1 and num2:\n            if num1[0] <= num2[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num2))\n        elif num1 and num3:\n            if num1[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num2 and num3:\n            if num2[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num1:\n            merged_list.append(heapq.heappop(num1))\n        elif num2:\n            merged_list.append(heapq.heappop(num2))\n        elif num3:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list", "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    merged_list = []\n    while num1 or num2 or num3:\n        if num1 and num2:\n            if num1[0] <= num2[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num2))\n        elif num1 and num3:\n            if num1[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num2 and num3:\n            if num2[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num1:\n            merged_list.append(heapq.heappop(num1))\n        elif num2:\n            merged_list.append(heapq.heappop(num2))\n        elif num3:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list"], "evaluation": false}
{"problem_id": 109, "prompt": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        if s[i] == '1' and s[(i+1)%n] == '0' and s[(i+2)%n] == '1':\n            count += 1\n    return count", "\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        if s[i] == '1' and s[(i+1)%n] == '0' and s[(i+2)%n] == '1':\n            count += 1\n    return count", "\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        if s[i] == '1' and s[(i+1)%n] == '0' and s[(i+2)%n] == '1':\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 110, "prompt": "def extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    missing_ranges = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_ranges.append(i)\n    return missing_ranges", "\ndef extract_missing(test_list, strt_val, stop_val):\n    missing_ranges = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_ranges.append(i)\n    return missing_ranges", "\ndef extract_missing(test_list, strt_val, stop_val):\n    missing_ranges = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_ranges.append(i)\n    return missing_ranges"], "evaluation": false}
{"problem_id": 111, "prompt": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    return list(set(flat_list))", "\ndef common_in_nested_lists(nestedlist):\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    return list(set(flat_list))", "\ndef common_in_nested_lists(nestedlist):\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    return list(set(flat_list))"], "evaluation": false}
{"problem_id": 112, "prompt": "def perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    import math\n    radius = diameter / 2\n    perimeter = 2 * math.pi * radius * (radius + height)\n    return perimeter", "\ndef perimeter(diameter,height) : \n    import math\n    radius = diameter / 2\n    perimeter = 2 * math.pi * radius * (radius + height)\n    return perimeter", "\ndef perimeter(diameter,height) : \n    import math\n    radius = diameter / 2\n    perimeter = 2 * math.pi * radius * (radius + height)\n    return perimeter"], "evaluation": false}
{"problem_id": 113, "prompt": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"], "evaluation": true}
{"problem_id": 114, "prompt": "from collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict", "from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict", "from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = dict()\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"], "evaluation": false}
{"problem_id": 115, "prompt": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    for i in list1:\n        if i:\n            return False\n    return True", "\ndef empty_dit(list1):\n    for i in list1:\n        if i:\n            return False\n    return True", "\ndef empty_dit(list1):\n    for i in list1:\n        if i:\n            return False\n    return True"], "evaluation": true}
{"problem_id": 116, "prompt": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    return int(''.join(str(num) for num in nums))", "\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))", "\ndef tuple_to_int(nums):\n    return int(''.join(str(num) for num in nums))"], "evaluation": true}
{"problem_id": 117, "prompt": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            float_list.append(i)\n    return float_list", "\ndef list_to_float(test_list):\n    new_list = []\n    for i in test_list:\n        try:\n            new_list.append(float(i))\n        except ValueError:\n            new_list.append(i)\n    return new_list", "\ndef list_to_float(test_list):\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            float_list.append(i)\n    return float_list"], "evaluation": false}
{"problem_id": 118, "prompt": "def string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    return string.split()", "\ndef string_to_list(string): \n    return string.split(' ')", "\ndef string_to_list(string): \n    return string.split(' ')"], "evaluation": true}
{"problem_id": 119, "prompt": "def search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    low = 0\n    high = len(arr) - 1\n    while low <= high :\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid ^ 1] :\n            low = mid + 1\n        else :\n            high = mid - 1\n    return arr[low]", "\ndef search(arr,n) :\n    low = 0\n    high = len(arr) - 1\n    while low <= high :\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid ^ 1] :\n            low = mid + 1\n        else :\n            high = mid - 1\n    return arr[low]", "\ndef search(arr,n) :\n    low = 0\n    high = len(arr) - 1\n    while low < high :\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid ^ 1] :\n            low = mid + 1\n        else :\n            high = mid\n    return arr[low]"], "evaluation": false}
{"problem_id": 120, "prompt": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product", "\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product", "\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"], "evaluation": false}
{"problem_id": 121, "prompt": "def check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k] == sum):\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k])\n    if (count == 0):\n        print(\"No such triplet found\")", "\ndef check_triplet(A, n, sum, count):\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (A[i] + A[j] + A[k] == sum):\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k])\n    if (count == 0):\n        print(\"No such triplet found\")", "\ndef check_triplet(A, n, sum, count):\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (A[i] + A[j] + A[k] == sum):\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k])\n    if (count == 0):\n        print(\"No such triplet found\")"], "evaluation": false}
{"problem_id": 122, "prompt": "MAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def next_prime(num):\n        if num <= 1:\n            return 2\n        prime = num\n        found = False\n        while not found:\n            prime += 1\n            if is_prime(prime):\n                found = True\n        return prime\n\n    def prev_prime(num):\n        if num <= 1:\n            return 2\n        prime = num\n        found = False\n        while not found:\n            prime -= 1\n            if is_prime(prime):\n                found = True\n        return prime\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n % 2 == 0:\n        return prev_prime(n)\n    else:\n        return next_prime(n)", "\ndef smartNumber(n): \n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def next_prime(num):\n        if num <= 1:\n            return 2\n        prime = num\n        found = False\n        while not found:\n            prime += 1\n            if is_prime(prime):\n                found = True\n        return prime\n\n    def prev_prime(num):\n        if num <= 1:\n            return 2\n        prime = num\n        found = False\n        while not found:\n            prime -= 1\n            if is_prime(prime):\n                found = True\n        return prime\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n % 2 == 0:\n        return prev_prime(n // 2) * 2\n    else:\n        return prev_prime(n // 2) * 2 - prev_prime(n // 2 - 1)", "\ndef smartNumber(n): \n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def next_prime(num):\n        if num <= 1:\n            return 2\n        prime = num\n        found = False\n        while not found:\n            prime += 1\n            if is_prime(prime):\n                found = True\n        return prime\n\n    def prev_prime(num):\n        if num <= 1:\n            return 2\n        prime = num\n        found = False\n        while not found:\n            prime -= 1\n            if is_prime(prime):\n                found = True\n        return prime\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n % 2 == 0:\n        return prev_prime(n // 2) * 2\n    else:\n        return prev_prime(n // 2) * 2 - prev_prime(n // 2 - 1)"], "evaluation": false}
{"problem_id": 123, "prompt": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    divisors.append(i)\n                else:\n                    divisors.extend([i, n // i])\n        return sum(divisors)\n\n    amicable_numbers = []\n    for i in range(2, limit + 1):\n        if sum_divisors(i) > i and sum_divisors(i) <= limit:\n            if sum_divisors(sum_divisors(i)) == i and sum_divisors(sum_divisors(i)) <= limit:\n                if i not in amicable_numbers:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_divisors(i))\n\n    return sum(amicable_numbers)", "\ndef amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    divisors.append(i)\n                else:\n                    divisors.extend([i, n // i])\n        return sum(divisors)\n\n    amicable_numbers = []\n    for i in range(2, limit + 1):\n        if sum_divisors(i) > i and sum_divisors(i) <= limit:\n            if sum_divisors(sum_divisors(i)) == i and sum_divisors(sum_divisors(i)) <= limit:\n                if i not in amicable_numbers:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_divisors(i))\n\n    return sum(amicable_numbers)", "\ndef amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    divisors.append(i)\n                else:\n                    divisors.extend([i, n // i])\n        return sum(divisors)\n\n    amicable_numbers = []\n    for i in range(2, limit + 1):\n        if sum_divisors(i) > i and sum_divisors(i) <= limit:\n            if sum_divisors(sum_divisors(i)) == i and sum_divisors(sum_divisors(i)) <= limit:\n                if i not in amicable_numbers:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_divisors(i))\n    return sum(amicable_numbers)"], "evaluation": true}
{"problem_id": 124, "prompt": "import cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(a + b * 1j)", "import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(a+b*1j)", "import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(a + b * 1j)"], "evaluation": false}
{"problem_id": 125, "prompt": "def find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_diff = max(max_diff, count_0 - count_1)\n    return max_diff", "\ndef find_length(string, n): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_diff = max(max_diff, count_0 - count_1)\n    return max_diff", "\ndef find_length(string, n): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_diff = max(max_diff, count_0 - count_1)\n    return max_diff"], "evaluation": false}
{"problem_id": 126, "prompt": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    def common_divisors(x, y):\n        result = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                result.append(i)\n        return result\n\n    return sum(common_divisors(a, b))", "\ndef sum(a,b): \n    def common_divisors(x, y):\n        result = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                result.append(i)\n        return result\n\n    return sum(common_divisors(a, b))", "\ndef sum(a,b): \n    def common_divisors(x, y):\n        result = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                result.append(i)\n        return result\n\n    return sum(common_divisors(a, b))"], "evaluation": false}
{"problem_id": 127, "prompt": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    result = 0\n    for i in range(y):\n        result += x\n    return result", "\ndef multiply_int(x, y):\n    result = 0\n    for i in range(y):\n        result += x\n    return result", "\ndef multiply_int(x, y):\n    result = 0\n    for i in range(y):\n        result += x\n    return result"], "evaluation": true}
{"problem_id": 128, "prompt": "def long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]", "\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]", "\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]"], "evaluation": false}
{"problem_id": 129, "prompt": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n\n    def is_magic_square(matrix):\n        \"\"\"\n        Check if a matrix is a magic square.\n        \"\"\"\n        size = len(matrix)\n        sum_row = sum(sum(row) for row in matrix)\n        sum_col = sum(sum(column) for column in zip(*matrix))\n        sum_diag = sum(sum(matrix[i][i] for i in range(size)))\n        sum_anti_diag = sum(sum(matrix[i][size - i - 1] for i in range(size)))\n\n        return (sum_row == sum_col == sum_diag == sum_anti_diag == size * (size ** 2 + 1) // 2)\n\n    def create_magic_square(size):\n        \"\"\"\n        Create a magic square of a given size.\n        \"\"\"\n        matrix = [[0] * size for _ in range(size)]\n        num = 1\n        row = 0\n        col = size // 2\n\n        while num <= size * size:\n            matrix[row][col] = num\n            num += 1\n            row = (row + 1) % size\n            col = (col - 1 + size) % size\n\n        return matrix\n\n    if is_magic_square(my_matrix):\n        return \"The matrix is a magic square.\"\n    else:\n        magic_square = create_magic_square(len(my_matrix))\n        magic_square[len(my_matrix)-1][len(my_matrix)-1] = my_matrix[len(my_matrix)-1][len(my_matrix)-1]\n        return \"The matrix is not a magic square. Here is a magic square: \\n\" + str(magic_square)", "\ndef magic_square_test(my_matrix):\n\n    def is_magic_square(matrix):\n        \"\"\"\n        Check if a matrix is a magic square.\n        \"\"\"\n        size = len(matrix)\n        sum_row = sum(sum(row) for row in matrix)\n        sum_col = sum(sum(column) for column in zip(*matrix))\n        sum_diag = sum(sum(matrix[i][i] for i in range(size)))\n        sum_anti_diag = sum(sum(matrix[i][size - i - 1] for i in range(size)))\n\n        return (sum_row == sum_col == sum_diag == sum_anti_diag == size * (size ** 2 + 1) // 2)\n\n    def create_magic_square(size):\n        \"\"\"\n        Create a magic square of a given size.\n        \"\"\"\n        matrix = [[0] * size for _ in range(size)]\n        num = 1\n        row = 0\n        col = size // 2\n\n        while num <= size * size:\n            matrix[row][col] = num\n            num += 1\n            row = (row + 1) % size\n            col = (col - 1 + size) % size\n\n        return matrix\n\n    if is_magic_square(my_matrix):\n        return \"The matrix is a magic square.\"\n    else:\n        magic_square = create_magic_square(len(my_matrix))\n        magic_square[len(my_matrix)-1][len(my_matrix)-1] = my_matrix[len(my_matrix)-1][len(my_matrix)-1]\n        return \"The matrix is not a magic square. Here is a magic square: \\n\" + str(magic_square)", "\ndef magic_square_test(my_matrix):\n\n    def is_magic_square(matrix):\n        \"\"\"\n        Check if a matrix is a magic square.\n        \"\"\"\n        size = len(matrix)\n        sum_row = sum(sum(row) for row in matrix)\n        sum_col = sum(sum(column) for column in zip(*matrix))\n        sum_diag = sum(sum(matrix[i][i] for i in range(size)))\n        sum_anti_diag = sum(sum(matrix[i][size - i - 1] for i in range(size)))\n\n        return (sum_row == sum_col == sum_diag == sum_anti_diag == size * (size ** 2 + 1) // 2)\n\n    def create_magic_square(size):\n        \"\"\"\n        Create a magic square of a given size.\n        \"\"\"\n        matrix = [[0] * size for _ in range(size)]\n        num = 1\n        row = 0\n        col = size // 2\n\n        while num <= size * size:\n            matrix[row][col] = num\n            num += 1\n            row = (row + 1) % size\n            col = (col - 1 + size) % size\n\n        return matrix\n\n    if is_magic_square(my_matrix):\n        return \"The matrix is a magic square.\"\n    else:\n        magic_square = create_magic_square(len(my_matrix))\n        magic_square[len(my_matrix)-1][len(my_matrix)-1] = my_matrix[len(my_matrix)-1][len(my_matrix)-1]\n        return \"The matrix is not a magic square. Here is a magic square: \" + str(magic_square)"], "evaluation": false}
{"problem_id": 130, "prompt": "from collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    max_freq = max(count_dict.values())\n    max_freq_nums = [num for num, freq in count_dict.items() if freq == max_freq]\n\n    return max_freq_nums", "from collections import defaultdict\n\ndef max_occurrences(nums):\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    max_freq = max(count_dict.values())\n    max_freq_nums = [num for num, freq in count_dict.items() if freq == max_freq]\n\n    return max_freq_nums", "from collections import defaultdict\n\ndef max_occurrences(nums):\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    max_freq = max(count_dict.values())\n    max_freq_nums = [num for num, freq in count_dict.items() if freq == max_freq]\n\n    return max_freq_nums"], "evaluation": false}
{"problem_id": 131, "prompt": "def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)", "\ndef reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)", "\ndef reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)"], "evaluation": true}
{"problem_id": 132, "prompt": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    return ''.join(str(i) for i in tup1)", "\ndef tup_string(tup1):\n    return ''.join(str(i) for i in tup1)", "\ndef tup_string(tup1):\n    return ''.join(str(i) for i in tup1)"], "evaluation": true}
{"problem_id": 133, "prompt": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"], "evaluation": true}
{"problem_id": 134, "prompt": "def check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    for _ in range(p):\n        if arr[-1] % 2 == 0:\n            arr.append(arr[-1] + 1)\n        else:\n            arr.append(arr[-1] - 1)\n    return arr[-1] % 2 == 0", "\ndef check_last (arr,n,p): \n    for _ in range(p):\n        if arr[-1] % 2 == 0:\n            arr.append(arr[-1] + 1)\n        else:\n            arr.append(arr[-1] - 1)\n    return arr[-1] % 2 == 0", "\ndef check_last (arr,n,p): \n    for _ in range(p):\n        if arr[-1] % 2 == 0:\n            arr.append(arr[-1] + 1)\n        else:\n            arr.append(arr[-1] - 1)\n    return arr[-1] % 2 == 0"], "evaluation": false}
{"problem_id": 135, "prompt": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return n*(26*n - 7) // 2", "\ndef hexagonal_num(n): \n    return n*(26*n - 7)//2", "\ndef hexagonal_num(n): \n    return n*(26*n - 7) // 2"], "evaluation": false}
{"problem_id": 136, "prompt": "def cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    if units <= 100:\n        bill = units * 0.50\n    elif units <= 200:\n        bill = 100 * 0.50 + (units - 100) * 0.75\n    else:\n        bill = 100 * 0.50 + 100 * 0.75 + (units - 200) * 1.20\n    return bill", "\ndef cal_electbill(units):\n    if units <= 100:\n        bill = units * 0.50\n    elif units <= 200:\n        bill = 100 * 0.50 + (units - 100) * 0.75\n    else:\n        bill = 100 * 0.50 + 100 * 0.75 + (units - 200) * 1.20\n    return bill", "\ndef cal_electbill(units):\n    if units <= 100:\n        bill = units * 0.50\n    elif units <= 200:\n        bill = 100 * 0.50 + (units - 100) * 0.75\n    else:\n        bill = 100 * 0.50 + 100 * 0.75 + (units - 200) * 1.20\n    return bill"], "evaluation": false}
{"problem_id": 137, "prompt": "from array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)", "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)", "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)"], "evaluation": false}
{"problem_id": 138, "prompt": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    if n <= 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    else:\n        return False", "\ndef is_Sum_Of_Powers_Of_Two(n): \n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 4 == 0:\n            n = n // 2\n        else:\n            return False\n    return True", "\ndef is_Sum_Of_Powers_Of_Two(n): \n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 4 == 0:\n            n = n // 4\n        else:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 139, "prompt": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    return 2 * 3.14159 * r", "\ndef circle_circumference(r):\n    return 2 * 3.14159 * r", "\ndef circle_circumference(r):\n    return 2 * 3.14159 * r"], "evaluation": false}
{"problem_id": 140, "prompt": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    singly_elements = []\n    for sublist in test_list:\n        for element in sublist:\n            if sublist.count(element) == 1:\n                singly_elements.append(element)\n    return singly_elements", "\ndef extract_singly(test_list):\n    singly_elements = []\n    for sublist in test_list:\n        for element in sublist:\n            if sublist.count(element) == 1:\n                singly_elements.append(element)\n    return singly_elements", "\ndef extract_singly(test_list):\n    singly_elements = []\n    for sublist in test_list:\n        for element in sublist:\n            if sublist.count(element) == 1:\n                singly_elements.append(element)\n    return singly_elements"], "evaluation": false}
{"problem_id": 141, "prompt": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    def flip(arr, k):\n        for i in range(k//2):\n            arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n                \n        flip(nums, max_index+1)\n        flip(nums, i+1)\n        \n    return nums", "\ndef pancake_sort(nums):\n    def flip(arr, k):\n        for i in range(k//2):\n            arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n                \n        flip(nums, max_index+1)\n        flip(nums, i+1)\n        \n    return nums", "\ndef pancake_sort(nums):\n    def flip(arr, k):\n        for i in range(k//2):\n            arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n                \n        flip(nums, max_index+1)\n        flip(nums, i+1)\n        \n    return nums"], "evaluation": true}
{"problem_id": 142, "prompt": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count", "\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n            for k in list3:\n                if i == k:\n                    count += 1\n    return count", "\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 143, "prompt": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count", "\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count", "\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 144, "prompt": "def sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    return min_diff", "\ndef sum_Pairs(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    return min_diff", "\ndef sum_Pairs(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        min_diff = min(min_diff, diff)\n    return min_diff"], "evaluation": false}
{"problem_id": 145, "prompt": "def max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    max_diff = arr[1] - arr[0]\n    min_element = arr[0]\n\n    for i in range(1, n):\n        if arr[i] - min_element > max_diff:\n            max_diff = arr[i] - min_element\n\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    return max_diff", "\ndef max_Abs_Diff(arr,n): \n    max_diff = arr[1] - arr[0]\n    min_element = arr[0]\n\n    for i in range(1, n):\n        if arr[i] - min_element > max_diff:\n            max_diff = arr[i] - min_element\n\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    return max_diff", "\ndef max_Abs_Diff(arr,n): \n    max_diff = arr[1] - arr[0]\n    min_element = arr[0]\n\n    for i in range(1, n): \n        if arr[i] - min_element > max_diff: \n            max_diff = arr[i] - min_element \n\n        if arr[i] < min_element: \n            min_element = arr[i] \n\n    return max_diff"], "evaluation": false}
{"problem_id": 146, "prompt": "def ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    return ''.join(str(ord(c)) for c in str1)", "\ndef ascii_value_string(str1):\n    return ''.join(map(str, [ord(i) for i in str1]))", "\ndef ascii_value_string(str1):\n    return ''.join(str(ord(c)) for c in str1)"], "evaluation": false}
{"problem_id": 147, "prompt": "def max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    if m <= 0 or n <= 0:\n        return 0\n    if m == 1 and n == 1:\n        return tri[0][0]\n    return tri[m-1][n-1] + max(max_path_sum(tri, m-1, n-1), max_path_sum(tri, m-1, n), max_path_sum(tri, m-1, n+1))", "\ndef max_path_sum(tri, m, n): \n    if m <= 0 or n <= 0:\n        return 0\n    if m == 1 and n == 1:\n        return tri[0][0]\n    return tri[m-1][n-1] + max(max_path_sum(tri, m-1, n-1), max_path_sum(tri, m-1, n), max_path_sum(tri, m-1, n+1))", "\ndef max_path_sum(tri, m, n): \n    if m <= 0 or n <= 0:\n        return 0\n    if m == 1 and n == 1:\n        return tri[0][0]\n    return tri[m-1][n-1] + max(max_path_sum(tri, m-1, n-1), max_path_sum(tri, m-1, n), max_path_sum(tri, m-1, n+1))"], "evaluation": false}
{"problem_id": 148, "prompt": "def sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n\n    def sum_digits(n) :\n        return sum(int(digit) for digit in str(n))\n\n    max_sum = 0\n    for i in range(N + 1) :\n        for j in range(i, N + 1) :\n            if sum_digits(i) + sum_digits(j) > max_sum :\n                max_sum = sum_digits(i) + sum_digits(j)\n\n    return max_sum", "\ndef sum_digits_twoparts(N) : \n\n    def sum_digits(n) :\n        return sum(int(digit) for digit in str(n))\n\n    max_sum = 0\n    for i in range(1, N + 1) :\n        for j in range(i, N + 1) :\n            if sum_digits(i) + sum_digits(j) > max_sum :\n                max_sum = sum_digits(i) + sum_digits(j)\n\n    return max_sum", "\ndef sum_digits_twoparts(N) : \n\n    def sum_digits(n) :\n        return sum(int(digit) for digit in str(n))\n\n    max_sum = 0\n    for i in range(1, N + 1) :\n        for j in range(i, N + 1) :\n            if sum_digits(i) + sum_digits(j) > max_sum :\n                max_sum = sum_digits(i) + sum_digits(j)\n\n    return max_sum"], "evaluation": false}
{"problem_id": 149, "prompt": "def longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    if not arr:\n        return 0\n\n    dp = [1] * n\n    max_length = 1\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n\n    return max_length", "\ndef longest_subseq_with_diff_one(arr, n): \n    if not arr:\n        return 0\n\n    dp = [1] * n\n    max_length = 1\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n\n    return max_length", "\ndef longest_subseq_with_diff_one(arr, n): \n    if not arr:\n        return 0\n\n    dp = [1] * n\n    max_length = 1\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n\n    return max_length"], "evaluation": true}
{"problem_id": 150, "prompt": "def does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    if b in a:\n        return True\n    else:\n        return False", "\ndef does_Contain_B(a,b,c): \n    if b in a or b in c:\n        return True\n    else:\n        return False", "\ndef does_Contain_B(a,b,c): \n    if b in a:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 151, "prompt": "def is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n    if(gcd == 1):\n        return True\n    else:\n        return False", "\ndef is_coprime(x,y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n    if(gcd == 1):\n        return True\n    else:\n        return False", "\ndef is_coprime(x,y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n    if(gcd == 1):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 152, "prompt": "def merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) > 1:\n        mid = len(x) // 2\n        left_half = x[:mid]\n        right_half = x[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = 0\n        j = 0\n        k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                x[k] = left_half[i]\n                i = i + 1\n            else:\n                x[k] = right_half[j]\n                j = j + 1\n            k = k + 1\n\n        while i < len(left_half):\n            x[k] = left_half[i]\n            i = i + 1\n            k = k + 1\n\n        while j < len(right_half):\n            x[k] = right_half[j]\n            j = j + 1\n            k = k + 1\n\n    return x", "\ndef merge_sort(x):\n    if len(x) > 1:\n        mid = len(x) // 2\n        left_half = x[:mid]\n        right_half = x[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = 0\n        j = 0\n        k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                x[k] = left_half[i]\n                i = i + 1\n            else:\n                x[k] = right_half[j]\n                j = j + 1\n            k = k + 1\n\n        while i < len(left_half):\n            x[k] = left_half[i]\n            i = i + 1\n            k = k + 1\n\n        while j < len(right_half):\n            x[k] = right_half[j]\n            j = j + 1\n            k = k + 1\n\n    return x", "\ndef merge_sort(x):\n    if len(x) > 1:\n        mid = len(x) // 2\n        left_half = x[:mid]\n        right_half = x[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = 0\n        j = 0\n        k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                x[k] = left_half[i]\n                i = i + 1\n            else:\n                x[k] = right_half[j]\n                j = j + 1\n            k = k + 1\n\n        while i < len(left_half):\n            x[k] = left_half[i]\n            i = i + 1\n            k = k + 1\n\n        while j < len(right_half):\n            x[k] = right_half[j]\n            j = j + 1\n            k = k + 1\n\n    return x"], "evaluation": true}
{"problem_id": 153, "prompt": "def parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    import math\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Calculate the two solutions\n    sol1 = (-b - math.sqrt(disc)) / (2*a)\n    sol2 = (-b + math.sqrt(disc)) / (2*a)\n\n    return sol1, sol2", "\ndef parabola_vertex(a, b, c): \n    import math\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Calculate the two solutions\n    sol1 = (-b - math.sqrt(disc)) / (2 * a)\n    sol2 = (-b + math.sqrt(disc)) / (2 * a)\n\n    return sol1, sol2", "\ndef parabola_vertex(a, b, c): \n    import math\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Calculate the two solutions\n    sol1 = (-b - math.sqrt(disc)) / (2*a)\n    sol2 = (-b + math.sqrt(disc)) / (2*a)\n\n    return sol1, sol2"], "evaluation": false}
{"problem_id": 154, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == N:\n                result.append(nums[i][j])\n    return result", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == N:\n                result.append(nums[i][j])\n    return result", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(N):\n        for j in range(N):\n            result.append(nums[i][j])\n    return result"], "evaluation": false}
{"problem_id": 155, "prompt": "def even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    return n ^ 0xAAAAAAAA", "\ndef even_bit_toggle_number(n) : \n    return n ^ 0xAAAAAAAA", "\ndef even_bit_toggle_number(n) : \n    return n ^ 0xAAAAAAAA"], "evaluation": false}
{"problem_id": 156, "prompt": "def tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    tuple_int = tuple(int(i) for i in tuple_str)\n    return tuple_int", "\ndef tuple_int_str(tuple_str):\n    tuple_int = tuple(int(i) for i in tuple_str)\n    return tuple_int", "\ndef tuple_int_str(tuple_str):\n    tuple_int = tuple(int(i) for i in tuple_str)\n    return tuple_int"], "evaluation": false}
{"problem_id": 157, "prompt": "from itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n    result = []\n    for key, group in groupby(list1):\n        result.append((key, len(list(group))))\n    return result", "from itertools import groupby\n\ndef encode_list(list1):\n    result = []\n    for key, group in groupby(list1):\n        result.append((key, len(list(group))))\n    return result", "from itertools import groupby\n\ndef encode_list(list1):\n    result = []\n    for key, group in groupby(list1):\n        result.append((key, len(list(group))))\n    return result"], "evaluation": false}
{"problem_id": 158, "prompt": "def min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    from collections import Counter\n    count = Counter(arr)\n    operations = 0\n    for key, value in count.items():\n        operations += value // k\n        if value % k != 0:\n            operations += 1\n    return operations", "\ndef min_Ops(arr,n,k): \n    from collections import Counter\n    count = Counter(arr)\n    operations = 0\n    for i in count.values():\n        operations += i // k\n        if i % k != 0:\n            operations += 1\n    return operations", "\ndef min_Ops(arr,n,k): \n    from collections import Counter\n    count = Counter(arr)\n    operations = 0\n    for key, value in count.items():\n        operations += value // k\n        if value % k != 0:\n            operations += 1\n    return operations"], "evaluation": false}
{"problem_id": 159, "prompt": "def month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    if (month == 12 or month == 1 or month == 2):\n        print(\"Winter\")\n    elif (month == 3 or month == 4 or month == 5):\n        print(\"Spring\")\n    elif (month == 6 or month == 7 or month == 8):\n        print(\"Summer\")\n    elif (month == 9 or month == 10 or month == 11):\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month number\")\n\n    if (days >= 20 and days <= 31):\n        print(\"Good weather\")\n    elif (days >= 0 and days <= 19):\n        print(\"Bad weather\")\n    else:\n        print(\"Invalid day number\")", "\ndef month_season(month,days):\n    if (month == 12 or month == 1 or month == 2):\n        print(\"Winter\")\n    elif (month == 3 or month == 4 or month == 5):\n        print(\"Spring\")\n    elif (month == 6 or month == 7 or month == 8):\n        print(\"Summer\")\n    elif (month == 9 or month == 10 or month == 11):\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month number\")\n\n    if (days >= 20 and days <= 31):\n        print(\"Good weather\")\n    elif (days >= 0 and days <= 19):\n        print(\"Bad weather\")\n    else:\n        print(\"Invalid day number\")", "\ndef month_season(month,days):\n    if (month == 12 or month == 1 or month == 2):\n        print(\"Winter\")\n    elif (month == 3 or month == 4 or month == 5):\n        print(\"Spring\")\n    elif (month == 6 or month == 7 or month == 8):\n        print(\"Summer\")\n    elif (month == 9 or month == 10 or month == 11):\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month number\")\n\n    if (days >= 20 and days <= 31):\n        print(\"Good weather\")\n    elif (days >= 0 and days <= 19):\n        print(\"Bad weather\")\n    else:\n        print(\"Invalid day number\")"], "evaluation": false}
{"problem_id": 160, "prompt": "def solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    for x in range(1, n+1):\n        for y in range(1, n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None", "\ndef solution (a, b, n): \n    for x in range(1, n+1):\n        for y in range(1, n+1):\n            if a*x + b*y == n:\n                return x, y\n    return None, None", "\ndef solution (a, b, n): \n    for x in range(1, n+1):\n        for y in range(1, n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"], "evaluation": false}
{"problem_id": 161, "prompt": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]", "\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]", "\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]"], "evaluation": true}
{"problem_id": 162, "prompt": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    sum = 0\n    while n >= 0:\n        sum += n\n        n -= 2\n    return sum", "\ndef sum_series(n):\n    sum = 0\n    while n >= 0:\n        sum += n\n        n -= 2\n    return sum", "\ndef sum_series(n):\n    sum = 0\n    while n >= 0:\n        sum += n\n        n -= 2\n    return sum"], "evaluation": true}
{"problem_id": 163, "prompt": "from math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n    area = (s * l) / (4 * tan(pi/s))\n    return area", "from math import tan, pi\n\ndef area_polygon(s,l):\n    area = (s * l) / (4 * tan(pi/s))\n    return area", "from math import tan, pi\n\ndef area_polygon(s,l):\n    area = (s*l)/(4*tan(pi/s))\n    return area"], "evaluation": false}
{"problem_id": 164, "prompt": "import math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n    def sum_of_divisors(n): \n        sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1): \n            if (n % i == 0): \n                if (n / i == i): \n                    sum = sum + i \n                else: \n                    sum = sum + (i + n // i) \n        return sum \n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)", "import math \n\ndef areEquivalent(num1,num2): \n    def sum_of_divisors(n): \n        sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1): \n            if (n % i == 0): \n                if (n / i == i): \n                    sum = sum + i \n                else: \n                    sum = sum + (i + n // i) \n        return sum \n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)", "import math \n\ndef areEquivalent(num1,num2): \n    def sum_of_divisors(n): \n        sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1): \n            if (n % i == 0): \n                if (n / i == i): \n                    sum = sum + i \n                else: \n                    sum = sum + (i + n//i) \n        return sum \n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)"], "evaluation": false}
{"problem_id": 165, "prompt": "def count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    count_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in count_dict:\n            count_dict[str1[i]].append(i)\n        else:\n            count_dict[str1[i]] = [i]\n    return count_dict", "\ndef count_char_position(str1): \n    count_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in count_dict:\n            count_dict[str1[i]].append(i)\n        else:\n            count_dict[str1[i]] = [i]\n    return count_dict", "\ndef count_char_position(str1): \n    count_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in count_dict:\n            count_dict[str1[i]].append(i)\n        else:\n            count_dict[str1[i]] = [i]\n    return count_dict"], "evaluation": false}
{"problem_id": 166, "prompt": "def find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 167, "prompt": "def next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    i = 1\n    while i < n:\n        i *= 2\n    return i", "\ndef next_Power_Of_2(n): \n    i = 1\n    while i < n:\n        i *= 2\n    return i", "\ndef next_Power_Of_2(n): \n    if n and not (n & (n - 1)):\n        return n\n    count = 0\n    while (n & (1 << count)):\n        count += 1\n    return 1 << count"], "evaluation": true}
{"problem_id": 168, "prompt": "def frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count", "\ndef frequency(a,x): \n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count", "\ndef frequency(a,x): \n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "def get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            pell_numbers.append(2 * pell_numbers[i - 1] + pell_numbers[i - 2])\n        return pell_numbers[n]", "\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            pell_numbers.append(2 * pell_numbers[i - 1] + pell_numbers[i - 2])\n        return pell_numbers[n]", "\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            pell_numbers.append(2 * pell_numbers[i - 1] + pell_numbers[i - 2])\n        return pell_numbers[n]"], "evaluation": true}
{"problem_id": 170, "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m:n+1])", "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m:n+1])", "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m:n+1])"], "evaluation": true}
{"problem_id": 171, "prompt": "import math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter", "import math\n\ndef perimeter_pentagon(a):\n    return 5 * a", "import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter"], "evaluation": true}
{"problem_id": 172, "prompt": "def count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n    count = 0\n    for char in s:\n        if char == 's':\n            count += 1\n    return count", "\ndef count_occurance(s):\n    count = 0\n    for i in s:\n        if i == 'std':\n            count += 1\n    return count", "\ndef count_occurance(s):\n    count = 0\n    for i in s:\n        if i == 's':\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 173, "prompt": "import re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n    return re.sub('[^A-Za-z0-9]+', '', text)", "import re\n\ndef remove_splchar(text): \n    return re.sub('[^A-Za-z0-9]+', '', text)", "import re\n\ndef remove_splchar(text): \n    return re.sub('[^A-Za-z0-9]+', '', text)"], "evaluation": true}
{"problem_id": 174, "prompt": "def group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d", "\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d", "\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k not in d:\n            d[k] = [v]\n        else:\n            d[k].append(v)\n    return d"], "evaluation": true}
{"problem_id": 175, "prompt": "def is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "\ndef is_valid_parenthese( str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "\ndef is_valid_parenthese( str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []"], "evaluation": true}
{"problem_id": 176, "prompt": "def perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    return a + b + c", "\ndef perimeter_triangle(a,b,c):\n    return a + b + c", "\ndef perimeter_triangle(a,b,c):\n    return a + b + c"], "evaluation": true}
{"problem_id": 177, "prompt": "def answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if lcm(i, j) <= R:\n                return [i, j]\n\n    return \"No such pair found\"", "\ndef answer(L,R): \n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if lcm(i, j) <= R:\n                return [i, j]\n\n    return \"No such numbers found\"", "\ndef answer(L,R): \n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if lcm(i, j) <= R:\n                return [i, j]\n    return \"No such numbers found\""], "evaluation": false}
{"problem_id": 178, "prompt": "import re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result", "import re\n\ndef string_literals(patterns,text):\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result", "import re\n\ndef string_literals(patterns,text):\n    result = []\n    for pattern in patterns:\n        if re.search(pattern,text):\n            result.append(pattern)\n    return result"], "evaluation": false}
{"problem_id": 179, "prompt": "def is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    if x < 10:\n        return False\n    elif x == 10:\n        return True\n    else:\n        sum_digits = sum(int(digit) for digit in str(x))\n        return is_num_keith(sum_digits)", "\ndef is_num_keith(x): \n    if x < 10:\n        return False\n    elif x == 10:\n        return True\n    else:\n        sum_digits = sum(int(digit) for digit in str(x))\n        return is_num_keith(sum_digits)", "\ndef is_num_keith(x): \n    if x < 10:\n        return False\n    elif x == 10:\n        return True\n    else:\n        sum_digits = sum(int(digit) for digit in str(x))\n        return is_num_keith(sum_digits)"], "evaluation": false}
{"problem_id": 180, "prompt": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat, dlon = elat - slat, elon - slon\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles = 3959 * c\n    return miles", "from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat, dlon = elat - slat, elon - slon\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles = 3959 * c\n    return miles", "from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat, dlon = elat - slat, elon - slon\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles = 3959 * c\n    return miles"], "evaluation": false}
{"problem_id": 181, "prompt": "def common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    prefix = arr[0]\n    for i in range(1, n): \n        while arr[i].startswith(prefix) == False: \n            prefix = prefix[:-1]\n            if prefix == \"\": \n                return \"\"\n    return prefix", "\ndef common_prefix (arr, n): \n    prefix = arr[0]\n    for i in range(1, n): \n        while arr[i].startswith(prefix) == False: \n            prefix = prefix[:-1]\n            if prefix == \"\": \n                return \"\"\n    return prefix", "\ndef common_prefix (arr, n): \n    prefix = arr[0]\n    for i in range(1, n):\n        while arr[i].startswith(prefix) == False:\n            prefix = prefix[:-1]\n            if len(prefix) == 0:\n                return \"\"\n    return prefix"], "evaluation": true}
{"problem_id": 182, "prompt": "import re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n    uppercase_letters = re.findall(r'[A-Z]', string)\n    lowercase_letters = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    numeric_values = re.findall(r'[0-9]', string)\n\n    return uppercase_letters, lowercase_letters, special_characters, numeric_values", "import re\n\ndef find_character(string):\n    uppercase_letters = re.findall(r'[A-Z]', string)\n    lowercase_letters = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    numeric_values = re.findall(r'[0-9]', string)\n    return uppercase_letters, lowercase_letters, special_characters, numeric_values", "import re\n\ndef find_character(string):\n    uppercase_letters = re.findall(r'[A-Z]', string)\n    lowercase_letters = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    numeric_values = re.findall(r'[0-9]', string)\n    \n    return uppercase_letters, lowercase_letters, special_characters, numeric_values"], "evaluation": false}
{"problem_id": 183, "prompt": "def count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count", "\ndef count_pairs(arr, n, k):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count", "\ndef count_pairs(arr, n, k):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 184, "prompt": "def greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    result = []\n    for i in list:\n        if i > num:\n            result.append(i)\n    return result", "\ndef greater_specificnum(list,num):\n    result = []\n    for i in list:\n        if i > num:\n            result.append(i)\n    return result", "\ndef greater_specificnum(list,num):\n    result = []\n    for i in list:\n        if i > num:\n            result.append(i)\n    return result"], "evaluation": false}
{"problem_id": 185, "prompt": "def parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # check if the discriminant is positive\n    if D >= 0:\n        # calculate the roots\n        root1 = (-b + (D**0.5)) / (2*a)\n        root2 = (-b - (D**0.5)) / (2*a)\n        return root1, root2\n    else:\n        return \"The parabola has no real roots.\"", "\ndef parabola_focus(a, b, c): \n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # check if the discriminant is positive\n    if D >= 0:\n        # calculate the roots\n        root1 = (-b + (D**0.5)) / (2*a)\n        root2 = (-b - (D**0.5)) / (2*a)\n        return root1, root2\n    else:\n        return \"The parabola has no real roots.\"", "\ndef parabola_focus(a, b, c): \n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # check if the discriminant is positive\n    if D >= 0:\n        # calculate the roots\n        root1 = (-b + (D**0.5)) / (2*a)\n        root2 = (-b - (D**0.5)) / (2*a)\n\n        # return the roots\n        return root1, root2\n    else:\n        # if the discriminant is negative, the parabola has no real roots\n        return None"], "evaluation": false}
{"problem_id": 186, "prompt": "import re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            print(f\"Pattern '{pattern}' found in the text: {matches}\")\n        else:\n            print(f\"Pattern '{pattern}' not found in the text.\")", "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            print(f\"Pattern '{pattern}' found in the text: {matches}\")\n        else:\n            print(f\"Pattern '{pattern}' not found in the text.\")", "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        matches = re.findall(pattern, text)\n        if matches:\n            print(f\"Pattern '{pattern}' found in the text: {matches}\")\n        else:\n            print(f\"Pattern '{pattern}' not found in the text.\")"], "evaluation": false}
{"problem_id": 187, "prompt": "def longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    dp = [[0]*(n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]", "\ndef longest_common_subsequence(X, Y, m, n): \n    dp = [[0]*(n+1) for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]", "\ndef longest_common_subsequence(X, Y, m, n): \n    dp = [[0]*(n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]"], "evaluation": true}
{"problem_id": 188, "prompt": "def prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    i = 1\n    while i*i <= n:\n        j = 1\n        while j*j <= n:\n            if i*j*i*j == n:\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef prod_Square(n):\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * j * (i * j) == n:\n                return True\n            j += 1\n        i += 1\n    return False", "\ndef prod_Square(n):\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * j * (i * j) == n:\n                return True\n            j += 1\n        i += 1\n    return False"], "evaluation": false}
{"problem_id": 189, "prompt": "def first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    def segregate(arr):\n        for i in range(len(arr)):\n            while 0 < arr[i] <= len(arr) and arr[arr[i] - 1] != arr[i]:\n                arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n        return arr\n\n    arr = segregate(arr)\n\n    for i in range(len(arr)):\n        if abs(arr[i]) - 1 == i:\n            return i + 1\n\n    return len(arr) + 1", "\ndef first_Missing_Positive(arr,n): \n    def segregate(arr):\n        for i in range(len(arr)):\n            while 0 < arr[i] <= len(arr) and arr[arr[i] - 1] != arr[i]:\n                arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n        return arr\n\n    arr = segregate(arr)\n\n    for i in range(len(arr)):\n        if abs(arr[i]) - 1 == i:\n            return i + 1\n\n    return len(arr) + 1", "\ndef first_Missing_Positive(arr,n): \n    def segregate(arr):\n        for i in range(len(arr)):\n            while 0 < arr[i] <= len(arr) and arr[arr[i] - 1] != arr[i]:\n                arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n        return arr\n\n    arr = segregate(arr)\n\n    for i in range(len(arr)):\n        if abs(arr[i]) - 1 == i:\n            return i + 1\n\n    return len(arr) + 1"], "evaluation": false}
{"problem_id": 190, "prompt": "def count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    count = 0\n    for x in range(x1,x2+1):\n        for y in range(y1,y2+1):\n            if x.is_integer() and y.is_integer():\n                count += 1\n    return count", "\ndef count_Intgral_Points(x1,y1,x2,y2): \n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x.is_integer() and y.is_integer():\n                count += 1\n    return count", "\ndef count_Intgral_Points(x1,y1,x2,y2): \n    count = 0\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            if x.is_integer() and y.is_integer():\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 191, "prompt": "def check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    if monthname3 == 'February':\n        return 28\n    elif monthname3 == 'April' or monthname3 == 'June' or monthname3 == 'September' or monthname3 == 'November':\n        return 30\n    elif monthname3 == 'January' or monthname3 == 'March' or monthname3 == 'May' or monthname3 == 'July' or monthname3 == 'August' or monthname3 == 'October' or monthname3 == 'December':\n        return 31\n    else:\n        return 'Invalid month name'", "\ndef check_monthnumber(monthname3):\n    if monthname3 == 'February':\n        return 28\n    elif monthname3 == 'April' or monthname3 == 'June' or monthname3 == 'September' or monthname3 == 'November':\n        return 30\n    elif monthname3 == 'January' or monthname3 == 'March' or monthname3 == 'May' or monthname3 == 'July' or monthname3 == 'August' or monthname3 == 'October' or monthname3 == 'December':\n        return 31\n    else:\n        return \"Invalid month name\"", "\ndef check_monthnumber(monthname3):\n    if monthname3 == 'February':\n        return 28\n    elif monthname3 == 'April' or monthname3 == 'June' or monthname3 == 'September' or monthname3 == 'November':\n        return 30\n    elif monthname3 == 'January' or monthname3 == 'March' or monthname3 == 'May' or monthname3 == 'July' or monthname3 == 'August' or monthname3 == 'October' or monthname3 == 'December':\n        return 31\n    else:\n        return 'Invalid month name'"], "evaluation": false}
{"problem_id": 192, "prompt": "def check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    if any(char.isdigit() for char in str) and any(char.isalpha() for char in str):\n        return True\n    else:\n        return False", "\ndef check_String(str): \n    if any(char.isdigit() for char in str) and any(char.isalpha() for char in str):\n        return True\n    else:\n        return False", "\ndef check_String(str): \n    if any(char.isdigit() for char in str) and any(char.isalpha() for char in str):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 193, "prompt": "def remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))", "\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))", "\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))"], "evaluation": true}
{"problem_id": 194, "prompt": "def octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    return int(str(n), 8)", "\ndef octal_To_Decimal(n):  \n    return int(str(n), 8)", "\ndef octal_To_Decimal(n):  \n    return int(str(n), 8)"], "evaluation": true}
{"problem_id": 195, "prompt": "def first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    for i in range(0, n): \n        if (arr[i] == x): \n            return i \n    return -1", "\ndef first(arr,x,n): \n    for i in range(0, n): \n        if (arr[i] == x): \n            return i \n    return -1", "\ndef first(arr,x,n): \n    for i in range(0, n): \n        if (arr[i] == x): \n            return i \n    return -1"], "evaluation": true}
{"problem_id": 196, "prompt": "def remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    return [i for i in test_list if len(i) != K]", "\ndef remove_tuples(test_list, K):\n    return [i for i in test_list if len(i) != K]", "\ndef remove_tuples(test_list, K):\n    return [i for i in test_list if len(i) != K]"], "evaluation": true}
{"problem_id": 197, "prompt": "def find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]**test_tup2[i])\n    return tuple(result)", "\ndef find_exponentio(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]**test_tup2[i])\n    return tuple(result)", "\ndef find_exponentio(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]**test_tup2[i])\n    return tuple(result)"], "evaluation": true}
{"problem_id": 198, "prompt": "import math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n    def distance(x1, y1, x2, y2):\n        return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n    def largest_triangle_in_ellipse(a, b):\n        x1, y1 = 0, 0\n        max_area = 0\n        for x2 in range(-a, a + 1):\n            for y2 in range(-b, b + 1):\n                for x3 in range(-a, a + 1):\n                    for y3 in range(-b, b + 1):\n                        area = abs(0.5 * (x2 * x3 + y2 * y3))\n                        if area > max_area:\n                            d1 = distance(x1, y1, x2, y2)\n                            d2 = distance(x1, y1, x3, y3)\n                            d3 = distance(x2, y2, x3, y3)\n                            if d1 < d2 + d3 and d2 < d1 + d3 and d3 < d1 + d2:\n                                max_area = area\n        return max_area\n\n    return largest_triangle_in_ellipse(a, b)", "import math\n\ndef largest_triangle(a,b): \n    def distance(x1, y1, x2, y2):\n        return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n    def largest_triangle_in_ellipse(a, b):\n        x1, y1 = 0, 0\n        max_area = 0\n        for x2 in range(-a, a + 1):\n            for y2 in range(-b, b + 1):\n                for x3 in range(-a, a + 1):\n                    for y3 in range(-b, b + 1):\n                        area = abs(0.5 * (x2 * x3 + y2 * y3))\n                        if area > max_area:\n                            d1 = distance(x1, y1, x2, y2)\n                            d2 = distance(x1, y1, x3, y3)\n                            d3 = distance(x2, y2, x3, y3)\n                            if (d1 < a and d2 < b and d3 < a and d3 < b):\n                                max_area = area\n        return max_area\n\n    return largest_triangle_in_ellipse(a, b)", "import math\n\ndef largest_triangle(a,b): \n    def distance(x1, y1, x2, y2):\n        return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n    def largest_triangle_in_ellipse(a, b):\n        x1, y1 = 0, 0\n        max_area = 0\n        for x2 in range(-a, a + 1):\n            for y2 in range(-b, b + 1):\n                for x3 in range(-a, a + 1):\n                    for y3 in range(-b, b + 1):\n                        area = abs(0.5 * (x2 * x3 + y2 * y3))\n                        if area > max_area:\n                            d1 = distance(x1, y1, x2, y2)\n                            d2 = distance(x1, y1, x3, y3)\n                            d3 = distance(x2, y2, x3, y3)\n                            if d1 < d2 + d3 and d2 < d1 + d3 and d3 < d1 + d2:\n                                max_area = area\n        return max_area\n\n    return largest_triangle_in_ellipse(a, b)"], "evaluation": false}
{"problem_id": 199, "prompt": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    if n and not (n & (n - 1)):\n        return n\n    else:\n        return highest_Power_of_2(n - 1)", "\ndef highest_Power_of_2(n): \n    if n and not (n & (n - 1)):\n        return n\n    else:\n        return highest_Power_of_2(n & (n - 1))", "\ndef highest_Power_of_2(n): \n    if n and not (n & (n - 1)): \n        return n\n    else:\n        return highest_Power_of_2(n & (n - 1))"], "evaluation": true}
{"problem_id": 200, "prompt": "def position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    max_value = max(list1)\n    max_positions = [i for i, x in enumerate(list1) if x == max_value]\n    return max_positions", "\ndef position_max(list1):\n    max_value = max(list1)\n    max_positions = [i for i, x in enumerate(list1) if x == max_value]\n    return max_positions", "\ndef position_max(list1):\n    max_value = max(list1)\n    max_positions = [i for i, x in enumerate(list1) if x == max_value]\n    return max_positions"], "evaluation": true}
