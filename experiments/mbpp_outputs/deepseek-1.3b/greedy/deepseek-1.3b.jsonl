{"problem_id": 1, "prompt": "R = 3\nC = 3\ndef min_cost(cost, m, n): \n\n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n\n    # Create a 2D array to store results of subproblems\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    # Fill dp[][] in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n\n            # If we're at the starting point, there's no cost\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n\n            # If we're at the starting point, there's no cost\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n\n            # If we're at the starting point, there's no cost\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n\n            # If the cell contains a valid value, find the minimum cost path\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Return the minimum cost to reach the destination\n    return dp[m][n]"], "evaluation": false}
{"problem_id": 2, "prompt": "def similar_elements(test_tup1, test_tup2):\n\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    return [i for i in test_tup1 if i in test_tup2]"], "evaluation": false}
{"problem_id": 3, "prompt": "import math\ndef is_not_prime(n):\n\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    sqrt_n = math.sqrt(n)\n    for i in range(3, int(sqrt_n) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 4, "prompt": "import heapq as hq\ndef heap_queue_largest(nums,n):\n\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n\n    # Convert the list to a heap queue\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n\n    # Pop the largest n numbers from the heap\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(-hq.heappop(heap))\n\n    return largest_nums"], "evaluation": true}
{"problem_id": 5, "prompt": "def count_ways(n): \n\n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 2\n    dp[2] = 5\n\n    for i in range(3, n + 1):\n        dp[i] = 2 * dp[i - 1] + dp[i - 2]\n\n    return dp[n]"], "evaluation": false}
{"problem_id": 6, "prompt": "def differ_At_One_Bit_Pos(a,b): \n\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    # Check if the two numbers are equal\n    if a == b:\n        return False\n\n    # Check if the two numbers differ only at one bit position\n    diff_bit = a ^ b\n    return bin(diff_bit).count('1') == 1"], "evaluation": true}
{"problem_id": 7, "prompt": "import re\ndef find_char_long(text):\n\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n\n    # Regular expression pattern\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Find all matches\n    matches = re.findall(pattern, text)\n\n    return matches"], "evaluation": true}
{"problem_id": 8, "prompt": "def square_nums(nums):\n\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    return [lambda x: x**2](nums)"], "evaluation": false}
{"problem_id": 9, "prompt": "def find_Rotations(str): \n\n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    def is_rotation(s1, s2):\n        return s1 in s2 + s2\n\n    str_len = len(str)\n    rotations = 0\n\n    for i in range(str_len):\n        if is_rotation(str[i:], str):\n            rotations += 1\n        else:\n            break\n\n    return rotations"], "evaluation": false}
{"problem_id": 10, "prompt": "import heapq\ndef small_nnum(list1,n):\n\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n\n    # Check if the list is empty\n    if not list1:\n        return \"The list is empty\"\n\n    # Check if n is greater than the length of the list\n    if n > len(list1):\n        return \"n is greater than the length of the list\"\n\n    # Use heapq to get the n smallest items\n    return heapq.nsmallest(n, list1)"], "evaluation": true}
{"problem_id": 11, "prompt": "def remove_Occ(s,ch): \n\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:-1]\n    return s[:(first_occurrence)] + s[(last_occurrence + 1):]"], "evaluation": false}
{"problem_id": 12, "prompt": "def sort_matrix(M):\n\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    # Calculate the sum of each row\n    sums = [sum(row) for row in M]\n\n    # Sort the rows based on their sums\n    sorted_rows = sorted(M, key=sums.__getitem__)\n\n    return sorted_rows"], "evaluation": false}
{"problem_id": 13, "prompt": "from collections import Counter\ndef count_common(words):\n\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Find the most common word(s)\n    most_common = word_counts.most_common(1)\n\n    return most_common"], "evaluation": false}
{"problem_id": 14, "prompt": "def find_Volume(l,b,h) : \n\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    # volume = l * b * h\n    volume = l * b * h\n    return volume"], "evaluation": false}
{"problem_id": 15, "prompt": "import re\ndef split_lowerstring(text):\n\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n\n    # Split the string at lowercase letters\n    split_text = re.split('(?=[a-z])', text)\n\n    return split_text"], "evaluation": false}
{"problem_id": 16, "prompt": "import re\ndef text_lowercase_underscore(text):\n\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n\n    # Use regex to find sequences of lowercase letters joined with an underscore\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n\n    return matches"], "evaluation": false}
{"problem_id": 17, "prompt": "def square_perimeter(a):\n\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    return 4 * a"], "evaluation": true}
{"problem_id": 18, "prompt": "NO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n\n    # Create an empty string to store the result\n    result = \"\"\n\n    # Traverse through the first string\n    for char in string:\n        # If character is not present in second string, append it to the result\n        if char not in second_string:\n            result += char\n\n    # Return the result\n    return result"], "evaluation": true}
{"problem_id": 19, "prompt": "def test_duplicate(arraynums):\n\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    # Convert the array to a set to remove duplicates\n    arraynums = set(arraynums)\n\n    # If the length of the set is less than the length of the array,\n    # then there are duplicates\n    if len(arraynums) < len(arraynums):\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 20, "prompt": "def is_woodall(x): \n\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    if x < 10:\n        return False\n    elif x > 100:\n        return False\n    elif x % 10 != 0:\n        return False\n    else:\n        return True"], "evaluation": false}
{"problem_id": 21, "prompt": "def multiples_of_num(m,n): \n\n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    return [n*i for i in range(1, m+1)]"], "evaluation": true}
{"problem_id": 22, "prompt": "def find_first_duplicate(nums):\n\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None"], "evaluation": false}
{"problem_id": 23, "prompt": "def maximum_Sum(list1): \n\n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    max_sum = 0\n    for sublist in list1:\n        max_sum += max(sublist)\n    return max_sum"], "evaluation": false}
{"problem_id": 24, "prompt": "def binary_to_decimal(binary): \n\n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal"], "evaluation": true}
{"problem_id": 25, "prompt": "def find_Product(arr,n): \n\n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product"], "evaluation": true}
{"problem_id": 26, "prompt": "def check_k_elements(test_list, K):\n\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    # Check if the length of the list is less than k\n    if len(test_list) < K:\n        return False\n\n    # Check if all elements in the list are of the same type\n    if not all(isinstance(x, type(test_list[0])) for x in test_list):\n        return False\n\n    # Check if the first k elements are all unique\n    if len(test_list[:K]) != len(set(test_list[:K])):\n        return False\n\n    # If all checks pass, return True\n    return True"], "evaluation": false}
{"problem_id": 27, "prompt": "import re  \ndef remove(list): \n\n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    # Using list comprehension and re.sub() function to remove digits\n    return [re.sub(r'\\d', '', i) for i in list]"], "evaluation": true}
{"problem_id": 28, "prompt": "def binomial_Coeff(n,k): \n\n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    if k>n or k<0 or n<0:\n        return \"Invalid input\"\n    else:\n        res = 1\n        for i in range(k):\n            res = res * (n-i)\n            res = res // (i+1)\n        return res"], "evaluation": true}
{"problem_id": 29, "prompt": "def get_Odd_Occurrence(arr,arr_size):   \n\n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    # Initialize an empty hashmap\n    hashmap = {}\n\n    # Traverse the given array\n    for i in range(0, arr_size):\n        # If element is not in hashmap, add it with count 1\n        if (arr[i] in hashmap):\n            hashmap[arr[i]] += 1\n        else:\n            hashmap[arr[i]] = 1\n\n    # Traverse the hashmap\n    for key, value in hashmap.items():\n        # If count of element is odd, return the element\n        if (value % 2 != 0):\n            return key\n\n    # If no element occurs odd number of times, return -1\n    return -1"], "evaluation": true}
{"problem_id": 30, "prompt": "def count_Substring_With_Equal_Ends(s): \n\n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 31, "prompt": "def func(nums, k):\n\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    from collections import Counter\n    from heapq import nlargest\n\n    def top_k_frequent(nums, k):\n        count = Counter(nums)\n        return nlargest(k, count.keys(), key=count.get)\n\n    return top_k_frequent(nums, k)"], "evaluation": false}
{"problem_id": 32, "prompt": "import math \ndef max_Prime_Factors (n): \n\n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)"], "evaluation": true}
{"problem_id": 33, "prompt": "def decimal_To_Binary(N): \n\n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N >= 1:\n        decimal_To_Binary(N // 2)\n        print(N % 2, end = '')"], "evaluation": false}
{"problem_id": 34, "prompt": "def find_missing(ar,N): \n\n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    # Initialize the left and right pointers\n    left, right = 0, 1\n\n    # Traverse the array\n    while right < N:\n        # If the difference between the current element and the left pointer is more than 1,\n        # then the missing number is between the left pointer and the current element\n        if ar[right] - ar[left] > 1:\n            return ar[left] + 1\n        # Otherwise, move the left pointer to the right\n        left = right\n        right = left + 1\n\n    # If the difference between the last element and the left pointer is more than 1,\n    # then the missing number is between the last element and the right pointer\n    if ar[N-1] - ar[left] > 1:\n        return ar[N-1] + 1\n\n    # If no missing number is found, return -1\n    return -1"], "evaluation": true}
{"problem_id": 35, "prompt": "def find_rect_num(n):\n\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    else:\n        return n * (n + 1) * (n + 2) // 6"], "evaluation": false}
{"problem_id": 36, "prompt": "def find_Nth_Digit(p,q,N) :  \n\n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n\n    def find_Nth_Digit_in_Fraction(numerator, denominator, N) :\n        if numerator % denominator == 0 :\n            return numerator // denominator\n        else :\n            return -1\n\n    def find_Nth_Digit_in_Decimal(number, N) :\n        str_num = str(number)\n        if '.' in str_num :\n            integer_part, fractional_part = str_num.split('.')\n            integer_part = int(integer_part)\n            fractional_part = int(fractional_part)\n            fractional_part = fractional_part * 10 ** (N - len(str_num.split('.')[1]))\n            return find_Nth_Digit_in_Fraction(integer_part, 10 ** len(str_num.split('.')[1]), fractional_part)\n        else :\n            return -1\n\n    if N <= 0 :\n        return -1\n\n    if p > q :\n        return -1\n\n    if N == 1 :\n        return find_Nth_Digit_in_Fraction(p, q, N)\n\n    return find_Nth_Digit_in_Decimal(p, N)"], "evaluation": false}
{"problem_id": 37, "prompt": "def sort_mixed_list(mixed_list):\n\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    # Separate the integers and strings\n    ints = [i for i in mixed_list if isinstance(i, int)]\n    strs = [s for s in mixed_list if isinstance(s, str)]\n\n    # Sort the integers\n    ints.sort()\n\n    # Combine the sorted integers and strings\n    sorted_list = ints + strs\n\n    return sorted_list"], "evaluation": false}
{"problem_id": 38, "prompt": "def div_even_odd(list1):\n\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n\n    if len(even_numbers) == 0:\n        return \"No even numbers\"\n    elif len(odd_numbers) == 0:\n        return \"No odd numbers\"\n    else:\n        return even_numbers[0] / odd_numbers[0]"], "evaluation": true}
{"problem_id": 39, "prompt": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n\n    # Count the frequency of each character in the string\n    count = Counter(S)\n\n    # Count the number of characters that appear an odd number of times\n    odds = sum(v % 2 for v in count.values())\n\n    # If there is more than one character that appears an odd number of times, return False\n    if odds > 1:\n        return False\n\n    # Otherwise, return True\n    return True"], "evaluation": false}
{"problem_id": 40, "prompt": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n\n    # Flatten the list of lists\n    flat_list = list(chain(*nums))\n\n    # Count the frequency of each element\n    freq_dict = dict(Counter(flat_list))\n\n    return freq_dict"], "evaluation": true}
{"problem_id": 41, "prompt": "def filter_evennumbers(nums):\n\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "def find_Sum(arr,n): \n\n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    sum_of_repeated_elements = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j] and arr[i] != -1:\n                sum_of_repeated_elements += arr[i]\n                arr[j] = -1\n    return sum_of_repeated_elements"], "evaluation": false}
{"problem_id": 43, "prompt": "import re\ndef text_match(text):\n\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n\n    return matches"], "evaluation": false}
{"problem_id": 44, "prompt": "import re\ndef text_match_string(text):\n\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n\n    pattern = r\"^\\w+\"\n    matches = re.findall(pattern, text)\n    return matches"], "evaluation": false}
{"problem_id": 45, "prompt": "def get_gcd(l):\n\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    result = l[0]\n    for i in l[1:]:\n        result = gcd(result, i)\n\n    return result"], "evaluation": true}
{"problem_id": 46, "prompt": "def test_distinct(data):\n\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    distinct_numbers = set(data)\n    return len(distinct_numbers) == len(data)"], "evaluation": true}
{"problem_id": 47, "prompt": "def compute_Last_Digit(A,B): \n\n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = factorial(A) % 10\n    last_digit_B = factorial(B) % 10\n\n    return last_digit_A * last_digit_B"], "evaluation": false}
{"problem_id": 48, "prompt": "def odd_bit_set_number(n):\n\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    return n ^ 0xAAAAAAAA"], "evaluation": false}
{"problem_id": 49, "prompt": "def specified_element(nums, N):\n\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(N):\n        result.append(nums[i][0])\n    return result"], "evaluation": false}
{"problem_id": 50, "prompt": "def min_length_list(input_list):\n\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))"], "evaluation": false}
{"problem_id": 51, "prompt": "def check_equilateral(x,y,z):\n\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")"], "evaluation": false}
{"problem_id": 52, "prompt": "def parallelogram_area(b,h):\n\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    return b * h"], "evaluation": true}
{"problem_id": 53, "prompt": "def check_Equality(str):\n\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if len(str) > 1:\n        if str[0] == str[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False"], "evaluation": false}
{"problem_id": 54, "prompt": "def counting_sort(my_list):\n\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    # Find the maximum element in the list\n    max_val = max(my_list)\n\n    # Initialize the counting array with zeros\n    count_array = [0] * (max_val + 1)\n\n    # Count the occurrences of each element in the list\n    for num in my_list:\n        count_array[num] += 1\n\n    # Initialize the sorted list\n    sorted_list = []\n\n    # Add each element from the counting array to the sorted list\n    for i, count in enumerate(count_array):\n        sorted_list.extend([i] * count)\n\n    return sorted_list"], "evaluation": true}
{"problem_id": 55, "prompt": "import math\ndef tn_gp(a,n,r):\n\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n\n    return a * (1 - r**n) / (1 - r)"], "evaluation": false}
{"problem_id": 56, "prompt": "def check(n):    \n\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    # Convert the number to string\n    str_n = str(n)\n    \n    # Reverse the string\n    reversed_str_n = str_n[::-1]\n    \n    # Check if the number is one less than twice its reverse\n    if str_n == reversed_str_n[:len(str_n)-1]:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 57, "prompt": "def find_Max_Num(arr,n) : \n\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    # Convert the list to string and then to list\n    arr = list(map(str, arr))\n    # Sort the list in reverse order\n    arr.sort(reverse=True)\n    # Join the list elements to form a string\n    max_num = ''.join(arr)\n    # Return the result\n    return int(max_num)"], "evaluation": true}
{"problem_id": 58, "prompt": "def opposite_Signs(x,y): \n\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 59, "prompt": "def is_octagonal(n): \n\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    return n * (7 * n - 5) / 2"], "evaluation": false}
{"problem_id": 60, "prompt": "def max_len_sub( arr, n): \n\n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    if n == 0 or n == 1:\n        return n\n\n    # Initialize the maximum length of the subsequence\n    max_len = 1\n\n    # Initialize the current length of the subsequence\n    curr_len = 1\n\n    # Traverse through the array\n    for i in range(1, n):\n        # If the difference between the current element and the previous element is 1,\n        # increment the current length of the subsequence\n        if arr[i] - arr[i - 1] == 1:\n            curr_len += 1\n\n        # If the difference is not 1, update the maximum length of the subsequence\n        # if the current length is greater than the maximum length\n        elif arr[i] - arr[i - 1] > 1:\n            max_len = max(max_len, curr_len)\n            curr_len = 2\n\n        # If the difference is 1, reset the current length of the subsequence\n        else:\n            curr_len = 2\n\n    # Return the maximum length of the subsequence\n    return max(max_len, curr_len)"], "evaluation": false}
{"problem_id": 61, "prompt": "from collections import defaultdict\ndef count_Substrings(s,n):\n\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n\n    # Initialize the count\n    count = 0\n\n    # Create a dictionary to store the count of substrings\n    substr_count = defaultdict(int)\n\n    # Iterate over the string\n    for i in range(n):\n        # Initialize the sum of digits\n        sum_digits = 0\n\n        # Iterate over the substring\n        for j in range(i, n):\n            # Add the digit to the sum\n            sum_digits += int(s[j])\n\n            # If the sum of digits is equal to the length of the substring\n            if sum_digits == j - i + 1:\n                # Increment the count\n                count += 1\n\n                # Add the substring to the dictionary\n                substr_count[s[i:j+1]] += 1\n\n    # Return the count and the dictionary\n    return count, substr_count"], "evaluation": false}
{"problem_id": 62, "prompt": "def smallest_num(xs):\n\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    return min(xs)"], "evaluation": true}
{"problem_id": 63, "prompt": "def max_difference(test_list):\n\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    if len(test_list) < 2:\n        return \"Invalid input. List should have at least two elements.\"\n\n    min_element = test_list[0]\n    max_difference = test_list[1] - test_list[0]\n\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_element > max_difference:\n            max_difference = test_list[i] - min_element\n\n        if test_list[i] < min_element:\n            min_element = test_list[i]\n\n    return max_difference"], "evaluation": false}
{"problem_id": 64, "prompt": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"], "evaluation": true}
{"problem_id": 65, "prompt": "def recursive_list_sum(data_list):\n\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"], "evaluation": false}
{"problem_id": 66, "prompt": "def pos_count(list):\n\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "def bell_number(n):   \n\n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    bell = [0 for _ in range(n+1)]\n    bell[0] = 1\n\n    for i in range(1, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j]\n\n    return bell[n]"], "evaluation": false}
{"problem_id": 68, "prompt": "def is_Monotonic(A): \n\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))"], "evaluation": true}
{"problem_id": 69, "prompt": "def is_sublist(l, s):\n\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    return s in l"], "evaluation": false}
{"problem_id": 70, "prompt": "def get_equal(Input, k):\n\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    return all(len(t) == k for t in Input)"], "evaluation": false}
{"problem_id": 71, "prompt": "def comb_sort(nums):\n\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped == True:\n        gap = gap // 2\n        swapped = False\n        i = 0\n        while i < len(nums) - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums"], "evaluation": true}
{"problem_id": 72, "prompt": "def dif_Square(n): \n\n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i - j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False"], "evaluation": false}
{"problem_id": 73, "prompt": "import re\ndef multiple_split(text):\n\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n\n    # Define the delimiters\n    delimiters = [\",\", \" \", \".\", \":\", \";\", \"<\", \">\", \"{\", \"}\", \"[\", \"]\", \"(\", \")\", \"-\"]\n\n    # Use regex to split the string\n    split_text = re.split('|'.join(map(re.escape, delimiters)), text)\n\n    # Remove empty strings\n    split_text = [i for i in split_text if i]\n\n    return split_text"], "evaluation": false}
{"problem_id": 74, "prompt": "def is_samepatterns(colors, patterns):    \n\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n    # Check if the length of colors and patterns are the same\n    if len(colors) != len(patterns):\n        return False\n\n    # Check if the colors follow the sequence in the patterns\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n\n    # If the colors follow the sequence in the patterns\n    return True"], "evaluation": false}
{"problem_id": 75, "prompt": "def find_tuples(test_list, K):\n\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"], "evaluation": false}
{"problem_id": 76, "prompt": "def count_Squares(m,n):\n\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    # calculate the area of the rectangle\n    area = m * n\n\n    # calculate the number of squares in the rectangle\n    squares = area // 4\n\n    return squares"], "evaluation": false}
{"problem_id": 77, "prompt": "def is_Diff(n): \n\n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum"], "evaluation": false}
{"problem_id": 78, "prompt": "def count_With_Odd_SetBits(n): \n\n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    def count_SetBits(n): \n        count = 0\n        while (n): \n            count += n & 1\n            n >>= 1\n        return count\n\n    count = 0\n    for i in range(1, n+1):\n        if count_SetBits(i) % 2 != 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 79, "prompt": "def word_len(s): \n\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""], "evaluation": false}
{"problem_id": 80, "prompt": "def tetrahedral_number(n): \n\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    return n*(n-3)*(n-2)//6"], "evaluation": false}
{"problem_id": 81, "prompt": "def zip_tuples(test_tup1, test_tup2):\n\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))"], "evaluation": false}
{"problem_id": 82, "prompt": "import math\ndef volume_sphere(r):\n\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n\n    # Volume of a sphere = 4/3 * π * r^3\n\n    volume = (4/3) * math.pi * (r**3)\n\n    return volume"], "evaluation": true}
{"problem_id": 83, "prompt": "def get_Char(strr):  \n\n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    result = ''\n    for char in strr:\n        result += char\n    return result"], "evaluation": false}
{"problem_id": 84, "prompt": "def sequence(n): \n\n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        sequence = [2, 1]\n        for i in range(2, n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[n-1]"], "evaluation": false}
{"problem_id": 85, "prompt": "import math\ndef surfacearea_sphere(r):\n\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n\n    # surface area = 4 * pi * r^2\n    surfacearea = 4 * math.pi * math.pow(r, 2)\n\n    return surfacearea"], "evaluation": true}
{"problem_id": 86, "prompt": "def centered_hexagonal_number(n):\n\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    return n * (9 * n - 7) // 2"], "evaluation": false}
{"problem_id": 87, "prompt": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = ct.deepcopy(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"], "evaluation": false}
{"problem_id": 88, "prompt": "import collections\ndef freq_count(list1):\n\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate over the list\n    for i in list1:\n        # If the element is already in the dictionary, increment its count\n        if i in freq_dict:\n            freq_dict[i] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[i] = 1\n\n    # Return the dictionary\n    return freq_dict"], "evaluation": true}
{"problem_id": 89, "prompt": "def closest_num(N):\n\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    def closest_num_recursive(n, closest):\n        if n == 0:\n            return closest\n        elif n % 2 == 0:\n            return closest_num_recursive(n // 2, n if abs(n - closest) > abs(closest - (n + 1)) else closest + 1)\n        else:\n            return closest_num_recursive(n - 1, closest)\n\n    return closest_num_recursive(N, N)"], "evaluation": false}
{"problem_id": 90, "prompt": "def len_log(list1):\n\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    return max(len(word) for word in list1)"], "evaluation": true}
{"problem_id": 91, "prompt": "def find_substring(str1, sub_str):\n\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    return sub_str in str1"], "evaluation": false}
{"problem_id": 92, "prompt": "def is_undulating(n): \n\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    # Convert the number to string\n    str_n = str(n)\n\n    # Check if the string length is less than 2\n    if len(str_n) < 2:\n        return False\n\n    # Check if the first and last digit are the same\n    if str_n[0] == str_n[-1]:\n        return False\n\n    # Check if the second and second last digit are the same\n    if str_n[1] == str_n[-2]:\n        return False\n\n    # If none of the above conditions are met, the number is undulating\n    return True"], "evaluation": false}
{"problem_id": 93, "prompt": "def power(a,b):\n\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    return a**b"], "evaluation": true}
{"problem_id": 94, "prompt": "from operator import itemgetter \ndef index_minimum(test_list):\n\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n\n    # Check if the list is empty\n    if not test_list:\n        return None\n\n    # Extract the minimum value and its index\n    min_value = min(test_list, key=itemgetter(1))\n\n    return min_value"], "evaluation": false}
{"problem_id": 95, "prompt": "def Find_Min_Length(lst):  \n\n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"], "evaluation": true}
{"problem_id": 96, "prompt": "def divisor(n):\n\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 97, "prompt": "def frequency_lists(list1):\n\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"], "evaluation": true}
{"problem_id": 98, "prompt": "def multiply_num(numbers):  \n\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"], "evaluation": true}
{"problem_id": 99, "prompt": "def decimal_to_binary(n): \n\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"], "evaluation": true}
{"problem_id": 100, "prompt": "import sys\ndef next_smallest_palindrome(num):\n\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def increment(n):\n        return int(str(n) + '1')\n\n    if num >= 10:\n        num = num if is_palindrome(num) else increment(num)\n\n    while True:\n        num = increment(num)\n        if is_palindrome(num):\n            return num"], "evaluation": false}
{"problem_id": 101, "prompt": "def kth_element(arr, n, k):\n\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    # Check if the array is empty\n    if not arr:\n        return None\n\n    # Check if k is out of bounds\n    if k < 0 or k >= len(arr):\n        return None\n\n    # Return the kth element\n    return arr[k]"], "evaluation": false}
{"problem_id": 102, "prompt": "def snake_to_camel(word):\n\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    # Split the word by '_'\n    words = word.split('_')\n\n    # Capitalize the first word and join the rest with capital letters\n    camel_case_word = words[0].lower() + ''.join(word.title() for word in words[1:])\n\n    return camel_case_word"], "evaluation": false}
{"problem_id": 103, "prompt": "def eulerian_num(n, m): \n\n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 104, "prompt": "def sort_sublists(input_list):\n\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[0])"], "evaluation": false}
{"problem_id": 105, "prompt": "def count(lst):   \n\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 106, "prompt": "def add_lists(test_list, test_tup):\n\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)"], "evaluation": false}
{"problem_id": 107, "prompt": "def count_Hexadecimal(L,R) :  \n\n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1) :\n        if '0' <= str(hex(i))[-2:] <= '9' :\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n\n    # Create a heap queue and add all elements of the input lists\n    heap = []\n    for num in [num1, num2, num3]:\n        for n in num:\n            heapq.heappush(heap, n)\n\n    # Pop elements from the heap and push them into a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"], "evaluation": true}
{"problem_id": 109, "prompt": "def odd_Equivalent(s,n): \n\n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    # Count the number of 1's in the binary string\n    count_ones = s.count('1')\n\n    # If the count of 1's is even, return 0 as there are no rotations\n    if count_ones % 2 == 0:\n        return 0\n\n    # If the count of 1's is odd, return the count of rotations\n    else:\n        return count_ones // 2"], "evaluation": false}
{"problem_id": 110, "prompt": "def extract_missing(test_list, strt_val, stop_val):\n\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    missing_list = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_list.append(i)\n    return missing_list"], "evaluation": false}
{"problem_id": 111, "prompt": "def common_in_nested_lists(nestedlist):\n\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    return list(set(flat_list))"], "evaluation": false}
{"problem_id": 112, "prompt": "def perimeter(diameter,height) : \n\n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    import math\n    radius = diameter / 2\n    perimeter = 2 * math.pi * radius * (radius + height)\n    return perimeter"], "evaluation": false}
{"problem_id": 113, "prompt": "def check_integer(text):\n\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"], "evaluation": true}
{"problem_id": 114, "prompt": "from collections import Counter \ndef assign_freq(test_list):\n\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n\n    # Create a Counter object from the list\n    freq_counter = Counter(test_list)\n\n    # Create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n\n    # Iterate over the Counter object\n    for key, value in freq_counter.items():\n        # Add the tuple and its frequency to the dictionary\n        freq_dict[key] = value\n\n    return freq_dict"], "evaluation": false}
{"problem_id": 115, "prompt": "def empty_dit(list1):\n\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    return all(not dict1 for dict1 in list1)"], "evaluation": true}
{"problem_id": 116, "prompt": "def tuple_to_int(nums):\n\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))"], "evaluation": true}
{"problem_id": 117, "prompt": "def list_to_float(test_list):\n\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            print(f\"{i} is not convertible to float\")\n    return float_list"], "evaluation": false}
{"problem_id": 118, "prompt": "def string_to_list(string): \n\n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    return string.split()"], "evaluation": true}
{"problem_id": 119, "prompt": "def search(arr,n) :\n\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    low = 0\n    high = len(arr) - 1\n    while low <= high :\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid ^ 1] :\n            low = mid + 1\n        else :\n            high = mid - 1\n    return arr[low]"], "evaluation": false}
{"problem_id": 120, "prompt": "def max_product_tuple(list1):\n\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"], "evaluation": false}
{"problem_id": 121, "prompt": "def check_triplet(A, n, sum, count):\n\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k] == sum):\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k], \"and sum is \", sum)\n    if (count == 0):\n        print(\"No such triplet found\")"], "evaluation": false}
{"problem_id": 122, "prompt": "MAX = 3000 \ndef smartNumber(n): \n\n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_square(num):\n        return num == int(num**0.5)**2\n\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_odd(num):\n        return num % 2 != 0\n\n    def is_perfect_square(num):\n        return num == int(num**0.5)**2\n\n    def is_fibonacci(num):\n        x = 0\n        y = 1\n        while y < num:\n            z = x + y\n            x = y\n            y = z\n        return y == num\n\n    def is_super_prime(num):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0 and is_prime(i) and is_prime(num//i):\n                return False\n        return num > 1\n\n    def is_super_palindrome(num):\n        return is_palindrome(num) and is_super_prime(num)\n\n    def is_super_square(num):\n        return is_square(num) and is_super_prime(num)\n\n    def is_super_fibonacci(num):\n        return is_fibonacci(num) and is_super_prime(num)\n\n    def is_super_even(num):\n        return is_even(num) and is_super_prime(num)\n\n    def is_super_odd(num):\n        return is_odd(num) and is_super_prime(num)\n\n    if n == 1:\n        return 2\n\n    i = 3\n    while True:\n        if is_prime(i) and (is_super_prime(i) or is_super_palindrome(i) or"], "evaluation": false}
{"problem_id": 123, "prompt": "def amicable_numbers_sum(limit):\n\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        \"\"\"\n        Helper function to calculate the sum of divisors of a number.\n        \"\"\"\n        sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                sum += i\n        return sum\n\n    total_sum = 0\n    for i in range(1, limit):\n        j = sum_divisors(i)\n        if i != j and sum_divisors(j) == i:\n            total_sum += i\n    return total_sum"], "evaluation": false}
{"problem_id": 124, "prompt": "import cmath\ndef angle_complex(a,b):\n\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n\n    # calculate the angle in radians\n    angle_rad = cmath.phase(a + b)\n\n    # convert the angle to degrees\n    angle_deg = angle_rad * (180.0 / cmath.pi)\n\n    return angle_deg"], "evaluation": false}
{"problem_id": 125, "prompt": "def find_length(string, n): \n\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    # Initialize max_difference as 0\n    max_difference = 0\n\n    # Initialize count_0s and count_1s as 0\n    count_0s = count_1s = 0\n\n    # Iterate over the string\n    for i in range(len(string)):\n        # If the current character is '0'\n        if string[i] == '0':\n            # Increment count_0s\n            count_0s += 1\n        else:\n            # Increment count_1s\n            count_1s += 1\n\n        # If count_0s - count_1s is greater than max_difference\n        if count_0s - count_1s > max_difference:\n            # Update max_difference\n            max_difference = count_0s - count_1s\n\n        # If the current character is '0'\n        if string[i] == '0':\n            # Reset count_0s to 0\n            count_0s = 0\n        else:\n            # Reset count_1s to 0\n            count_1s = 0\n\n    # Return max_difference\n    return max_difference"], "evaluation": false}
{"problem_id": 126, "prompt": "def sum(a,b): \n\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    def common_divisors(n1, n2):\n        \"\"\"\n        Helper function to find common divisors of two numbers.\n        \"\"\"\n        divisors = []\n        for i in range(1, n1 + 1):\n            if n1 % i == 0 and n2 % i == 0:\n                divisors.append(i)\n        return divisors\n\n    return sum(common_divisors(a, b))"], "evaluation": false}
{"problem_id": 127, "prompt": "def multiply_int(x, y):\n\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    result = 0\n    for i in range(y):\n        result += x\n    return result"], "evaluation": true}
{"problem_id": 128, "prompt": "def long_words(n, str):\n\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]"], "evaluation": false}
{"problem_id": 129, "prompt": "def magic_square_test(my_matrix):\n\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n    def is_magic_square(matrix):\n        \"\"\"\n        Check if a matrix is a magic square.\n        \"\"\"\n        # Get the sum of all elements in the first row\n        magic_constant = sum(matrix[0])\n\n        # Check if all rows have the same sum\n        for row in matrix[1:]:\n            if sum(row) != magic_constant:\n                return False\n\n        # Check if all columns have the same sum\n        for col in range(len(matrix[0])):\n            column = [row[col] for row in matrix]\n            if sum(column) != magic_constant:\n                return False\n\n        # Check if the main diagonal has the same sum\n        if sum(matrix[i][i] for i in range(len(matrix))) != magic_constant:\n            return False\n\n        # Check if the secondary diagonal has the same sum\n        if sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix))) != magic_constant:\n            return False\n\n        return True\n\n    # Check if the input is a 3x3 matrix\n    if len(my_matrix) != 3 or any(len(row) != 3 for row in my_matrix):\n        return \"Input is not a 3x3 matrix\"\n\n    # Check if the input is a magic square\n    if not is_magic_square(my_matrix):\n        return \"Input is not a magic square\"\n\n    return \"Input is a magic square\""], "evaluation": false}
{"problem_id": 130, "prompt": "from collections import defaultdict\ndef max_occurrences(nums):\n\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list and update the frequency of each number\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the maximum frequency and the number with maximum frequency\n    max_freq = max(freq_dict.values())\n    max_freq_nums = [num for num, freq in freq_dict.items() if freq == max_freq]\n\n    # Return the number with maximum frequency\n    return max_freq_nums"], "evaluation": false}
{"problem_id": 131, "prompt": "def reverse_vowels(str1):\n\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)"], "evaluation": true}
{"problem_id": 132, "prompt": "def tup_string(tup1):\n\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    return ''.join(tup1)"], "evaluation": true}
{"problem_id": 133, "prompt": "def sum_negativenum(nums):\n\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"], "evaluation": true}
{"problem_id": 134, "prompt": "def check_last (arr,n,p): \n\n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    # Check if the last element of the array is even or odd\n    if arr[-1] % 2 == 0:\n        last_element_is_even = True\n    else:\n        last_element_is_even = False\n\n    # Perform operation p times\n    for _ in range(p):\n        if last_element_is_even:\n            arr.append(1)\n        else:\n            arr.append(2)\n\n    return arr"], "evaluation": false}
{"problem_id": 135, "prompt": "def hexagonal_num(n): \n\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return n*(26*n - 7)//2"], "evaluation": false}
{"problem_id": 136, "prompt": "def cal_electbill(units):\n\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    # Define the cost per unit\n    cost_per_unit = 0.25\n\n    # Calculate the total cost\n    total_cost = units * cost_per_unit\n\n    # Apply a 10% discount if the units are more than 50\n    if units > 50:\n        total_cost = total_cost * 0.9\n\n    return total_cost"], "evaluation": false}
{"problem_id": 137, "prompt": "from array import array\ndef zero_count(nums):\n\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n\n    # Initialize count of zeroes\n    zero_count = 0\n\n    # Iterate over the array\n    for num in nums:\n        # If the number is zero, increment the count\n        if num == 0:\n            zero_count += 1\n\n    # Calculate the ratio of zeroes to the total numbers\n    ratio = zero_count / len(nums)\n\n    return ratio"], "evaluation": false}
{"problem_id": 138, "prompt": "def is_Sum_Of_Powers_Of_Two(n): \n\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 4 == 0:\n            n = n // 2\n        else:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 139, "prompt": "def circle_circumference(r):\n\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    return 2 * 3.14159 * r"], "evaluation": false}
{"problem_id": 140, "prompt": "def extract_singly(test_list):\n\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            if sublist.count(item) == 1:\n                result.append(item)\n    return result"], "evaluation": false}
{"problem_id": 141, "prompt": "def pancake_sort(nums):\n\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    def flip(arr, k):\n        for i in range(k//2):\n            arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n                \n        flip(nums, max_index+1)\n        flip(nums, i+1)\n        \n    return nums"], "evaluation": true}
{"problem_id": 142, "prompt": "def count_samepair(list1,list2,list3):\n\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 143, "prompt": "def find_lists(Input): \n\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    return len(Input)"], "evaluation": false}
{"problem_id": 144, "prompt": "def sum_Pairs(arr,n): \n\n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    return min_diff"], "evaluation": false}
{"problem_id": 145, "prompt": "def max_Abs_Diff(arr,n): \n\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    min_element = min(arr)\n    max_diff = max(arr) - min_element\n    return max_diff"], "evaluation": true}
{"problem_id": 146, "prompt": "def ascii_value_string(str1):\n\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    return ''.join(str(ord(c)) for c in str1)"], "evaluation": false}
{"problem_id": 147, "prompt": "def max_path_sum(tri, m, n): \n\n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    # Base case: if we're at the bottom of the triangle, return the value at that point\n    if m == n:\n        return tri[m][n]\n\n    # Recursive case: find the maximum sum of the path from the current point to the bottom\n    else:\n        return max(max_path_sum(tri, m + 1, n), max_path_sum(tri, m + 1, n - 1)) + tri[m][n]"], "evaluation": false}
{"problem_id": 148, "prompt": "def sum_digits_twoparts(N) : \n\n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n    # Convert the number to string\n    str_N = str(N)\n    # Get the length of the string\n    length = len(str_N)\n    # If the length is odd, add 0 to the left of the number\n    if length % 2 != 0:\n        str_N = '0' + str_N\n        length += 1\n    # Initialize the maximum sum and the maximum number\n    max_sum = -1\n    max_num = -1\n    # Iterate over all possible pairs of digits\n    for i in range(length // 2) :\n        # Calculate the sum of the two parts\n        sum_parts = int(str_N[i]) + int(str_N[i + length // 2])\n        # If the sum is greater than the current maximum sum\n        if sum_parts > max_sum :\n            # Update the maximum sum and the maximum number\n            max_sum = sum_parts\n            max_num = int(str_N[:i + length // 2])\n    # Return the maximum number\n    return max_num"], "evaluation": false}
{"problem_id": 149, "prompt": "def longest_subseq_with_diff_one(arr, n): \n\n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    count = 1\n    max_length = 1\n    prev = arr[0]\n\n    for i in range(1, n):\n        if (arr[i] - prev == 1):\n            count += 1\n        else:\n            count = 2\n        max_length = max(max_length, count)\n        prev = arr[i]\n\n    return max_length"], "evaluation": false}
{"problem_id": 150, "prompt": "def does_Contain_B(a,b,c): \n\n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 151, "prompt": "def is_coprime(x,y):\n\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n\n    if gcd(x,y)==1:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 152, "prompt": "def merge_sort(x):\n\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n\n    mid = len(x) // 2\n    left_half = merge_sort(x[:mid])\n    right_half = merge_sort(x[mid:])\n\n    return merge(left_half, right_half)"], "evaluation": false}
{"problem_id": 153, "prompt": "def parabola_vertex(a, b, c): \n\n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    # calculate the vertex\n    vertex = -b / (2 * a)\n    return vertex"], "evaluation": false}
{"problem_id": 154, "prompt": "def specified_element(nums, N):\n\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if i == N:\n                result.append(nums[i][j])\n    return result"], "evaluation": false}
{"problem_id": 155, "prompt": "def even_bit_toggle_number(n) : \n\n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    # Convert the number to binary and toggle the bits\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n\n    # Convert the toggled binary back to decimal\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number"], "evaluation": false}
{"problem_id": 156, "prompt": "def tuple_int_str(tuple_str):\n\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    return tuple(int(i) for i in tuple_str)"], "evaluation": false}
{"problem_id": 157, "prompt": "from itertools import groupby\ndef encode_list(list1):\n\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n\n    # Create an empty dictionary\n    encoded_list = {}\n\n    # Iterate over the list\n    for key, group in groupby(list1):\n        # Count the number of times each element appears\n        count = len(list(group))\n\n        # Add the element and its count to the dictionary\n        encoded_list[key] = count\n\n    return encoded_list"], "evaluation": false}
{"problem_id": 158, "prompt": "def min_Ops(arr,n,k): \n\n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    # Calculate the sum of all elements in the array\n    total_sum = sum(arr)\n\n    # If the total sum is not divisible by k, return -1\n    if total_sum % k != 0:\n        return -1\n\n    # Calculate the target sum for each operation\n    target_sum = total_sum // k\n\n    # Calculate the number of operations required\n    operations = 0\n    for num in arr:\n        operations += num // target_sum\n\n    return operations"], "evaluation": false}
{"problem_id": 159, "prompt": "def month_season(month,days):\n\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    if (month == 12 or month == 1 or month == 2) :\n        print(\"Winter\")\n    elif (month == 3 or month == 4 or month == 5) :\n        print(\"Spring\")\n    elif (month == 6 or month == 7 or month == 8) :\n        print(\"Summer\")\n    elif (month == 9 or month == 10 or month == 11) :\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month number\")\n\n    if (days >= 20 and days <= 31):\n        print(\"This month has 31 days\")\n    elif (days >= 1 and days <= 20):\n        print(\"This month has 20-31 days\")\n    elif (days >= 21 and days <= 30):\n        print(\"This month has 30 days\")\n    elif (days >= 1 and days <= 19):\n        print(\"This month has 1-19 days\")\n    else:\n        print(\"Invalid day number\")"], "evaluation": false}
{"problem_id": 160, "prompt": "def solution (a, b, n): \n\n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    for x in range(1, n+1):\n        if (a*x) % b == n:\n            y = (a*x) // b\n            return (x, y)\n    return None"], "evaluation": false}
{"problem_id": 161, "prompt": "def remove_elements(list1, list2):\n\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]"], "evaluation": true}
{"problem_id": 162, "prompt": "def sum_series(n):\n\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    sum = 0\n    while n >= 0:\n        sum += n\n        n -= 2\n    return sum"], "evaluation": true}
{"problem_id": 163, "prompt": "from math import tan, pi\ndef area_polygon(s,l):\n\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n\n    # Calculate the area of a regular polygon\n    area = (s * l) / (4 * tan(pi/s))\n\n    return area"], "evaluation": false}
{"problem_id": 164, "prompt": "import math \ndef areEquivalent(num1,num2): \n\n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n\n    def sum_of_divisors(n): \n        sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1): \n            if (n % i == 0): \n                if (n / i == i): \n                    sum = sum + i \n                else: \n                    sum = sum + (i + n//i) \n        return sum \n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)"], "evaluation": false}
{"problem_id": 165, "prompt": "def count_char_position(str1): \n\n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 166, "prompt": "def find_even_Pair(A,N): \n\n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 167, "prompt": "def next_Power_Of_2(n): \n\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    if n and not (n & (n - 1)):\n        return n\n    count = 0\n    while (n & (1 << count)):\n        count += 1\n    return 1 << count"], "evaluation": false}
{"problem_id": 168, "prompt": "def frequency(a,x): \n\n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "def get_pell(n): \n\n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n+1):\n            pell_numbers.append(2*pell_numbers[i-1] + pell_numbers[i-2])\n        return pell_numbers[n]"], "evaluation": true}
{"problem_id": 170, "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n\n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m:n+1])"], "evaluation": true}
{"problem_id": 171, "prompt": "import math\ndef perimeter_pentagon(a):\n\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n\n    # The formula to calculate the perimeter of a pentagon is 5*a\n    return 5 * a"], "evaluation": true}
{"problem_id": 172, "prompt": "def count_occurance(s):\n\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n    count = 0\n    for i in s:\n        if i == 's':\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 173, "prompt": "import re\ndef remove_splchar(text): \n\n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n\n    # Remove all non-alphanumeric characters\n    text = re.sub(r'\\W+', '', text)\n\n    return text"], "evaluation": false}
{"problem_id": 174, "prompt": "def group_keyvalue(l):\n\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d"], "evaluation": true}
{"problem_id": 175, "prompt": "def is_valid_parenthese( str1):\n\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []"], "evaluation": true}
{"problem_id": 176, "prompt": "def perimeter_triangle(a,b,c):\n\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    return a + b + c"], "evaluation": true}
{"problem_id": 177, "prompt": "def answer(L,R): \n\n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n\n    def lcm(a,b):\n        return a*b//gcd(a,b)\n\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if lcm(i, j) > R:\n                break\n            elif lcm(i, j) >= L:\n                return [i, j]\n    return \"No such pair found\""], "evaluation": false}
{"problem_id": 178, "prompt": "import re\ndef string_literals(patterns,text):\n\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n\n    # Initialize an empty list to store the matches\n    matches = []\n\n    # Iterate over each pattern\n    for pattern in patterns:\n        # Use regex to find the pattern in the text\n        match = re.findall(pattern, text)\n        # If the pattern is found, append it to the matches list\n        if match:\n            matches.append(match)\n\n    # Return the matches\n    return matches"], "evaluation": false}
{"problem_id": 179, "prompt": "def is_num_keith(x): \n\n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_keith(n):\n        return is_prime(n) and is_palindrome(n) and is_even(n)\n\n    return is_keith(x)"], "evaluation": false}
{"problem_id": 180, "prompt": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n\n    dlat = elat - slat\n    dlon = elon - slon\n\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles =  3959 * c\n\n    return miles"], "evaluation": false}
{"problem_id": 181, "prompt": "def common_prefix (arr, n): \n\n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    prefix = arr[0]\n    for i in range(1, n): \n        while arr[i].startswith(prefix) == False: \n            prefix = prefix[:-1]\n            if prefix == \"\": \n                return \"\"\n    return prefix"], "evaluation": true}
{"problem_id": 182, "prompt": "import re\ndef find_character(string):\n\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n\n    # Regular expressions\n    uppercase_regex = r'[A-Z]'\n    lowercase_regex = r'[a-z]'\n    special_character_regex = r'[^A-Za-z0-9]'\n    numeric_value_regex = r'[0-9]'\n\n    uppercase_letters = re.findall(uppercase_regex, string)\n    lowercase_letters = re.findall(lowercase_regex, string)\n    special_characters = re.findall(special_character_regex, string)\n    numeric_values = re.findall(numeric_value_regex, string)\n\n    return uppercase_letters, lowercase_letters, special_characters, numeric_values"], "evaluation": false}
{"problem_id": 183, "prompt": "def count_pairs(arr, n, k):\n\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 184, "prompt": "def greater_specificnum(list,num):\n\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    result = [i for i in list if i > num]\n    return result"], "evaluation": false}
{"problem_id": 185, "prompt": "def parabola_focus(a, b, c): \n\n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # check if the discriminant is positive\n    if D >= 0:\n        # calculate the roots\n        root1 = (-b - (D**0.5)) / (2*a)\n        root2 = (-b + (D**0.5)) / (2*a)\n        return root1, root2\n    else:\n        return \"The parabola has no real roots.\""], "evaluation": false}
{"problem_id": 186, "prompt": "import re\ndef check_literals(text, patterns):\n\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Pattern {pattern} found in the text.\")\n        else:\n            print(f\"Pattern {pattern} not found in the text.\")"], "evaluation": false}
{"problem_id": 187, "prompt": "def longest_common_subsequence(X, Y, m, n): \n\n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    # Create a table to store lengths of longest common suffixes of substrings.\n    # Note that lcsuff[i][j] contains length of longest common suffix of X[0..i-1] and Y[0..j-1].\n    # The first row and first column entries have no logical meaning, they are used only for simplicity of program\n    lcsuff = [[0 for k in range(n+1)] for l in range(m+1)]\n  \n    # To store length of the longest common substring\n    length = 0\n  \n    # To store index of the cell in lcs[][] in which the longest common substring is stored.\n    row, col = 0, 0\n  \n    /* Following steps build lcs[m+1][n+1] in bottom up fashion */\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcsuff[i][j] = lcsuff[i - 1][j - 1] + 1\n  \n                # Update the maximum length and store the index\n                if length < lcsuff[i][j]:\n                    length = lcsuff[i][j]\n                    row = i\n                    col = j\n            else:\n                lcsuff[i][j] = 0\n  \n    # Following code is used to print the longest common substring\n    lcs = [\"\"] * (length+1)\n    lcs[length] = \"\"\n  \n    # Start from the right-most-bottom-most corner and one by one store characters in lcs[]\n    while (row > 0 and col > 0):\n  \n        # If current character in X[] and Y are same, then current character is part of LCS\n        if X[row - 1] == Y[col - 1]:\n            lcs[length - 1] = X[row - 1]\n            row -= 1\n            col -= 1\n            length -= 1\n  \n        # If not same, then find the larger of two and go in the direction of larger value\n        elif lcsuff[row - 1][col] > lcs"], "evaluation": false}
{"problem_id": 188, "prompt": "def prod_Square(n):\n\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        i = 1\n        while i*i <= n:\n            j = n\n            while j >= i*i:\n                if i*i == n:\n                    return True\n                j -= i*i\n            i += 1\n        return False"], "evaluation": false}
{"problem_id": 189, "prompt": "def first_Missing_Positive(arr,n): \n\n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    def segregate(arr, size): \n        j = 0\n        for i in range(size): \n            if arr[i] <= 0 or arr[i] > size: \n                arr[i] = 1\n            else: \n                arr[j] , arr[i] = arr[i], arr[j] \n                j += 1\n        return j \n\n    n = segregate(arr, n) \n\n    for i in range(n): \n        if abs(arr[i])-1 < n and arr[abs(arr[i])-1] > 0: \n            arr[abs(arr[i])-1] = -arr[abs(arr[i])-1] \n        else: \n            arr[0] = -arr[0] \n\n    for i in range(n): \n        if abs(arr[i])-1 == n: \n            return n \n        if abs(arr[i])-1 > 0: \n            return abs(arr[i])-1 \n\n    return n+1"], "evaluation": false}
{"problem_id": 190, "prompt": "def count_Intgral_Points(x1,y1,x2,y2): \n\n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    # Check if the points are integral\n    if x1.is_integer() and y1.is_integer() and x2.is_integer() and y2.is_integer():\n        return 1\n    else:\n        return 0"], "evaluation": false}
{"problem_id": 191, "prompt": "def check_monthnumber(monthname3):\n\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    if monthname3 in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return \"The month has 30 days.\"\n    else:\n        return \"The month does not have 30 days.\""], "evaluation": false}
{"problem_id": 192, "prompt": "def check_String(str): \n\n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    if any(char.isdigit() for char in str) and any(char.isalpha() for char in str):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 193, "prompt": "def remove_tuple(test_tup):\n\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))"], "evaluation": true}
{"problem_id": 194, "prompt": "def octal_To_Decimal(n):  \n\n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    return int(str(n), 8)"], "evaluation": true}
{"problem_id": 195, "prompt": "def first(arr,x,n): \n\n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    for i in range(0, n): \n        if (arr[i] == x): \n            return i \n    return -1"], "evaluation": true}
{"problem_id": 196, "prompt": "def remove_tuples(test_list, K):\n\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    return [i for i in test_list if len(i) != K]"], "evaluation": true}
{"problem_id": 197, "prompt": "def find_exponentio(test_tup1, test_tup2):\n\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    def exponentiation(base, exponent):\n        return base ** exponent\n\n    result = []\n    for tup in (test_tup1, test_tup2):\n        for i in tup:\n            result.append(exponentiation(i[0], i[1]))\n    return result"], "evaluation": false}
{"problem_id": 198, "prompt": "import math\ndef largest_triangle(a,b): \n\n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n\n    def distance(x1, y1, x2, y2):\n        return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n    def largest_triangle_in_ellipse(a, b):\n        # The largest triangle that can be inscribed in an ellipse is a right triangle.\n        # The hypotenuse of this triangle is the diameter of the ellipse.\n        # The other two sides are the semi-major and semi-minor axes of the ellipse.\n        # The largest triangle that can be inscribed in an ellipse is a right triangle.\n        # The hypotenuse of this triangle is the diameter of the ellipse.\n        # The other two sides are the semi-major and semi-minor axes of the ellipse.\n        return (a * b) / math.sqrt(a**2 + b**2)\n\n    return largest_triangle_in_ellipse(a, b)"], "evaluation": false}
{"problem_id": 199, "prompt": "def highest_Power_of_2(n): \n\n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    if n and not (n & (n - 1)):\n        return n\n    else:\n        return highest_Power_of_2(n & (n - 1))"], "evaluation": true}
{"problem_id": 200, "prompt": "def position_max(list1):\n\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    max_value = max(list1)\n    max_positions = [i for i, x in enumerate(list1) if x == max_value]\n    return max_positions"], "evaluation": true}
