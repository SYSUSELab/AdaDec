{"problem_id": 1, "prompt": "/no_think\nR = 3\nC = 3\ndef min_cost(cost, m, n): \n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n    # Create a 2D array to store the minimum cost to reach each cell\n    dp = [[0 for _ in range(C)] for _ in range(R)]\n    # Initialize the starting cell\n    dp[0][0] = cost[0][0]\n    # Fill the first row\n    for i in range(1, C):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    # Fill the first column\n    for i in range(1, R):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    # Fill the rest of the dp table\n    for i in range(1, R):\n        for j in range(1, C):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    return dp[m][n]"], "evaluation": false}
{"problem_id": 2, "prompt": "/no_think\ndef similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    # code here"], "evaluation": false}
{"problem_id": 3, "prompt": "/no_think\nimport math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 4, "prompt": "/no_think\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    # Create a max heap\n    max_heap = [-num for num in nums]\n    hq.heapify(max_heap)\n    # Extract the largest elements\n    largest_numbers = []\n    for _ in range(n):\n        largest_numbers.append(-hq.heappop(max_heap))\n    return largest_numbers"], "evaluation": true}
{"problem_id": 5, "prompt": "/no_think\ndef count_ways(n): \n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    # Initialize a list to store the number of ways for each position\n    dp = [0] * (n + 1)\n    dp[0] = 1  # Base case: 1 way to fill a 3x0 board\n    dp[1] = 0  # Base case: 0 ways to fill a 3x1 board\n    dp[2] = 3  # Base case: 3 ways to fill a 3x2 board\n    \n    for i in range(3, n + 1):\n        # Recurrence relation: dp[i] = dp[i-1] + 2 * dp[i-2]\n        dp[i] = dp[i-1] + 2 * dp[i-2]\n    \n    return dp[n]"], "evaluation": false}
{"problem_id": 6, "prompt": "/no_think\ndef differ_At_One_Bit_Pos(a,b): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    # YOUR CODE HERE\n    # Check if the XOR of a and b has exactly one bit set\n    xor = a ^ b\n    # Check if xor is a power of two\n    return xor != 0 and (xor & (xor - 1)) == 0"], "evaluation": true}
{"problem_id": 7, "prompt": "/no_think\nimport re\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"], "evaluation": true}
{"problem_id": 8, "prompt": "/no_think\ndef square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))"], "evaluation": true}
{"problem_id": 9, "prompt": "/no_think\ndef find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    # Your code here\n    # The function should return the minimum number of rotations required to get the same string.\n    # For example, for \"abab\", the minimum number of rotations is 2.\n    # For \"aaaaa\", the minimum number is 1.\n    # For \"abc\", the minimum is 3.\n    # For \"a\", the minimum is 1.\n    # For \"aa\", the minimum is 1.\n    # For \"ab\", the minimum is 2.\n    # For \"aba\", the minimum is 2.\n    # For \"abab\", the minimum is 2.\n    # For \"ababa\", the minimum is 2.\n    # For \"ababab\", the minimum is 3.\n    # For \"abababa\", the minimum is 3.\n    # For \"abababab\", the minimum is 4.\n    # For \"ababababa\", the minimum is 4.\n    # For \"ababababab\", the minimum is 5.\n    # For \"abababababa\", the minimum is 5.\n    # For \"abababababab\", the minimum is 6.\n    # For \"ababababababa\", the minimum is 6.\n    # For \"ababababababab\", the minimum is 7.\n    # For \"abababababababa\", the minimum is 7.\n    # For \"abababababababab\", the minimum is 8.\n    # For \"ababababababababa\", the minimum is 8.\n    # For \"ababababababababab\", the minimum is 9.\n    # For \"abababababababababa\", the minimum is 9.\n    # For \"abababababababababab\", the minimum is 10.\n    # For \"ababababababababababa\", the minimum is 10.\n    # For \"ababababababababababab\", the minimum is 11.\n    # For \"abababababababababababa\", the minimum is 11.\n    # For \"abababababababababababab\", the minimum is 12.\n    # For \"ababababababababababababa\","], "evaluation": false}
{"problem_id": 10, "prompt": "/no_think\nimport heapq\ndef small_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n    return heapq.nsmallest(n, list1)"], "evaluation": true}
{"problem_id": 11, "prompt": "/no_think\ndef remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    # code here\n    pass"], "evaluation": false}
{"problem_id": 12, "prompt": "/no_think\ndef sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    # Sort the matrix based on the sum of each row\n    M.sort(key=lambda row: sum(row))\n    return M"], "evaluation": true}
{"problem_id": 13, "prompt": "/no_think\nfrom collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n    # Your code here\n    # Create a Counter object from the list of words\n    word_counts = Counter(words)\n    # Get the most common words\n    most_common = word_counts.most_common()\n    # Return the most common words\n    return most_common"], "evaluation": false}
{"problem_id": 14, "prompt": "/no_think\ndef find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    return (l*b*h)/3"], "evaluation": false}
{"problem_id": 15, "prompt": "/no_think\nimport re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n    # Your code here\n    return re.split('(?=[A-Z])', text)"], "evaluation": false}
{"problem_id": 16, "prompt": "/no_think\nimport re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches"], "evaluation": false}
{"problem_id": 17, "prompt": "/no_think\ndef square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    return 4 * a"], "evaluation": true}
{"problem_id": 18, "prompt": "/no_think\nNO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n    # Initialize an array to keep track of characters present in the second string\n    present = [False] * NO_OF_CHARS\n\n    # Mark characters present in the second string\n    for char in second_string:\n        present[ord(char)] = True\n\n    # Iterate through each character in the first string\n    result = []\n    for char in string:\n        if not present[ord(char)]:\n            result.append(char)\n\n    return ''.join(result)"], "evaluation": false}
{"problem_id": 19, "prompt": "/no_think\ndef test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    # Your code here\n    # Check if the length of the array is greater than the number of unique elements\n    return len(arraynums) != len(set(arraynums))"], "evaluation": true}
{"problem_id": 20, "prompt": "/no_think\ndef is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x == 1:\n        return True\n    if x == 2:\n        return True\n    if x == 3:\n        return True\n    if x == 4:\n        return False\n    if x == 5:\n        return False\n    if x == 6:\n        return False\n    if x == 7:\n        return False\n    if x == 8:\n        return True\n    if x == 9:\n        return False\n    if x == 10:\n        return False\n    if x == 11:\n        return False\n    if x == 12:\n        return False\n    if x == 13:\n        return False\n    if x == 14:\n        return False\n    if x == 15:\n        return True\n    if x == 16:\n        return False\n    if x == 17:\n        return False\n    if x == 18:\n        return False\n    if x == 19:\n        return False\n    if x == 20:\n        return False\n    if x == 21:\n        return False\n    if x == 22:\n        return False\n    if x == 23:\n        return False\n    if x == 24:\n        return False\n    if x == 25:\n        return False\n    if x == 26:\n        return False\n    if x == 27:\n        return False\n    if x == 28:\n        return False\n    if x == 29:\n        return False\n    if x == 30:\n        return False\n    if x == 31:\n        return True\n    if x == 32:\n        return False\n    if x == 33:\n        return False\n    if x == 34:\n        return False\n    if x == 35:\n        return False\n    if x == 36:\n        return False\n    if x == 37:\n        return False\n    if x == 38:\n        return False\n    if x == 39:\n        return False\n    if x == 40:\n        return False\n    if x == 41:\n        return False\n    if x == 42"], "evaluation": false}
{"problem_id": 21, "prompt": "/no_think\ndef multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    # Initialize a list to store the multiples\n    multiples = []\n    # Loop from 1 to m\n    for i in range(1, m+1):\n        # Append the multiple to the list\n        multiples.append(i * n)\n    # Return the list of multiples\n    return multiples"], "evaluation": true}
{"problem_id": 22, "prompt": "/no_think\ndef find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1"], "evaluation": true}
{"problem_id": 23, "prompt": "/no_think\ndef maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    max_sum = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max_sum:\n                max_sum = list1[i][j]\n    return max_sum"], "evaluation": false}
{"problem_id": 24, "prompt": "/no_think\ndef binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal"], "evaluation": false}
{"problem_id": 25, "prompt": "/no_think\ndef find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    # code here\n    product = 1\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[i] == arr[j]:\n                count +=1\n        if count ==1:\n            product *= arr[i]\n    return product"], "evaluation": true}
{"problem_id": 26, "prompt": "/no_think\ndef check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    return all(x in test_list for x in K)"], "evaluation": false}
{"problem_id": 27, "prompt": "/no_think\nimport re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    # Your code here\n    for i in range(len(list)):\n        list[i] = re.sub(r'\\d', '', list[i])\n    return list"], "evaluation": true}
{"problem_id": 28, "prompt": "/no_think\ndef binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    # YOUR CODE HERE\n    pass"], "evaluation": false}
{"problem_id": 29, "prompt": "/no_think\ndef get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate through the array\n    for i in range(arr_size):\n        # XOR the current element with the result\n        result ^= arr[i]\n    \n    # Return the result\n    return result"], "evaluation": true}
{"problem_id": 30, "prompt": "/no_think\ndef count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 31, "prompt": "/no_think\ndef func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 32, "prompt": "/no_think\nimport math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n    # Your code here\n    # Step 1: Divide n by 2 until it's odd\n    while n % 2 == 0:\n        n = n // 2\n    # Step 2: Check for odd factors starting from 3 up to sqrt(n)\n    i = 3\n    max_prime = -1\n    while i * i <= n:\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n        i += 2\n    # Step 3: If remaining n is a prime greater than 2\n    if n > 2:\n        max_prime = n\n    return max_prime"], "evaluation": false}
{"problem_id": 33, "prompt": "/no_think\ndef decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N == 0:\n        return '0'\n    binary = ''\n    while N > 0:\n        remainder = N % 2\n        binary = str(remainder) + binary\n        N = N // 2\n    return binary"], "evaluation": false}
{"problem_id": 34, "prompt": "/no_think\ndef find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    # Your code here\n    # The array is sorted, so we can use binary search to find the missing number.\n    low = 0\n    high = N\n    while low <= high:\n        mid = (low + high) // 2\n        if ar[mid] == mid:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low"], "evaluation": false}
{"problem_id": 35, "prompt": "/no_think\ndef find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    # Your code here\n    return 0"], "evaluation": false}
{"problem_id": 36, "prompt": "/no_think\ndef find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 37, "prompt": "/no_think\ndef sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 38, "prompt": "/no_think\ndef div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    # Find the first even and odd numbers in the list\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n            break\n        else:\n            first_odd = num\n            break\n    # Check if both even and odd numbers are found\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        return \"No even or odd number found in the list\""], "evaluation": false}
{"problem_id": 39, "prompt": "/no_think\nimport heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    # Count the frequency of each character\n    count = Counter(S)\n    # Get the characters and their frequencies\n    chars = list(count.keys())\n    # Sort the characters based on their frequency in descending order\n    chars.sort(key=lambda x: count[x], reverse=True)\n    # Create a max heap based on the frequency\n    heap = []\n    for char in chars:\n        heapq.heappush(heap, (-count[char], char))\n    # Initialize the result string\n    result = []\n    # Keep track of the previous character\n    prev = None\n    while heap:\n        # Get the character with the highest frequency\n        neg_count, char = heapq.heappop(heap)\n        count_char = -neg_count\n        # If the previous character is the same as the current character, we need to wait until the next iteration\n        if prev and prev == char:\n            # If the heap is empty, it's not possible to rearrange the string\n            if not heap:\n                return \"\"\n            # Get the next character with the highest frequency\n            neg_count2, char2 = heapq.heappop(heap)\n            count_char2 = -neg_count2\n            # Decrease the count of the second character\n            count_char2 -= 1\n            # Push the second character back into the heap\n            if count_char2 > 0:\n                heapq.heappush(heap, (-count_char2, char2))\n            # Add the second character to the result\n            result.append(char2)\n            # Set the previous character to the second character\n            prev = char2\n        else:\n            # Add the current character to the result\n            result.append(char)\n            # Decrease the count of the current character\n            count_char -= 1\n            # Push the current character back into the heap if it still has remaining count\n            if count_char > 0:\n                heapq.heappush(heap, (-count_char, char))\n            # Set the previous character to the current character\n            prev = char\n    # Join the result list into a string\n    return ''.join(result)"], "evaluation": false}
{"problem_id": 40, "prompt": "/no_think\nfrom collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    # Flatten the list of lists into a single list\n    flat_list = list(chain.from_iterable(nums))\n    # Count the frequency of each element\n    freq = Counter(flat_list)\n    # Return the frequency dictionary\n    return freq"], "evaluation": true}
{"problem_id": 41, "prompt": "/no_think\ndef filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "/no_think\ndef find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    # code here\n    # Initialize a set to keep track of elements we have seen\n    seen = set()\n    # Initialize the sum to 0\n    total = 0\n    # Iterate through the array\n    for num in arr:\n        # If the element is already in the set, add it to the sum\n        if num in seen:\n            total += num\n        else:\n            # Otherwise, add it to the set\n            seen.add(num)\n    # Return the total sum\n    return total"], "evaluation": false}
{"problem_id": 43, "prompt": "/no_think\nimport re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))"], "evaluation": false}
{"problem_id": 44, "prompt": "/no_think\nimport re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 45, "prompt": "/no_think\ndef get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    # Your code here\n    # Initialize the gcd with the first element\n    gcd = l[0]\n    for num in l[1:]:\n        # Update the gcd with the current number\n        gcd = math.gcd(gcd, num)\n        # If the gcd becomes 1, return 1 immediately\n        if gcd == 1:\n            return 1\n    return gcd"], "evaluation": false}
{"problem_id": 46, "prompt": "/no_think\ndef test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    return len(set(data)) == len(data)"], "evaluation": true}
{"problem_id": 47, "prompt": "/no_think\ndef compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    # YOUR CODE HERE\n    # Compute the last digit of (B! / A!) where A < B\n    # Since B! / A! = A+1 * A+2 * ... * B\n    # So the problem reduces to finding the last digit of the product of numbers from A+1 to B\n    # But since we are dealing with last digits, we can compute the product modulo 10\n    # However, for numbers >= 5, the product will have factors of 2 and 5, leading to trailing zeros\n    # So we need to handle cases where the product contains factors of 2 and 5\n    # But since we are only interested in the last digit, we can compute the product modulo 10\n    # However, if the product has factors of 2 and 5, the last digit will be 0\n    # So we need to check if there are at least one 2 and one 5 in the product\n    # But since the product is from A+1 to B, we can count the number of 2s and 5s in the product\n    # If the count of 2s >= count of 5s, then the last digit is 0\n    # Else, we can compute the product modulo 10\n    # But how to count the number of 2s and 5s in the product from A+1 to B?\n    # We can compute the count of 2s and 5s in B! and subtract the count of 2s and 5s in A!\n    # Then, if the count of 2s >= count of 5s, the last digit is 0\n    # Else, compute the product modulo 10\n    # But how to compute the count of 2s and 5s in a factorial?\n    # The count of a prime p in n! is given by sum_{i=1}^∞ floor(n/p^i)\n    # So we can compute the count of 2s and 5s in B! and A! and subtract them\n    # Then, if the count of 2s >= count of 5s, the last digit is 0\n    # Else, compute the product modulo 10\n    # But how to compute the product modulo 10?\n    # We can compute the product of numbers from A+1 to B, taking"], "evaluation": false}
{"problem_id": 48, "prompt": "/no_think\ndef odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    # Your code here\n    # Set all odd bits (1st, 3rd, 5th, etc.) to 1\n    # For example, if n is 0, return 0\n    # If n is 1, return 1\n    # If n is 2, return 3 (binary 11)\n    # If n is 4, return 7 (binary 111)\n    # If n is 8, return 15 (binary 1111)\n    # If n is 16, return 31 (binary 11111)\n    # If n is 32, return 63 (binary 111111)\n    # If n is 64, return 127 (binary 1111111)\n    # If n is 128, return 255 (binary 11111111)\n    # If n is 256, return 511 (binary 111111111)\n    # If n is 512, return 1023 (binary 1111111111)\n    # If n is 1024, return 2047 (binary 11111111111)\n    # If n is 2048, return 4095 (binary 111111111111)\n    # If n is 4096, return 8191 (binary 1111111111111)\n    # If n is 8192, return 16383 (binary 11111111111111)\n    # If n is 16384, return 32767 (binary 111111111111111)\n    # If n is 32768, return 65535 (binary 1111111111111111)\n    # If n is 65536, return 131071 (binary 1111111111"], "evaluation": false}
{"problem_id": 49, "prompt": "/no_think\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    # Your code here\n    return [nums[i][N] for i in range(len(nums))]"], "evaluation": true}
{"problem_id": 50, "prompt": "/no_think\ndef min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))"], "evaluation": false}
{"problem_id": 51, "prompt": "/no_think\ndef check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        print(\"Equilateral triangle\")\n    else:\n        print(\"Not an equilateral triangle\")"], "evaluation": false}
{"problem_id": 52, "prompt": "/no_think\ndef parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    return b * h"], "evaluation": true}
{"problem_id": 53, "prompt": "/no_think\ndef check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if len(str) == 0:\n        return False\n    return str[0] == str[-1]"], "evaluation": false}
{"problem_id": 54, "prompt": "/no_think\ndef counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    # Find the maximum value in the list\n    max_val = max(my_list)\n    # Create a count array of size max_val + 1\n    count = [0] * (max_val + 1)\n    # Count the occurrences of each element\n    for num in my_list:\n        count[num] += 1\n    # Create the sorted array\n    sorted_list = []\n    for i in range(len(count)):\n        sorted_list.extend([i] * count[i])\n    return sorted_list"], "evaluation": true}
{"problem_id": 55, "prompt": "/no_think\nimport math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n    return a * (r ** (n-1))"], "evaluation": true}
{"problem_id": 56, "prompt": "/no_think\ndef check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    rev = int(str(n)[::-1])\n    return 2*rev -1 == n"], "evaluation": true}
{"problem_id": 57, "prompt": "/no_think\ndef find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    # Your code here\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize the result as an empty string\n    result = \"\"\n    # Iterate through the sorted array\n    for num in arr:\n        # Append the current number to the result\n        result += str(num)\n    # Return the result as an integer\n    return int(result)"], "evaluation": true}
{"problem_id": 58, "prompt": "/no_think\ndef opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    return (x > 0 and y < 0) or (x < 0 and y > 0)"], "evaluation": true}
{"problem_id": 59, "prompt": "/no_think\ndef is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    return (3 * n * n - 2 * n)"], "evaluation": true}
{"problem_id": 60, "prompt": "/no_think\ndef max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    # Initialize a dictionary to store the maximum length of subsequence ending at each element\n    dp = {}\n    for i in range(n):\n        # For each element, check all previous elements\n        for j in range(i):\n            diff = arr[i] - arr[j]\n            # If the difference is not in the dictionary, set it to 1\n            if diff not in dp:\n                dp[diff] = 1\n            # Update the maximum length for the current difference\n            dp[diff] = max(dp[diff], dp.get(diff - arr[j], 1) + 1)\n    return max(dp.values()) if dp else 0"], "evaluation": false}
{"problem_id": 61, "prompt": "/no_think\nfrom collections import defaultdict\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n    # Your code here\n    prefix = [0]*(n+1)\n    for i in range(1,n+1):\n        prefix[i] = prefix[i-1] + int(s[i-1])\n    count = 0\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            if (prefix[j] - prefix[i-1]) == (j - i + 1):\n                count +=1\n    return count"], "evaluation": false}
{"problem_id": 62, "prompt": "/no_think\ndef smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    # your code here\n    return min(xs)"], "evaluation": true}
{"problem_id": 63, "prompt": "/no_think\ndef max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"], "evaluation": false}
{"problem_id": 64, "prompt": "/no_think\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])  # Sort by the second element of the tuple"], "evaluation": true}
{"problem_id": 65, "prompt": "/no_think\ndef recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"], "evaluation": true}
{"problem_id": 66, "prompt": "/no_think\ndef pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "/no_think\ndef bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    # Initialize a 2D list to store the Stirling numbers of the second kind\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base case: there is exactly one way to partition a set of 0 elements\n    bell[0][0] = 1\n    \n    # Fill the bell table\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + j * bell[i - 1][j]\n    \n    # The nth Bell number is the sum of the Stirling numbers of the second kind for all k from 1 to n\n    return sum(bell[n][k] for k in range(1, n + 1))"], "evaluation": true}
{"problem_id": 68, "prompt": "/no_think\ndef is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    # Your code here\n    # A monotonic array is one that is either entirely non-increasing or non-decreasing.\n    # For example, [1, 2, 3, 4] is monotonic increasing, [4, 3, 2, 1] is monotonic decreasing,\n    # and [1, 1, 2, 2, 2] is also monotonic increasing. However, [1, 3, 2, 4] is not monotonic.\n    # So, the function should return True if the array is monotonic, and False otherwise.\n    # You can assume that the array is non-empty.\n    # You can assume that the array has at least one element.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array has at least two elements.\n    # You can assume that the array"], "evaluation": false}
{"problem_id": 69, "prompt": "/no_think\ndef is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 70, "prompt": "/no_think\ndef get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    # Check if all tuples in the input list have the same length\n    lengths = [len(t) for t in Input]\n    return all(lengths[0] == length for length in lengths)"], "evaluation": false}
{"problem_id": 71, "prompt": "/no_think\ndef comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    # Initialize the gap\n    gap = len(nums)\n    # Flag to check if the list is sorted\n    is_sorted = False\n    # Loop until the list is sorted\n    while not is_sorted:\n        # Calculate the new gap\n        gap = gap // 2\n        # If the gap is 1, check if the list is sorted\n        if gap == 1:\n            is_sorted = True\n            # Check if the list is sorted\n            for i in range(len(nums) - 1):\n                if nums[i] > nums[i + 1]:\n                    is_sorted = False\n                    break\n        # Swap elements if they are in the wrong order\n        for i in range(0, len(nums) - gap, gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums"], "evaluation": false}
{"problem_id": 72, "prompt": "/no_think\ndef dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if j**2 - i**2 == n:\n                return True\n    return False"], "evaluation": true}
{"problem_id": 73, "prompt": "/no_think\nimport re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n    # Your code here\n    return re.split(r'(?<=\\W)(?=\\w)|(?<=\\w)(?=\\W)', text)"], "evaluation": false}
{"problem_id": 74, "prompt": "/no_think\ndef is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 75, "prompt": "/no_think\ndef find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    # code here\n    return [t for t in test_list if all(x % K == 0 for x in t)]"], "evaluation": false}
{"problem_id": 76, "prompt": "/no_think\ndef count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    # Your code here\n    # The function should return the total number of squares in a m x n rectangle.\n    # For example, in a 2x3 rectangle, there are 8 squares (1x1: 6, 2x2: 2)\n    # So, the function should return 8 for m=2 and n=3.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that m and n are positive integers.\n    # You can assume that"], "evaluation": false}
{"problem_id": 77, "prompt": "/no_think\ndef is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum"], "evaluation": false}
{"problem_id": 78, "prompt": "/no_think\ndef count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n+1):\n        bits = bin(i).count('1')\n        if bits % 2 == 1:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 79, "prompt": "/no_think\ndef word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    # Check if the length of the string is odd\n    if len(s) % 2 == 1:\n        return \"The length of the word is odd.\"\n    else:\n        return \"The length of the word is even.\""], "evaluation": false}
{"problem_id": 80, "prompt": "/no_think\ndef tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    return n * (n + 1) * (n + 2) // 6"], "evaluation": true}
{"problem_id": 81, "prompt": "/no_think\ndef zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    # Remove the line below and write your code here\n    return zip(test_tup1, test_tup2)"], "evaluation": false}
{"problem_id": 82, "prompt": "/no_think\nimport math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3"], "evaluation": true}
{"problem_id": 83, "prompt": "/no_think\ndef get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    return sum(ord(c) for c in strr) % 256"], "evaluation": false}
{"problem_id": 84, "prompt": "/no_think\ndef sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - dp[i - 1]]\n    return dp[n]"], "evaluation": false}
{"problem_id": 85, "prompt": "/no_think\nimport math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2"], "evaluation": true}
{"problem_id": 86, "prompt": "/no_think\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"], "evaluation": true}
{"problem_id": 87, "prompt": "/no_think\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return dict1 | dict2 | dict3"], "evaluation": false}
{"problem_id": 88, "prompt": "/no_think\nimport collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n    # Create a frequency dictionary\n    freq = {}\n    for num in list1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq"], "evaluation": true}
{"problem_id": 89, "prompt": "/no_think\ndef closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 90, "prompt": "/no_think\ndef len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"], "evaluation": true}
{"problem_id": 91, "prompt": "/no_think\ndef find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    # Check if the substring is present in the string\n    if sub_str in str1:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 92, "prompt": "/no_think\ndef is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    # Check if the number has exactly 3 digits\n    if len(str(n)) != 3:\n        return False\n    # Convert the number to a string\n    s = str(n)\n    # Check if the first and last digits are the same and the middle digit is different\n    return s[0] == s[2] and s[0] != s[1]"], "evaluation": false}
{"problem_id": 93, "prompt": "/no_think\ndef power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)"], "evaluation": true}
{"problem_id": 94, "prompt": "/no_think\nfrom operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n    # code here\n    # Find the minimum value in the list\n    min_val = min(test_list)\n    # Find the index of the minimum value\n    min_index = test_list.index(min_val)\n    # Return the tuple at the minimum index\n    return test_list[min_index]"], "evaluation": false}
{"problem_id": 95, "prompt": "/no_think\ndef Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    min_len = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_len = j - i\n            if current_len < min_len:\n                min_len = current_len\n    return min_len"], "evaluation": false}
{"problem_id": 96, "prompt": "/no_think\ndef divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 97, "prompt": "/no_think\ndef frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 98, "prompt": "/no_think\ndef multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    # Multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    # Divide the product by the length of the list\n    return product / len(numbers)"], "evaluation": true}
{"problem_id": 99, "prompt": "/no_think\ndef decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"], "evaluation": true}
{"problem_id": 100, "prompt": "/no_think\nimport sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n    # Check if the number is a palindrome\n    if str(num) == str(num)[::-1]:\n        # If it is a palindrome, check if it's the smallest possible\n        # Increment the number and check again\n        return next_smallest_palindrome(num + 1)\n    else:\n        # If it's not a palindrome, check the next number\n        return next_smallest_palindrome(num + 1)"], "evaluation": false}
{"problem_id": 101, "prompt": "/no_think\ndef kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 102, "prompt": "/no_think\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    return word[0] + word[1:].replace('_', ' ')"], "evaluation": false}
{"problem_id": 103, "prompt": "/no_think\ndef eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    # Initialize a 2D list to store the eulerian numbers\n    # a(n, m) is the number of permutations of n elements with m ascents.\n    # The recurrence relation is a(n, m) = (n - m) * a(n - 1, m - 1) + (m + 1) * a(n - 1, m)\n    # Base cases: a(0, 0) = 1, a(n, 0) = 1 for all n >= 0, a(n, m) = 0 if m >= n\n    # The function should return the eulerian number a(n, m)\n    # You can use dynamic programming to compute the values\n    # You can also use the formula a(n, m) = sum_{k=0}^m (-1)^k * C(m + 1, k) * (m + 1 - k)^n\n    # but that might be computationally expensive for large n and m\n    # So it's better to use the recurrence relation\n    # So we will use dynamic programming to compute the values\n    # Initialize a 2D list of size (n+1) x (m+1)\n    # The first row is a(0, 0) = 1, and a(0, m) = 0 for m > 0\n    # The first column is a(n, 0) = 1 for all n >= 0\n    # Then fill the rest of the table using the recurrence relation\n    # But since m can be up to n-1, we need to make sure that the table is of size (n+1) x (n) or (n+1) x (m+1)\n    # But since m can be up to n-1, we can create a table of size (n+1) x (n)\n    # However, if m is larger than n, then a(n, m) = 0\n    # So the function should first check if m >= n, then return 0\n    # Also, if m < 0, return 0\n    # So first, check if m >= n or m < 0, return 0\n    # Then, create a 2D list of size (n+1) x (n)\n    # Initialize the first row and first column\n    # Then fill the rest"], "evaluation": false}
{"problem_id": 104, "prompt": "/no_think\ndef sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    # Your code here\n    for i in range(len(input_list)):\n        input_list[i].sort(key=lambda x: x)\n    return input_list"], "evaluation": false}
{"problem_id": 105, "prompt": "/no_think\ndef count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    count = 0\n    for i in lst:\n        if i:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 106, "prompt": "/no_think\ndef add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)"], "evaluation": false}
{"problem_id": 107, "prompt": "/no_think\ndef count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1):\n        # Check if the number is hexadecimal\n        # Hexadecimal numbers are numbers that contain digits from 0-9 and A-F (case-insensitive)\n        # Convert the number to hexadecimal and check if it contains any characters other than 0-9 and A-F\n        hex_str = hex(i)[2:]  # [2:] to remove the '0x' prefix\n        if all(c in '0123456789ABCDEF' for c in hex_str):\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "/no_think\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    # Create a heap with the first element of each list\n    heap = []\n    for i in range(3):\n        if locals()[f'num{i+1}'] is not None:\n            heapq.heappush(heap, (locals()[f'num{i+1}'][0], i, 0))\n    # Initialize the result list\n    result = []\n    while heap:\n        val, list_idx, elem_idx = heapq.heappop(heap)\n        result.append(val)\n        if elem_idx + 1 < len(locals()[f'num{list_idx+1}']):\n            heapq.heappush(heap, (locals()[f'num{list_idx+1}'][elem_idx + 1], list_idx, elem_idx + 1))\n    return result"], "evaluation": false}
{"problem_id": 109, "prompt": "/no_think\ndef odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 110, "prompt": "/no_think\ndef extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 111, "prompt": "/no_think\ndef common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    # Initialize a set to store the common elements\n    common_elements = set()\n    \n    # Iterate through each sublist in the nested list\n    for sublist in nestedlist:\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # Check if the element is present in all sublists\n            # If it is, add it to the common_elements set\n            if all(element in sublist2 for sublist2 in nestedlist):\n                common_elements.add(element)\n    \n    # Return the common elements as a sorted list\n    return sorted(common_elements)"], "evaluation": false}
{"problem_id": 112, "prompt": "/no_think\ndef perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    return 2 * math.pi * diameter + 2 * math.pi * height"], "evaluation": false}
{"problem_id": 113, "prompt": "/no_think\ndef check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    # Check if the string is empty\n    if not text:\n        return False\n    # Check if the string contains only digits\n    if text.isdigit():\n        return True\n    # Check if the string starts with a minus sign and the rest are digits\n    if text.startswith('-') and text[1:].isdigit():\n        return True\n    # Check if the string starts with a plus sign and the rest are digits\n    if text.startswith('+') and text[1:].isdigit():\n        return True\n    # If none of the above, it's not an integer\n    return False"], "evaluation": true}
{"problem_id": 114, "prompt": "/no_think\nfrom collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n    # Count the frequency of each tuple in the list\n    freq = Counter(test_list)\n    # Create a list of tuples with the tuple and its frequency\n    result = [(t, freq[t]) for t in test_list]\n    return result"], "evaluation": false}
{"problem_id": 115, "prompt": "/no_think\ndef empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    for d in list1:\n        if not d:\n            return True\n    return False"], "evaluation": false}
{"problem_id": 116, "prompt": "/no_think\ndef tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    # Convert the tuple to a string, then to an integer\n    return int(''.join(map(str, nums)))"], "evaluation": true}
{"problem_id": 117, "prompt": "/no_think\ndef list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    return [float(i) for i in test_list if isinstance(i, (int, float))]"], "evaluation": false}
{"problem_id": 118, "prompt": "/no_think\ndef string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    return list(string)"], "evaluation": false}
{"problem_id": 119, "prompt": "/no_think\ndef search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    # Your code here\n    # The array is sorted, so we can use binary search\n    low = 0\n    high = len(arr) - 1\n    while low <= high :\n        mid = (low + high) // 2\n        # Check if mid is the unique element\n        if mid < len(arr) - 1 and arr[mid] == arr[mid + 1] :\n            # The unique element is after the duplicate\n            low = mid + 2\n        elif mid > 0 and arr[mid] == arr[mid - 1] :\n            # The unique element is after the duplicate\n            low = mid + 2\n        else :\n            return arr[mid]\n    return -1"], "evaluation": false}
{"problem_id": 120, "prompt": "/no_think\ndef max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 121, "prompt": "/no_think\ndef check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    A.sort()\n    for i in range(n-2):\n        if i > 0 and A[i] == A[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                count[0] += 1\n                while left < right and A[left] == A[left+1]:\n                    left += 1\n                while left < right and A[right] == A[right-1]:\n                    right -= 1\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count[0]"], "evaluation": false}
{"problem_id": 122, "prompt": "/no_think\nMAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    # Initialize an array to store the smart numbers\n    smart = [0] * (n + 1) \n    # The first smart number is 1\n    smart[1] = 1\n    # The count of smart numbers found so far\n    count = 1\n    # The number to check for being a smart number\n    num = 2\n    # Loop until we find the n-th smart number\n    while count < n: \n        # Check if the current number is a smart number\n        if is_smart(num): \n            count += 1\n            smart[count] = num\n        num += 1\n    return smart[n]"], "evaluation": false}
{"problem_id": 123, "prompt": "/no_think\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    def sum_of_proper_divisors(n):\n        \"\"\"\n        Helper function to calculate the sum of proper divisors of a number.\n        \"\"\"\n        if n == 1:\n            return 0\n        sum_div = 1  # 1 is a proper divisor for all n > 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                sum_div += i\n                if i != n // i:\n                    sum_div += n // i\n        return sum_div\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        divisor_sum = sum_of_proper_divisors(num)\n        if divisor_sum > limit:\n            continue\n        if divisor_sum != num and sum_of_proper_divisors(divisor_sum) == num:\n            amicable_sum += num\n    return amicable_sum"], "evaluation": true}
{"problem_id": 124, "prompt": "/no_think\nimport cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n    c = a + b * 1j\n    return cmath.phase(c)"], "evaluation": false}
{"problem_id": 125, "prompt": "/no_think\ndef find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    # Initialize variables\n    max_diff = 0\n    current_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through the string\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        current_diff = count_0 - count_1\n\n        # Update max_diff if current_diff is greater than max_diff\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    return max_diff"], "evaluation": false}
{"problem_id": 126, "prompt": "/no_think\ndef sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    # Find the GCD of a and b\n    gcd = math.gcd(a, b)\n    # Find the sum of divisors of the GCD\n    sum_divisors = 0\n    for i in range(1, gcd + 1):\n        if gcd % i == 0:\n            sum_divisors += i\n    return sum_divisors"], "evaluation": false}
{"problem_id": 127, "prompt": "/no_think\ndef multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 128, "prompt": "/no_think\ndef long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    # code here"], "evaluation": false}
{"problem_id": 129, "prompt": "/no_think\ndef magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n    # Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]):\n        raise ValueError(\"The matrix is not a square.\")\n    # Check if all elements are integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                raise ValueError(\"All elements must be integers.\")\n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(row) != len(my_matrix[0]):\n            raise ValueError(\"All rows must have the same length.\")\n    # Check if the sum of each row is the same\n    row_sums = [sum(row) for row in my_matrix]\n    if not all(s == row_sums[0] for s in row_sums):\n        raise ValueError(\"All rows must have the same sum.\")\n    # Check if the sum of each column is the same\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix[0]))]\n    if not all(s == col_sums[0] for s in col_sums):\n        raise ValueError(\"All columns must have the same sum.\")\n    # Check if the sum of the main diagonal is the same as the sum of the other diagonal\n    main_diag = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    other_diag = sum(my_matrix[i][len(my_matrix)-1 -i] for i in range(len(my_matrix)))\n    if main_diag != other_diag:\n        raise ValueError(\"The main diagonal and the other diagonal must have the same sum.\")\n    # If all checks pass, it's a magic square\n    return True"], "evaluation": false}
{"problem_id": 130, "prompt": "/no_think\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [k for k, v in freq.items() if v == max_freq]\n    return max_items[0] if len(max_items) == 1 else max_items"], "evaluation": false}
{"problem_id": 131, "prompt": "/no_think\ndef reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    str_list = list(str1)\n    left = 0\n    right = len(str1) - 1\n    while left < right:\n        if str_list[left] in vowels:\n            left += 1\n            continue\n        if str_list[right] in vowels:\n            right -= 1\n            continue\n        str_list[left], str_list[right] = str_list[right], str_list[left]\n        left += 1\n        right -= 1\n    return ''.join(str_list)"], "evaluation": false}
{"problem_id": 132, "prompt": "/no_think\ndef tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    # Convert the tuple to a string\n    return ''.join(str(x) for x in tup1)"], "evaluation": true}
{"problem_id": 133, "prompt": "/no_think\ndef sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"], "evaluation": true}
{"problem_id": 134, "prompt": "/no_think\ndef check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    # code here\n    pass"], "evaluation": false}
{"problem_id": 135, "prompt": "/no_think\ndef hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return n*(2*n - 1)"], "evaluation": true}
{"problem_id": 136, "prompt": "/no_think\ndef cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    if units <= 100:\n        return 0\n    elif units <= 200:\n        return (units - 100) * 5\n    elif units <= 300:\n        return (units - 200) * 10 + 500\n    elif units <= 400:\n        return (units - 300) * 15 + 1500\n    else:\n        return (units - 400) * 20 + 3500"], "evaluation": false}
{"problem_id": 137, "prompt": "/no_think\nfrom array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n    # Count the number of zeros in the array\n    zero_count = nums.count(0)\n    # Calculate the total number of elements in the array\n    total_elements = len(nums)\n    # Return the ratio of zeros\n    return zero_count / total_elements"], "evaluation": false}
{"problem_id": 138, "prompt": "/no_think\ndef is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 139, "prompt": "/no_think\ndef circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    return 2 * math.pi * r"], "evaluation": false}
{"problem_id": 140, "prompt": "/no_think\ndef extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 141, "prompt": "/no_think\ndef pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 142, "prompt": "/no_think\ndef count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 143, "prompt": "/no_think\ndef find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 144, "prompt": "/no_think\ndef sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    # code here\n\n    return 0"], "evaluation": false}
{"problem_id": 145, "prompt": "/no_think\ndef max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    # Initialize the minimum and maximum values with the first element\n    min_val = arr[0]\n    max_val = arr[0]\n    \n    # Iterate through the array to find the minimum and maximum values\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n    \n    # Return the difference between the maximum and minimum values\n    return max_val - min_val"], "evaluation": true}
{"problem_id": 146, "prompt": "/no_think\ndef ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    return sum(ord(char) for char in str1)"], "evaluation": false}
{"problem_id": 147, "prompt": "/no_think\ndef max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    # Initialize a 2D array to store the maximum path sums\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Base case: the last row\n    for i in range(n):\n        dp[m-1][i] = tri[m-1][i]\n    \n    # Fill the dp table\n    for i in range(m-2, -1, -1):\n        for j in range(i+1):\n            # The maximum path sum at (i,j) is the value of the node plus the max of the two children\n            dp[i][j] = tri[i][j] + max(dp[i+1][j], dp[i+1][j+1])\n    \n    return dp[0][0]"], "evaluation": false}
{"problem_id": 148, "prompt": "/no_think\ndef sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 149, "prompt": "/no_think\ndef longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    # Initialize a dp array where dp[i] represents the length of the longest subsequence ending at index i\n    dp = [1] * n \n\n    # Iterate through the array\n    for i in range(n):\n        # Check all previous elements\n        for j in range(i):\n            # If the absolute difference between arr[i] and arr[j] is 1, then we can extend the subsequence\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # Return the maximum value in dp\n    return max(dp)"], "evaluation": true}
{"problem_id": 150, "prompt": "/no_think\ndef does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 151, "prompt": "/no_think\ndef is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    # Your code here\n    # Implement the Euclidean algorithm to find the GCD of x and y\n    # If the GCD is 1, then the numbers are co-prime\n    # Otherwise, they are not\n    # Return True if co-prime, False otherwise\n    # Make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where x or y is zero\n    # Also, make sure to handle the case where x or y is negative\n    # Also, make sure to handle the case where"], "evaluation": false}
{"problem_id": 152, "prompt": "/no_think\ndef merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)"], "evaluation": false}
{"problem_id": 153, "prompt": "/no_think\ndef parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    x = -b/(2*a)\n    y = a*(x**2) + b*x + c\n    return (x, y)"], "evaluation": true}
{"problem_id": 154, "prompt": "/no_think\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    return [nums[i][N] for i in range(len(nums))]"], "evaluation": true}
{"problem_id": 155, "prompt": "/no_think\ndef even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 156, "prompt": "/no_think\ndef tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    return tuple(int(x) for x in tuple_str)"], "evaluation": false}
{"problem_id": 157, "prompt": "/no_think\nfrom itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 158, "prompt": "/no_think\ndef min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    # code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your"], "evaluation": false}
{"problem_id": 159, "prompt": "/no_think\ndef month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    if month in [12,1,2]:\n        print(\"Winter\")\n    elif month in [3,4,5]:\n        print(\"Spring\")\n    elif month in [6,7,8]:\n        print(\"Summer\")\n    elif month in [9,10,11]:\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month\")"], "evaluation": false}
{"problem_id": 160, "prompt": "/no_think\ndef solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    def extended_gcd(a, b):\n        if b == 0:\n            return (a, 1, 0)\n        else:\n            g, x, y = extended_gcd(b, a % b)\n            return (g, y, x - (a // b) * y)\n    \n    g, x, y = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    else:\n        return (x * (n // g), y * (n // g))"], "evaluation": false}
{"problem_id": 161, "prompt": "/no_think\ndef remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    # Your code here\n    return list1"], "evaluation": false}
{"problem_id": 162, "prompt": "/no_think\ndef sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 163, "prompt": "/no_think\nfrom math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n    return (0.5 * s * l)"], "evaluation": false}
{"problem_id": 164, "prompt": "/no_think\nimport math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n    def sumOfDivisors(n):\n        \"\"\"\n        Helper function to calculate the sum of divisors of a number.\n        \"\"\"\n        if n == 1:\n            return 1\n        sum_div = 1\n        sqrt_n = int(math.sqrt(n))\n        for i in range(2, sqrt_n + 1):\n            if n % i == 0:\n                sum_div += i\n                counterpart = n // i\n                if counterpart != i:\n                    sum_div += counterpart\n        return sum_div\n\n    return sumOfDivisors(num1) == sumOfDivisors(num2)"], "evaluation": true}
{"problem_id": 165, "prompt": "/no_think\ndef count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i]) - ord('a') == i:\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 166, "prompt": "/no_think\ndef find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    # Your code here\n\n    # Count the number of even and odd numbers in the array\n    even_count = 0\n    odd_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count +=1\n        else:\n            odd_count +=1\n\n    # The number of pairs with even xor is (even_count choose 2) + (odd_count choose 2)\n    # Because even XOR even = even, odd XOR odd = even, and even XOR odd = odd\n    return (even_count * (even_count -1) // 2) + (odd_count * (odd_count -1) // 2)"], "evaluation": true}
{"problem_id": 167, "prompt": "/no_think\ndef next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    if n <= 0:\n        return 1\n    n -= 1\n    while (n & 1) == 0:\n        n >>= 1\n    return (n << 1)"], "evaluation": false}
{"problem_id": 168, "prompt": "/no_think\ndef frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "/no_think\ndef get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n-1) * 2 + get_pell(n-2)"], "evaluation": true}
{"problem_id": 170, "prompt": "/no_think\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m:n+1])"], "evaluation": true}
{"problem_id": 171, "prompt": "/no_think\nimport math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n    return 5 * a"], "evaluation": true}
{"problem_id": 172, "prompt": "/no_think\ndef count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 173, "prompt": "/no_think\nimport re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n    return re.sub(r'[^a-zA-Z0-9]', '', text)"], "evaluation": true}
{"problem_id": 174, "prompt": "/no_think\ndef group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 175, "prompt": "/no_think\ndef is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    stack = []\n    for char in str1:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"], "evaluation": true}
{"problem_id": 176, "prompt": "/no_think\ndef perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    return a + b + c"], "evaluation": true}
{"problem_id": 177, "prompt": "/no_think\ndef answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if lcm(i,j) in range(L, R+1):\n                return (i,j)\n    return None"], "evaluation": false}
{"problem_id": 178, "prompt": "/no_think\nimport re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n    # your code here\n    for pattern in patterns:\n        if re.search(pattern,text):\n            print(f\"Found pattern: {pattern}\")\n        else:\n            print(f\"Did not find pattern: {pattern}\")\n    return"], "evaluation": false}
{"problem_id": 179, "prompt": "/no_think\ndef is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 180, "prompt": "/no_think\nfrom math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    # convert decimal degrees to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n    # compute distance\n    dlon = elon - slon\n    dlat = elat - slat\n    a = (sin(dlat/2)**2) + cos(slat)*cos(elat)*(sin(dlon/2)**2)\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    # 6371 km is the radius of the earth\n    km = 6371 * c\n    return km"], "evaluation": false}
{"problem_id": 181, "prompt": "/no_think\ndef common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    # code here \n    # find the minimum length string in the array\n    min_len = min(len(s) for s in arr)\n    # iterate through each character in the first string\n    for i in range(min_len):\n        # check if all strings have the same character at position i\n        if any(s[i] != arr[0][i] for s in arr):\n            return arr[0][:i]\n    return arr[0][:min_len]"], "evaluation": true}
{"problem_id": 182, "prompt": "/no_think\nimport re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n    uppercase = re.search(r'[A-Z]', string)\n    lowercase = re.search(r'[a-z]', string)\n    special = re.search(r'[^A-Za-z0-9]', string)\n    numeric = re.search(r'[0-9]', string)\n    return {\n        'uppercase': uppercase is not None,\n        'lowercase': lowercase is not None,\n        'special': special is not None,\n        'numeric': numeric is not None\n    }"], "evaluation": false}
{"problem_id": 183, "prompt": "/no_think\ndef count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    # Your code here\n    # Initialize a set to store the elements of the array\n    elements = set(arr)\n    # Initialize a count variable to keep track of the number of pairs\n    count = 0\n    # Iterate through each element in the set\n    for num in elements:\n        # Check if (num + k) is present in the set\n        if (num + k) in elements:\n            # Increment the count\n            count += 1\n    # Return the count\n    return count"], "evaluation": false}
{"problem_id": 184, "prompt": "/no_think\ndef greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    return [x for x in list if x > num]"], "evaluation": false}
{"problem_id": 185, "prompt": "/no_think\ndef parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    # The focus of a parabola in the form y = ax^2 + bx + c is at (h, k + 1/(4a))\n    # where h = -b/(2a) and k = c - b^2/(4a)\n    # So the focus is at (-b/(2a), c - b^2/(4a) + 1/(4a))\n    # Simplify the y-coordinate: c - (b^2 - 1)/(4a)\n    # Therefore, the focus is at (-b/(2a), c - (b^2 - 1)/(4a))\n    h = -b/(2*a)\n    k = c - (b**2)/(4*a)\n    focus = (h, k + 1/(4*a))\n    return focus"], "evaluation": true}
{"problem_id": 186, "prompt": "/no_think\nimport re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False"], "evaluation": false}
{"problem_id": 187, "prompt": "/no_think\ndef longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    # Create a table to store the lengths of the longest common subsequence.\n    dp = [[0]*(n+1) for _ in range(m+1)]\n    \n    # Fill the table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]"], "evaluation": true}
{"problem_id": 188, "prompt": "/no_think\ndef prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    for i in range(1, n):\n        for j in range(1, n):\n            if i*j == n:\n                return True\n    return False"], "evaluation": false}
{"problem_id": 189, "prompt": "/no_think\ndef first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i]-1] != arr[i]:\n            temp = arr[i]\n            arr[i] = arr[temp-1]\n            arr[temp-1] = temp\n    for i in range(n):\n        if arr[i] != i+1:\n            return i+1\n    return n+1"], "evaluation": true}
{"problem_id": 190, "prompt": "/no_think\ndef count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 191, "prompt": "/no_think\ndef check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    month_days = {\n        'january': 31,\n        'february': 28,\n        'march': 31,\n        'april': 30,\n        'may': 31,\n        'june': 30,\n        'july': 31,\n        'august': 31,\n        'september': 30,\n        'october': 31,\n        'november': 30,\n        'december': 31\n    }\n    if monthname3 in month_days:\n        return month_days[monthname3] == 30\n    else:\n        return False"], "evaluation": false}
{"problem_id": 192, "prompt": "/no_think\ndef check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    # Write your code here\n    # Check if the string contains at least one letter and one number\n    has_letter = False\n    has_number = False\n    for char in str:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n    return has_letter and has_number"], "evaluation": true}
{"problem_id": 193, "prompt": "/no_think\ndef remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    # code here"], "evaluation": false}
{"problem_id": 194, "prompt": "/no_think\ndef octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    decimal = 0\n    power = 1\n    for i in range(len(n)-1, -1, -1):\n        decimal += int(n[i]) * power\n        power *= 8\n    return decimal"], "evaluation": false}
{"problem_id": 195, "prompt": "/no_think\ndef first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    low = 0\n    high = n-1\n    res = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            res = mid\n            high = mid -1\n        elif arr[mid] < x:\n            low = mid +1\n        else:\n            high = mid -1\n    return res"], "evaluation": true}
{"problem_id": 196, "prompt": "/no_think\ndef remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    # code here\n    return [t for t in test_list if len(t) != K]"], "evaluation": true}
{"problem_id": 197, "prompt": "/no_think\ndef find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    # code here"], "evaluation": false}
{"problem_id": 198, "prompt": "/no_think\nimport math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n    # The maximum area of a triangle inscribed in an ellipse is 3/4 of the area of the ellipse.\n    # The area of the ellipse is π * a * b.\n    # So the maximum area is (3/4) * π * a * b.\n    return (3/4) * math.pi * a * b"], "evaluation": false}
{"problem_id": 199, "prompt": "/no_think\ndef highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"], "evaluation": true}
{"problem_id": 200, "prompt": "/no_think\ndef position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    # Find the maximum value in the list\n    max_val = max(list1)\n    # Find all indices where the maximum value occurs\n    max_indices = [i for i, x in enumerate(list1) if x == max_val]\n    return max_indices"], "evaluation": true}
