{"problem_id": 1, "prompt": "/no_think\nR = 3\nC = 3\ndef min_cost(cost, m, n): \n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n    # Your code here\n    if m == 0 and n == 0:\n        return 0\n    if m == 0:\n        return min_cost(cost, m, n-1)\n    if n == 0:\n        return min_cost(cost, m-1, n)\n    if cost[m][n] == 0:\n        return 0\n    if cost[m-1][n] < cost[m][n]:\n        return min_cost(cost, m-1, n)\n    if cost[m][n-1] < cost[m][n]:\n        return min_cost(cost, m, n-1)\n    return min_cost(cost, m-1, n) + min_cost(cost, m, n-1)\n    \n    if m == 0 and n == 0:\n        return 0\n    if m == 0:\n        return min_cost(cost, m, n-1)\n    if n == 0:\n        return min_cost(cost, m-1, n)\n    if cost[m][n] == 0:\n        return 0\n    if cost[m-1][n] < cost[m][n]:\n        return min_cost(cost, m-1, n)\n    if cost[m][n-1] < cost[m][n]:\n        return min_cost(cost, m, n-1)\n    return min_cost(cost, m-1, n) + min_cost(cost, m, n-1)\n\n    \n    if m == 0 and n == 0:\n        return 0\n    if m == 0:\n        return min_cost(cost, m, n-1)\n    if n == 0:\n        return min_cost(cost, m-1, n)\n    if cost[m][n] == 0:\n        return 0\n    if cost[m-1][n] < cost[m][n]:\n        return min_cost(cost, m-1, n)\n    if cost[m][n-1] < cost[m][n]:\n        return min_cost(cost, m, n-1)\n    return min_cost(cost, m-1, n) + min_cost(cost, m, n-1)\n\n    \n    if m == 0 and n == 0:\n        return 0\n    if m == 0:\n        return min_cost(cost, m, n-1)\n    if n == 0:\n        return min_cost(cost, m-1, n)\n    if cost[m"], "evaluation": false}
{"problem_id": 2, "prompt": "/no_think\ndef similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    # your code here\n    similar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            similar.append(test_tup1[i])\n    return similar"], "evaluation": false}
{"problem_id": 3, "prompt": "/no_think\nimport math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 4, "prompt": "/no_think\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    hq.heapify(nums)\n    largest = hq.heappop(nums)\n    print(largest)\n    return largest"], "evaluation": false}
{"problem_id": 5, "prompt": "/no_think\ndef count_ways(n): \n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37"], "evaluation": false}
{"problem_id": 6, "prompt": "/no_think\ndef differ_At_One_Bit_Pos(a,b): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 7, "prompt": "/no_think\nimport re\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n    # Your code here\n    pattern = r'\\b\\w{4}\\b'\n    result = re.findall(pattern, text)\n    return result"], "evaluation": false}
{"problem_id": 8, "prompt": "/no_think\ndef square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    # your code here\n    return list(map(lambda x: x**2, nums))"], "evaluation": true}
{"problem_id": 9, "prompt": "/no_think\ndef find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1 if str[0] == str[1] else 0\n    if n == 3:\n        if str[0] == str[1] == str[2]:\n            return 0\n        elif str[0] == str[1] and str[1] == str[2]:\n            return 1\n        elif str[0] == str[2] and str[1] == str[2]:\n            return 2\n        else:\n            return 0\n    if n == 4:\n        if str[0] == str[1] == str[2] == str[3]:\n            return 0\n        elif str[0] == str[1] == str[2] and str[3] == str[0]:\n            return 1\n        elif str[0] == str[1] == str[3] and str[2] == str[1]:\n            return 2\n        elif str[0] == str[2] == str[3] and str[1] == str[0]:\n            return 3\n        else:\n            return 0\n    if n == 5:\n        if str[0] == str[1] == str[2] == str[3] == str[4]:\n            return 0\n        elif str[0] == str[1] == str[2] == str[3] and str[4] == str[0]:\n            return 1\n        elif str[0] == str[1] == str[2] == str[4] and str[3] == str[2]:\n            return 2\n        elif str[0] == str[1] == str[3] == str[4] and str[2] == str[1]:\n            return 3\n        elif str[0] == str[2] == str[3] == str[4] and str[1] == str[0]:\n            return 4\n        else:\n            return 0\n    if n == 6:\n        if str[0] == str[1] == str[2] == str[3] == str[4] == str[5]:\n            return 0\n        elif"], "evaluation": false}
{"problem_id": 10, "prompt": "/no_think\nimport heapq\ndef small_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n    # your code here\n    # list1 is a list of numbers\n    # n is the number of items to get\n    # return the n smallest items as a list\n    # example: if list1 is [1,2,3,4,5,6,7,8,9,10], n=5, return [1,2,3,4,5]\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=10, return [1,2,...,10]\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=0, return empty list\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=1, return [1]\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=2, return [1,2]\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=3, return [1,2,3]\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=4, return [1,2,3,4]\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=5, return [1,2,3,4,5]\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=6, return [1,2,3,4,5,6]\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=7, return [1,2,3,4,5,6,7]\n    # if list1 is [1,2,3,4,5,6,7,8,9,10], n=8, return [1,2,3,4,5,6,7,8]\n    # if list1"], "evaluation": false}
{"problem_id": 11, "prompt": "/no_think\ndef remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    s = s[:i] + s[i+1:] \n    return s"], "evaluation": false}
{"problem_id": 12, "prompt": "/no_think\ndef sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    # Your code here\n    M.sort(key=lambda x: sum(x))\n    return M"], "evaluation": true}
{"problem_id": 13, "prompt": "/no_think\nfrom collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n    # your code here\n    words = [word for word in words if word.lower() in words]\n    words = Counter(words)\n    return words.most_common(1)\n    # return words.most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return Counter(words).most_common(1)\n    # return"], "evaluation": false}
{"problem_id": 14, "prompt": "/no_think\ndef find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    # your code here\n    volume = (l * b * h) / 2\n    return volume"], "evaluation": true}
{"problem_id": 15, "prompt": "/no_think\nimport re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n    # your code here\n    result = []\n    i = 0\n    while i < len(text):\n        if text[i].islower():\n            result.append(text[i])\n            i += 1\n        else:\n            result.append(text[i])\n            i += 1\n    return ''.join(result)"], "evaluation": false}
{"problem_id": 16, "prompt": "/no_think\nimport re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n    # Your code here\n    # Convert the text to lowercase\n    text = text.lower()\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Join the words with underscores\n    return '_'.join(words)"], "evaluation": false}
{"problem_id": 17, "prompt": "/no_think\ndef square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    # your code here\n    # return the perimeter of the square\n    # a is the side length of the square\n    # perimeter is 4 * side length\n    # return 4 * a\n    return 4 * a"], "evaluation": true}
{"problem_id": 18, "prompt": "/no_think\nNO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n    # Your code here\n    first = string\n    second = second_string\n    i = 0\n    j = 0\n    while i < len(first) and j < len(second):\n        if first[i] == second[j]:\n            i += 1\n        else:\n            j += 1\n    return first[:i] + second[j:] if i < len(first) else first[:i] + second[j:]"], "evaluation": false}
{"problem_id": 19, "prompt": "/no_think\ndef test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    # your code here\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False"], "evaluation": false}
{"problem_id": 20, "prompt": "/no_think\ndef is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    # your code here\n    if x % 2 == 0:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 21, "prompt": "/no_think\ndef multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    count = 0\n    for i in range(1, n+1):\n        if i % n == 0:\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 22, "prompt": "/no_think\ndef find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    # Your code here\n    first_duplicate = None\n    for i in range(len(nums)):\n        if nums[i] == first_duplicate:\n            return first_duplicate\n        else:\n            first_duplicate = nums[i]\n    return first_duplicate"], "evaluation": false}
{"problem_id": 23, "prompt": "/no_think\ndef maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    max_sum = 0\n    for i in range(len(list1)):\n        current_sum = 0\n        for j in range(len(list1[i])):\n            current_sum += list1[i][j]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"], "evaluation": true}
{"problem_id": 24, "prompt": "/no_think\ndef binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    # your code here\n    decimal = 0\n    for i in range(len(binary)):\n        digit = int(binary[i])\n        decimal += digit * (2 ** (len(binary) - i - 1))\n    return decimal"], "evaluation": false}
{"problem_id": 25, "prompt": "/no_think\ndef find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    product = 1\n    for i in range(n):\n        if arr[i] != product:\n            product *= arr[i]\n    return product"], "evaluation": true}
{"problem_id": 26, "prompt": "/no_think\ndef check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    # your code here\n    count = 0\n    for element in test_list:\n        if element == K:\n            count +=1\n    return count == K"], "evaluation": false}
{"problem_id": 27, "prompt": "/no_think\nimport re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    new_list = []\n    for item in list:\n        if item.isdigit():\n            continue\n        else:\n            new_list.append(item)\n    return new_list"], "evaluation": false}
{"problem_id": 28, "prompt": "/no_think\ndef binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    if n < 0 or k < 0 or k > n:\n        return 0\n    if n == 0 or k == 0:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n    # return n * (n-1) * ... * (n -k +1) / (k * (k-1) * ... * 1)\n    # return n! / (k! (n -k)! )\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )\n\n    # return (n choose k) = n! / (k! (n -k)! )"], "evaluation": true}
{"problem_id": 29, "prompt": "/no_think\ndef get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    count = 0\n    for i in range(arr_size):\n        count += arr[i]\n    print(count)\n    for i in range(arr_size):\n        if count % 2 == 0:\n            print(arr[i])\n    return count"], "evaluation": false}
{"problem_id": 30, "prompt": "/no_think\ndef count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 31, "prompt": "/no_think\ndef func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    # your code here\n    import heapq\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    return heapq.nsmallest(k, heap)"], "evaluation": false}
{"problem_id": 32, "prompt": "/no_think\nimport math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n    else:\n        return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n\n    # return max( max_Prime_Factors(n//3), max"], "evaluation": false}
{"problem_id": 33, "prompt": "/no_think\ndef decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        return decimal_To_Binary(N//2) + bin(N%2)[2:] if N%2 == 1 else decimal_To_Binary(N//2)\n    # return bin(N)[2:] if N%2 == 1 else decimal_To_Binary(N//2)"], "evaluation": false}
{"problem_id": 34, "prompt": "/no_think\ndef find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    # your code here\n    # return the missing number\n    total = sum(ar)\n    N = len(ar)\n    expected = N*(N+1)//2\n    missing = expected - total\n    return missing"], "evaluation": false}
{"problem_id": 35, "prompt": "/no_think\ndef find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    # Your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 3"], "evaluation": false}
{"problem_id": 36, "prompt": "/no_think\ndef find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n    # your code here\n    # return the Nth digit in the proper fraction of p and q\n    # p and q are integers\n    # p and q are positive integers\n    # N is a positive integer\n    # return the Nth digit in the proper fraction of p and q\n    # proper fraction is defined as p/q where p is the numerator and q is the denominator.\n    # So, the proper fraction of p and q is p/q\n    # So, the problem is to find the Nth digit in the proper fraction of p and q.\n    # For example, if p=10 and q=3, the proper fraction is 10/3 = 3.333...\n    # So, the first digit is 3, second is 3, third is 3, etc.\n    # So, the problem is to find the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # For example, if p=10 and q=3, the proper fraction is 10/3 = 3.333...\n    # So, the first digit is 3, second is 3, third is 3, etc.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return the Nth digit in the proper fraction of p and q.\n    # So, the function should return"], "evaluation": false}
{"problem_id": 37, "prompt": "/no_think\ndef sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 38, "prompt": "/no_think\ndef div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return [even[0], odd[0]]"], "evaluation": false}
{"problem_id": 39, "prompt": "/no_think\nimport heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    count = Counter(S)\n    if len(count) == 1:\n        return False\n    if len(count) == 2:\n        return S[0] != S[1]\n    if len(count) == 3:\n        return S[0] != S[1] and S[1] != S[2]\n    if len(count) == 4:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3]\n    if len(count) == 5:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3] and S[3] != S[4]\n    if len(count) == 6:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3] and S[3] != S[4] and S[4] != S[5]\n    return False"], "evaluation": false}
{"problem_id": 40, "prompt": "/no_think\nfrom collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    # your code here\n    freq = Counter()\n    for num in nums:\n        freq[num] += 1\n    return freq"], "evaluation": false}
{"problem_id": 41, "prompt": "/no_think\ndef filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "/no_think\ndef find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum"], "evaluation": false}
{"problem_id": 43, "prompt": "/no_think\nimport re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n    # Your code here\n    pattern = r'([a-z]+)_([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        print(match)\n    return sum(int(x) for x in match) if matches else 0"], "evaluation": false}
{"problem_id": 44, "prompt": "/no_think\nimport re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n    # your code here\n    pattern = re.compile(r'\\b' + text + r'\\b')\n    matches = pattern.findall(text)\n    return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in matches if match[0] == text]\n    # return [match for match in"], "evaluation": false}
{"problem_id": 45, "prompt": "/no_think\ndef get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    from math import gcd\n    from functools import reduce\n    return reduce(gcd, l)\n    # return reduce(gcd, l)"], "evaluation": true}
{"problem_id": 46, "prompt": "/no_think\ndef test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 47, "prompt": "/no_think\ndef compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    # your code here\n    result = 1\n    for i in range(1, A+1):\n        result *= i\n    for j in range(1, B+1):\n        result *= j\n    return result % 10"], "evaluation": false}
{"problem_id": 48, "prompt": "/no_think\ndef odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    result = 0\n    for i in range(0, n, 2):\n        result = result << 1\n        result += 1\n    return result"], "evaluation": false}
{"problem_id": 49, "prompt": "/no_think\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == N:\n                result.append(nums[i][j])\n    return result"], "evaluation": false}
{"problem_id": 50, "prompt": "/no_think\ndef min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    # your code here\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    # return the list with minimum length\n    #"], "evaluation": false}
{"problem_id": 51, "prompt": "/no_think\ndef check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    # your code here\n    if x == y and y == z and x == z:\n        print(\"Equilateral\")\n    else:\n        print(\"Not Equilateral\")"], "evaluation": false}
{"problem_id": 52, "prompt": "/no_think\ndef parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    # your code here\n    # return the area\n    # base is b, height is h\n    # area = base * height\n    # return base * height\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h\n    # return b * h"], "evaluation": false}
{"problem_id": 53, "prompt": "/no_think\ndef check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        print(\"Equal\")\n    else:\n        print(\"Not Equal\")\n    return 0"], "evaluation": false}
{"problem_id": 54, "prompt": "/no_think\ndef counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    # your code here\n    max_val = max(my_list)\n    result = [0] * len(my_list)\n    for i in range(len(my_list)):\n        result[i] = max_val\n    return result"], "evaluation": false}
{"problem_id": 55, "prompt": "/no_think\nimport math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n    if a == 0:\n        return 0\n    if r == 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return a\n    else:\n        return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r **"], "evaluation": true}
{"problem_id": 56, "prompt": "/no_think\ndef check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    reverse = int(str(n)[::-1])\n    if (n * 2) - reverse == 0:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 57, "prompt": "/no_think\ndef find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    max_num = 0\n    for i in range(n):\n        max_num = max(max_num, str(arr[i]) + str(arr[i]))\n    return max_num"], "evaluation": false}
{"problem_id": 58, "prompt": "/no_think\ndef opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y < 0:\n        return False\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 59, "prompt": "/no_think\ndef is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    # Your code here\n    # return the nth octagonal number\n    # The formula for the nth octagonal number is n*(n+1)*(3n+2)/2\n    # For example, when n=1, the first octagonal number is 1*2*5/2 = 5\n    # when n=2, it's 2*3*8/2 = 24\n    # when n=3, it's 3*4*11/2 = 66\n    # when n=4, it's 4*5*14/2 = 140\n    # when n=5, it's 5*6*17/2 = 255\n    # when n=6, it's 6*7*20/2 = 420\n    # when n=7, it's 7*8*23/2 = 722\n    # when n=8, it's 8*9*26/2 = 936\n    # when n=9, it's 9*10*29/2 = 1365\n    # when n=10, it's 10*11*32/2 = 1760\n    # when n=11, it's 11*12*35/2 = 2310\n    # when n=12, it's 12*13*38/2 = 2856\n    # when n=13, it's 13*14*41/2 = 3646\n    # when n=14, it's 14*15*44/2 = 4410\n    # when n=15, it's 15*16*47/2 = 5280\n    # when n=16, it's 16*17*50/2 = 6800\n    # when n=17, it's 17*18*53/2 = 7476\n    # when n=18, it's 18*19*56/2 = 9216\n    #"], "evaluation": false}
{"problem_id": 60, "prompt": "/no_think\ndef max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    max_len = 0\n    for i in range(n):\n        current = arr[i]\n        for j in range(i+1, n):\n            if current - arr[j] == 0:\n                max_len = max(max_len, j - i)\n    return max_len"], "evaluation": false}
{"problem_id": 61, "prompt": "/no_think\nfrom collections import defaultdict\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(d) for d in s[i:j]) == len(s[i:j]):\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 62, "prompt": "/no_think\ndef smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    # your code here\n    # return the smallest number in the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0"], "evaluation": false}
{"problem_id": 63, "prompt": "/no_think\ndef max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            current_diff = test_list[i] - test_list[j]\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff"], "evaluation": false}
{"problem_id": 64, "prompt": "/no_think\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])"], "evaluation": true}
{"problem_id": 65, "prompt": "/no_think\ndef recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list[0] + recursive_list_sum(data_list[1:])\n    # return data_list["], "evaluation": false}
{"problem_id": 66, "prompt": "/no_think\ndef pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "/no_think\ndef bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    # returns the number of ways to partition a set of n elements into non-empty subsets\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at least one element and no two subsets have the same size\n    # where each subset has at"], "evaluation": false}
{"problem_id": 68, "prompt": "/no_think\ndef is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    n = len(A)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 69, "prompt": "/no_think\ndef is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    # your code here\n    # return True or False based on whether s is a sublist of l\n    # example: is_sublist([1,2,3,4], [2,3]) should return True\n    # is_sublist([1,2,3,4], [1,2,3,4]) should return True\n    # is_sublist([1,2,3,4], [1,2,3]) should return False\n    # is_sublist([1,2,3,4], [3,4]) should return False\n    # is_sublist([1,2,3,4], [4]) should return False\n    # is_sublist([1,2,3,4], [2,3,4]) should return True\n    # is_sublist([1,2,3,4], [2,4]) should return False\n    # is_sublist([1,2,3,4], [3,4,2]) should return False\n    # is_sublist([1,2,3,4], [2,4,3]) should return False\n    # is_sublist([1,2,3,4], [2,3,4,2]) should return False\n    # is_sublist([1,2,3,4], [2,3,4,2,3]) should return True\n    # is_sublist([1,2,3,4], [2,3,4,2,3,4]) should return True\n    # is_sublist([1,2,3,4], [2,3,4,2,3,4,2]) should return False\n    # is_sublist([1,2,3,4], [2,3,4,2,3,4,2,3]) should return True\n    # is_sublist([1,2,3,4], [2,3,4,2,3,4,2,3,4]) should return True\n    # is_sublist([1,2,3,4], [2,3,4,2,3,4,2,3,4,2]) should return False\n    # is_sublist([1,2,3,4], [2,3,4,2,3,4,2,3,4,2,3]) should return True"], "evaluation": false}
{"problem_id": 70, "prompt": "/no_think\ndef get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 71, "prompt": "/no_think\ndef comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    n = len(nums)\n    i = 1\n    while i < n:\n        for j in range(n - i):\n            if nums[j] > nums[j + i]:\n                nums[j], nums[j + i] = nums[j + i], nums[j]\n        i += 1\n    return nums"], "evaluation": false}
{"problem_id": 72, "prompt": "/no_think\ndef dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    # your code here\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return False\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return False\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return False\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return False\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return False\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True"], "evaluation": false}
{"problem_id": 73, "prompt": "/no_think\nimport re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n    # your code here\n    # returns a list of all the words in the string, split by multiple delimiters\n    # e.g. if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello,world\", returns [\"hello\", \"world\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello,world\", returns [\"hello\", \"world\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\", returns [\"hello\"]\n    # if input is \"hello,world,there\", returns [\"hello\", \"world\", \"there\"]\n    # if input is \"hello\","], "evaluation": false}
{"problem_id": 74, "prompt": "/no_think\ndef is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n    # your code here\n    if len(patterns) == 0:\n        return False\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 75, "prompt": "/no_think\ndef find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    # your code here\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                result.append(test_list[i][j])\n    return result"], "evaluation": false}
{"problem_id": 76, "prompt": "/no_think\ndef count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    # your code here\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if m[i][j] == 1:\n                count +=1\n    return count\n    # end of function"], "evaluation": false}
{"problem_id": 77, "prompt": "/no_think\ndef is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    sum_even = 0\n    sum_odd = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            sum_even += int(digit)\n        else:\n            sum_odd += int(digit)\n    return sum_even - sum_odd"], "evaluation": false}
{"problem_id": 78, "prompt": "/no_think\ndef count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 == 1:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 79, "prompt": "/no_think\ndef word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    return len(s) % 2 != 0"], "evaluation": true}
{"problem_id": 80, "prompt": "/no_think\ndef tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    # your code here\n    # return the nth tetrahedral number\n    # n is a positive integer\n    # 1st tetrahedral number is 1\n    # 2nd is 4\n    # 3rd is 10\n    # 4th is 20\n    # 5th is 35\n    # 6th is 56\n    # 7th is 84\n    # 8th is 120\n    # 9th is 165\n    # 10th is 220\n    # 11th is 286\n    # 12th is 370\n    # 13th is 476\n    # 14th is 616\n    # 15th is 780\n    # 16th is 980\n    # 17th is 1220\n    # 18th is 1520\n    # 19th is 1880\n    # 20th is 2280\n    # 21st is 2820\n    # 22nd is 3420\n    # 23rd is 4120\n    # 24th is 4920\n    # 25th is 6000\n    # 26th is 7200\n    # 27th is 8700\n    # 28th is 10500\n    # 29th is 12600\n    # 30th is 15000\n    # 31st is 17800\n    # 32nd is 20800\n    # 33rd is 24200\n    # 34th is 28200\n    # 35th is 32800\n    # 36th is 38000\n    # 37th is 43200\n    # 38th is 49200\n    # 39th is 56200"], "evaluation": false}
{"problem_id": 81, "prompt": "/no_think\ndef zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    # your code here\n    zip_result = []\n    for i in range(len(test_tup1)):\n        zip_result.append( (test_tup1[i], test_tup2[i]) )\n    return zip_result"], "evaluation": false}
{"problem_id": 82, "prompt": "/no_think\nimport math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n    volume = (4/3)*math.pi*r**3\n    return volume"], "evaluation": true}
{"problem_id": 83, "prompt": "/no_think\ndef get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    total = 0\n    for i in range(len(strr)):\n        total += int(strr[i])\n    return total"], "evaluation": false}
{"problem_id": 84, "prompt": "/no_think\ndef sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2) + sequence(n - 3) + sequence(n - 4) + sequence(n - 5) + sequence(n - 6) + sequence(n - 7) + sequence(n - 8) + sequence(n - 9) + sequence(n - 10) + sequence(n - 11) + sequence(n - 12) + sequence(n - 13) + sequence(n - 14) + sequence(n - 15) + sequence(n - 16) + sequence(n - 17) + sequence(n - 18) + sequence(n - 19) + sequence(n - 20) + sequence(n - 21) + sequence(n - 22) + sequence(n - 23) + sequence(n - 24) + sequence(n - 25) + sequence(n - 26) + sequence(n - 27) + sequence(n - 28) + sequence(n - 29) + sequence(n - 30) + sequence(n - 31) + sequence(n - 32) + sequence(n - 33) + sequence(n - 34) + sequence(n - 35) + sequence(n - 36) + sequence(n - 37) + sequence(n - 38) + sequence(n - 39) + sequence(n - 40) + sequence(n - 41) + sequence(n - 42) + sequence(n - 43) + sequence(n - 44) + sequence(n - 45) + sequence(n - 46) + sequence(n - 47) + sequence(n - 48) + sequence(n - 49) + sequence(n - 50) + sequence(n - 51) + sequence(n - 52) + sequence(n - 53) + sequence(n - 54) + sequence(n - 55) + sequence(n - 56) + sequence(n - 57) + sequence(n - 58) + sequence(n - 59) + sequence(n - 60) + sequence(n - 61) + sequence(n -"], "evaluation": false}
{"problem_id": 85, "prompt": "/no_think\nimport math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2) * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4"], "evaluation": false}
{"problem_id": 86, "prompt": "/no_think\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 87, "prompt": "/no_think\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    # your code here\n    # return the merged dictionary\n    # example:\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1"], "evaluation": false}
{"problem_id": 88, "prompt": "/no_think\nimport collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n    count = collections.defaultdict(int)\n    for num in list1:\n        count[num] += 1\n    return count"], "evaluation": true}
{"problem_id": 89, "prompt": "/no_think\ndef closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    if N == 0:\n        return 0\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 3\n    if N == 5:\n        return 4\n    if N == 6:\n        return 5\n    if N == 7:\n        return 6\n    if N == 8:\n        return 7\n    if N == 9:\n        return 8\n    if N == 10:\n        return 9\n    if N == 11:\n        return 10\n    if N == 12:\n        return 11\n    if N == 13:\n        return 12\n    if N == 14:\n        return 13\n    if N == 15:\n        return 14\n    if N == 16:\n        return 15\n    if N == 17:\n        return 16\n    if N == 18:\n        return 17\n    if N == 19:\n        return 18\n    if N == 20:\n        return 19\n    if N == 21:\n        return 20\n    if N == 22:\n        return 21\n    if N == 23:\n        return 22\n    if N == 24:\n        return 23\n    if N == 25:\n        return 24\n    if N == 26:\n        return 25\n    if N == 27:\n        return 26\n    if N == 28:\n        return 27\n    if N == 29:\n        return 28\n    if N == 30:\n        return 29\n    if N == 31:\n        return 30\n    if N == 32:\n        return 31\n    if N == 33:\n        return 32\n    if N == 34:\n        return 33\n    if N == 35:\n        return 34\n    if N == 36:\n        return 35\n    if N == 37:\n        return 36"], "evaluation": true}
{"problem_id": 90, "prompt": "/no_think\ndef len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"], "evaluation": true}
{"problem_id": 91, "prompt": "/no_think\ndef find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 92, "prompt": "/no_think\ndef is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    # Your code here\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return is_undulating(n // 2 + 1)\n    # return False if n is 0\n    # return True if n is 1\n    # return True if n is 2\n    # return False if n is 3\n    # return True if n is 4\n    # return False if n is 5\n    # return True if n is 6\n    # return False if n is 7\n    # return True if n is 8\n    # return False if n is 9\n    # return True if n is 10\n    # return False if n is 11\n    # return True if n is 12\n    # return False if n is 13\n    # return True if n is 14\n    # return False if n is 15\n    # return True if n is 16\n    # return False if n is 17\n    # return True if n is 18\n    # return False if n is 19\n    # return True if n is 20\n    # return False if n is 21\n    # return True if n is 22\n    # return False if n is 23\n    # return True if n is 24\n    # return False if n is 25\n    # return True if n is 26\n    # return False if n is 27\n    # return True if n is 28\n    # return False if n is 29\n    # return True if n is 30\n    # return False if n is 31\n    # return True if n is 32\n    # return False if n is 33\n    # return True if n is 34\n    # return False if n is 35\n    # return True if n is 36\n    # return False if n is 37\n    # return True if n is 38\n    # return False if n is 39\n    # return True if n is 40\n    # return False if n is 41\n    # return True if"], "evaluation": false}
{"problem_id": 93, "prompt": "/no_think\ndef power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"], "evaluation": true}
{"problem_id": 94, "prompt": "/no_think\nfrom operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n    # your code here\n    min_index = 0\n    min_val = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n            min_index = i\n    return min_index, min_val"], "evaluation": false}
{"problem_id": 95, "prompt": "/no_think\ndef Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    # your code here\n    min_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                min_len = min(min_len, j - i)\n    return min_len"], "evaluation": false}
{"problem_id": 96, "prompt": "/no_think\ndef divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 97, "prompt": "/no_think\ndef frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    from collections import Counter\n    counts = Counter(list1)\n    print(counts)\n    return counts"], "evaluation": false}
{"problem_id": 98, "prompt": "/no_think\ndef multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"], "evaluation": true}
{"problem_id": 99, "prompt": "/no_think\ndef decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    if n == 0:\n        return 0\n    else:\n        return decimal_to_binary(n // 2) + bin(n % 2)[2:] if n % 2 == 1 else decimal_to_binary(n // 2)"], "evaluation": false}
{"problem_id": 100, "prompt": "/no_think\nimport sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num % 2 == 0:\n        num += 1\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1\n    return 0"], "evaluation": false}
{"problem_id": 101, "prompt": "/no_think\ndef kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    # Your code here\n    arr.sort()\n    return arr[k-1]"], "evaluation": false}
{"problem_id": 102, "prompt": "/no_think\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    # your code here\n    # return the camel case string\n    # example: snake_to_camel(\"hello-world\") returns \"HelloWorld\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCamel\"\n    # example: snake_to_camel(\"snake_to_camel\") returns \"SnakeToCam"], "evaluation": false}
{"problem_id": 103, "prompt": "/no_think\ndef eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    # your code here\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            result += i * j\n    return result"], "evaluation": false}
{"problem_id": 104, "prompt": "/no_think\ndef sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    # Your code here\n    # Sort each sublist of strings in the input list of lists using lambda function.\n    # The function should return the modified list of lists with each sublist sorted.\n    # For example, if input_list is [[1,2,3], [4,5,6], [7,8,9]], the output should be [[1,2,3], [4,5,6], [7,8,9]].\n    # If input_list is [[1,2], [3,4], [5,6], [7,8,9]], the output should be [[1,2], [3,4], [5,6], [7,8,9]].\n    # If input_list is [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4,5,6,7,8,9]], the output should be [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4,5,6,7,8,9]].\n    # If input_list is [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4,5,6,7,8,9]], the output should be [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4,5,6,7,8,9]].\n    # If input_list is [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4,5,6,7,8,9]], the output should be [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4,5,6,7,8,9]].\n    # If input_list is [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4,5,6,7,8,9]], the output should be [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4,5,6,7,8,9"], "evaluation": false}
{"problem_id": 105, "prompt": "/no_think\ndef count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    count = 0\n    for item in lst:\n        if item is True:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 106, "prompt": "/no_think\ndef add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    # your code here\n    # return the sum of the list and the sum of the tuple\n    sum_list = sum(test_list)\n    sum_tup = sum(test_tup)\n    return sum_list + sum_tup"], "evaluation": false}
{"problem_id": 107, "prompt": "/no_think\ndef count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1):\n        if hex(i) == '0x':\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "/no_think\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    # Your code here\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    result = []\n    while heap:\n        num = heapq.heappop(heap)\n        result.append(num)\n    return result"], "evaluation": false}
{"problem_id": 109, "prompt": "/no_think\ndef odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(1, len(s)+1):\n        if s[i-1] == '1' and (i-1) % 2 == 0:\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 110, "prompt": "/no_think\ndef extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 111, "prompt": "/no_think\ndef common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    # your code here\n    result = []\n    for item in nestedlist:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in result:\n                    result.append(subitem)\n                else:\n                    result.append(subitem)\n    return result"], "evaluation": false}
{"problem_id": 112, "prompt": "/no_think\ndef perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    # your code here\n    # return the perimeter of the cylinder\n    # input is diameter and height\n    # output is the perimeter of the cylinder\n    # perimeter of a cylinder is 2πr + 2πh\n    # r = diameter / 2\n    # perimeter = 2πr + 2πh\n    # perimeter = 2π*(diameter/2 + height)\n    # perimeter = π*diameter + 2*height*π\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter = π*(diameter + 2*height)\n    # perimeter"], "evaluation": false}
{"problem_id": 113, "prompt": "/no_think\ndef check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    # your code here\n    # return True or False based on whether it is integer or not\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is integer, else False\n    # return False if it is not integer\n    # return True if it is"], "evaluation": false}
{"problem_id": 114, "prompt": "/no_think\nfrom collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n    freq = Counter()\n    for item in test_list:\n        freq[item] += 1\n    return freq"], "evaluation": false}
{"problem_id": 115, "prompt": "/no_think\ndef empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    for i in range(len(list1)):\n        if list1[i] is not None:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 116, "prompt": "/no_think\ndef tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    # Your code here\n    # Convert the tuple to a list and then to an integer\n    nums = list(nums)\n    return int(''.join(nums))"], "evaluation": false}
{"problem_id": 117, "prompt": "/no_think\ndef list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 118, "prompt": "/no_think\ndef string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 119, "prompt": "/no_think\ndef search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    # Your code here\n    # return the index of the element that appears only once in the array\n    # using the binary search approach\n    low = 0\n    high = len(arr) -1\n    while low <= high:\n        mid = (low + high) //2\n        if arr[mid] == n:\n            return mid\n        elif arr[mid] < n:\n            low = mid +1\n        else:\n            high = mid -1\n    return -1"], "evaluation": false}
{"problem_id": 120, "prompt": "/no_think\ndef max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            product = list1[i][j] * list1[i][j+1]\n            if product > max_product:\n                max_product = product\n    return max_product"], "evaluation": false}
{"problem_id": 121, "prompt": "/no_think\ndef check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    i = 0\n    j = n - 1\n    while i < j:\n        if A[i] + A[j] == sum:\n            return True\n        elif A[i] + A[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return False"], "evaluation": false}
{"problem_id": 122, "prompt": "/no_think\nMAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    # your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:"], "evaluation": false}
{"problem_id": 123, "prompt": "/no_think\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    # Your code here\n    sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            sum += i\n    return sum"], "evaluation": false}
{"problem_id": 124, "prompt": "/no_think\nimport cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n    # your code here\n    # return the angle of a complex number as a float\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if the number is 0, return 0\n    # if the number is negative, return -angle\n    # if the number is positive, return angle\n    # if the number is 1, return 0\n    # if"], "evaluation": false}
{"problem_id": 125, "prompt": "/no_think\ndef find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    # Your code here\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 +=1\n        else:\n            count_1 +=1\n    return max(count_0, count_1)\n    # return max(count_0, count_1)"], "evaluation": false}
{"problem_id": 126, "prompt": "/no_think\ndef sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    # your code here\n    # sum of common divisors of a and b\n    # return the sum\n    # a and b are given in the function\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a and b are positive integers\n    # return sum of all common divisors of a and b\n    # a"], "evaluation": false}
{"problem_id": 127, "prompt": "/no_think\ndef multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    result = 0\n    for i in range(x):\n        result += i * y\n    return result"], "evaluation": false}
{"problem_id": 128, "prompt": "/no_think\ndef long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"], "evaluation": true}
{"problem_id": 129, "prompt": "/no_think\ndef magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 130, "prompt": "/no_think\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_num = [num for num, count in freq.items() if count == max_freq]\n    return max_num"], "evaluation": false}
{"problem_id": 131, "prompt": "/no_think\ndef reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s = list(str1)\n    i = 0\n    j = len(s) - 1\n    count = 0\n    while i < j:\n        if s[i] in vowels:\n            count += 1\n            s[i] = s[j]\n            j -= 1\n        i += 1\n    return ''.join(s)"], "evaluation": false}
{"problem_id": 132, "prompt": "/no_think\ndef tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 133, "prompt": "/no_think\ndef sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    # your code here\n    # return the sum of the negative numbers of the list\n    # if the list is empty, return 0\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them\n    # if there are no negative numbers, return 0\n    # if there are multiple negative numbers, return the sum of all of them"], "evaluation": false}
{"problem_id": 134, "prompt": "/no_think\ndef check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    if p == 0:\n        return arr[-1] % 2 == 0\n    else:\n        arr[-1] = arr[-1] % 2\n        return check_last(arr, n, p-1)"], "evaluation": false}
{"problem_id": 135, "prompt": "/no_think\ndef hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return (n * (n + 1) * (3 * n + 1)) // 2"], "evaluation": false}
{"problem_id": 136, "prompt": "/no_think\ndef cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    # your code here\n    total = 0\n    for i in range(1, units+1):\n        if i % 2 == 0:\n            total += i\n        else:\n            total += i * 2\n    return total\n    # end of function"], "evaluation": false}
{"problem_id": 137, "prompt": "/no_think\nfrom array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count +=1\n    return count / len(nums)\n    # return count / len(nums)"], "evaluation": false}
{"problem_id": 138, "prompt": "/no_think\ndef is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    for i in range(1, n+1):\n        if (n & (1 << i)) != 0:\n            return True\n    return False"], "evaluation": false}
{"problem_id": 139, "prompt": "/no_think\ndef circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    pi = 3.14\n    return 2 * pi * r"], "evaluation": false}
{"problem_id": 140, "prompt": "/no_think\ndef extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    # your code here\n    # return the list of elements that occur singly in the given tuple list\n    # for example, if the input is (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118"], "evaluation": false}
{"problem_id": 141, "prompt": "/no_think\ndef pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the index of the largest element in nums\n        largest = 0\n        for j in range(n):\n            if nums[j] > nums[largest]:\n                largest = j\n        # Swap the largest element with the first element\n        nums[largest], nums[0] = nums[0], nums[largest]\n        # Swap the largest element with the last element\n        nums[largest], nums[-1] = nums[-1], nums[largest]\n    return nums"], "evaluation": false}
{"problem_id": 142, "prompt": "/no_think\ndef count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    # your code here\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                count +=1\n    return count"], "evaluation": false}
{"problem_id": 143, "prompt": "/no_think\ndef find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    # your code here\n    lists = []\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            lists.append(Input[i])\n    return lists"], "evaluation": false}
{"problem_id": 144, "prompt": "/no_think\ndef sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    # Your code here\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += abs(arr[i] - arr[j])\n    return sum"], "evaluation": true}
{"problem_id": 145, "prompt": "/no_think\ndef max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    max_diff = 0\n    min_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_diff = max(max_diff, abs(arr[i] - arr[j]))\n    return max_diff"], "evaluation": true}
{"problem_id": 146, "prompt": "/no_think\ndef ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    total = 0\n    for char in str1:\n        total += ord(char)\n    return total"], "evaluation": false}
{"problem_id": 147, "prompt": "/no_think\ndef max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    # Your code here\n    # Initialize a 2D array to store the maximum path sum for each cell\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m):\n        for j in range(n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + tri[i][j]\n    return dp[m-1][n-1]\n    # return max(dp[m-1][n-1])\n    # return max(max(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max(sum(row) for row in dp)\n    # return max"], "evaluation": false}
{"problem_id": 148, "prompt": "/no_think\ndef sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n    # your code here\n    # return the maximum sum of digits of the two parts\n    # example: sum_digits_twoparts(12345) = 1+2+3+4+5 = 15\n    # sum_digits_twoparts(123) = 1+2+3 = 6\n    # sum_digits_twoparts(12) = 1+2 = 3\n    # sum_digits_twoparts(999) = 9+9+9 = 27\n    # sum_digits_twoparts(99) = 9+9 = 18\n    # sum_digits_twoparts(100) = 1+0+0 = 1\n    # sum_digits_twoparts(10) = 1+0 = 1\n    # sum_digits_twoparts(1000) = 1+0+0+0 = 1\n    # sum_digits_twoparts(9999) = 9+9+9+9 = 36\n    # sum_digits_twoparts(99999) = 9+9+9+9+9 = 45\n    # sum_digits_twoparts(999999) = 9+9+9+9+9+9 = 54\n    # sum_digits_twoparts(9999999) = 9+9+9+9+9+9+9 = 63\n    # sum_digits_twoparts(99999999) = 9+9+9+9+9+9+9+9 = 72\n    # sum_digits_twoparts(999999999) = 9+9+9+9+9+9+9+9+9 = 81\n    # sum_digits_twoparts(9999999999) = 9+9+9+9+9+9+9+9+9+9 = 90\n    # sum_digits_twoparts(99999999999) = 9+9+9+9+9+9+9+9+9+9+9 = 99\n    # sum_digits"], "evaluation": false}
{"problem_id": 149, "prompt": "/no_think\ndef longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    # Your code here\n    arr = [int(x) for x in arr]\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_len = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == 1:\n                max_len = max(max_len, 2)\n    return max_len"], "evaluation": false}
{"problem_id": 150, "prompt": "/no_think\ndef does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 151, "prompt": "/no_think\ndef is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    # your code here\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime\n    # return True if co-prime, else False\n    # return False if not co-prime"], "evaluation": false}
{"problem_id": 152, "prompt": "/no_think\ndef merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = x[:mid]\n    right = x[mid:]\n    left_sorted = merge_sort(left)\n    right_sorted = merge_sort(right)\n    return merge(left_sorted, right_sorted)"], "evaluation": false}
{"problem_id": 153, "prompt": "/no_think\ndef parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    # your code here\n    # return the vertex (x, y)\n    # vertex is at (x, y) = ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # input: a, b, c\n    # output: (x, y)\n    # example: parabola with a=1, b=2, c=3\n    # returns ( -2, -4 + 3 ) = (-2, -1)\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -b^2/(4a) + c )\n    # return (x, y)\n    # return the vertex (x, y)\n    # vertex is at ( -b/(2a), -"], "evaluation": false}
{"problem_id": 154, "prompt": "/no_think\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == N:\n                result.append(nums[i][j])\n    return result"], "evaluation": false}
{"problem_id": 155, "prompt": "/no_think\ndef even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    result = 0\n    for i in range(0, n, 2):\n        result ^= (1 << (i + 1))\n    return result"], "evaluation": false}
{"problem_id": 156, "prompt": "/no_think\ndef tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    # Your code here\n    \"\"\"\n    Args:\n        tuple_str: a string representing a tuple of integers.\n    Returns:\n        tuple of integers\n    \"\"\"\n    # Your code here\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    \"\"\"\n    Example:\n    Input: (\"1\", \"2\", \"3\")\n    Output: (1, 2, 3)\n    \"\"\"\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    \"\"\"\n    Example:\n    Input: (\"1\", \"2\", \"3\")\n    Output: (1, 2, 3)\n    \"\"\"\n    # Your code here\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    # Then convert the list to a tuple\n    # Then return the tuple\n    # Convert the string to a list of integers\n    #"], "evaluation": false}
{"problem_id": 157, "prompt": "/no_think\nfrom itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n    if not list1:\n        return []\n    result = []\n    count = 1\n    first = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] == first:\n            count +=1\n        else:\n            result.append( (first, count) )\n            first = list1[i]\n            count = 1\n    result.append( (first, count) )\n    return result"], "evaluation": false}
{"problem_id": 158, "prompt": "/no_think\ndef min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if k == 0:\n        return 0\n    if k == n:\n        return 0\n    if k > n:\n        return n - k\n    return min_Ops(arr, n - 1, k - 1) + min_Ops(arr, n - 1, k) + min_Ops(arr, n - 1, k - 1)"], "evaluation": false}
{"problem_id": 159, "prompt": "/no_think\ndef month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    # your code here\n    # return the season as a string.\n    # example:\n    # print(month_season(3,10)) returns 'spring'\n    # print(month_season(4,30)) returns 'summer'\n    # print(month_season(2,28)) returns 'autumn'\n    # print(month_season(1,31)) returns 'winter'\n    # print(month_season(12,31)) returns 'autumn'\n    # print(month_season(11,30)) returns 'autumn'\n    # print(month_season(10,31)) returns 'autumn'\n    # print(month_season(9,30)) returns 'autumn'\n    # print(month_season(8,31)) returns 'autumn'\n    # print(month_season(7,31)) returns 'autumn'\n    # print(month_season(6,30)) returns 'autumn'\n    # print(month_season(5,31)) returns 'autumn'\n    # print(month_season(4,30)) returns 'summer'\n    # print(month_season(3,10)) returns 'spring'\n    # print(month_season(2,28)) returns 'autumn'\n    # print(month_season(1,31)) returns 'winter'\n    # print(month_season(12,31)) returns 'autumn'\n    # print(month_season(11,30)) returns 'autumn'\n    # print(month_season(10,31)) returns 'autumn'\n    # print(month_season(9,30)) returns 'autumn'\n    # print(month_season(8,31)) returns 'autumn'\n    # print(month_season(7,31)) returns 'autumn'\n    # print(month_season(6,30)) returns 'autumn'\n    # print(month_season(5,31)) returns 'autumn'\n    # print(month_season(4,30)) returns 'summer'\n    # print(month_season(3,10)) returns 'spring'\n    # print(month_season(2,28)) returns 'autumn'\n    # print(month_season(1,31)) returns 'winter'\n    # print(month_season(12,31)) returns 'autumn'\n    # print(month_season(11,30)) returns 'autumn'\n    # print(month_season(10,31)) returns '"], "evaluation": false}
{"problem_id": 160, "prompt": "/no_think\ndef solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    x = 0\n    y = 0\n    for i in range(1, n+1):\n        if a * i % n == 0:\n            x = i\n            y = 0\n            break\n        elif b * i % n == 0:\n            x = 0\n            y = i\n            break\n    return x, y"], "evaluation": false}
{"problem_id": 161, "prompt": "/no_think\ndef remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    # Your code here\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result"], "evaluation": true}
{"problem_id": 162, "prompt": "/no_think\ndef sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    total = 0\n    x = 0\n    while n - x >= 0:\n        total += n - x\n        x += 1\n    return total"], "evaluation": false}
{"problem_id": 163, "prompt": "/no_think\nfrom math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n    # your code here\n    \"\"\"\n    Parameters:\n    s is the side length of the polygon\n    l is the length of the side of the polygon\n    \"\"\"\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon\n    # returns the area of the polygon"], "evaluation": false}
{"problem_id": 164, "prompt": "/no_think\nimport math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n    if num1 == num2:\n        return True\n    else:\n        sum1 = sum_of_divisors(num1)\n        sum2 = sum_of_divisors(num2)\n        return sum1 == sum2"], "evaluation": false}
{"problem_id": 165, "prompt": "/no_think\ndef count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].islower() and str1[i].isupper():\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 166, "prompt": "/no_think\ndef find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 167, "prompt": "/no_think\ndef next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return 2 * n\n    else:\n        return 2 * n\n    return 2 * n"], "evaluation": false}
{"problem_id": 168, "prompt": "/no_think\ndef frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "/no_think\ndef get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n-1) + 2 * get_pell(n-2)\n    \n    # Test cases\n    print(get_pell(0))\n    print(get_pell(1))\n    print(get_pell(2))\n    print(get_pell(3))\n    print(get_pell(4))\n    print(get_pell(5))\n    print(get_pell(6))\n    print(get_pell(7))\n    print(get_pell(8))\n    print(get_pell(9))\n    print(get_pell(10))\n    print(get_pell(11))\n    print(get_pell(12))\n    print(get_pell(13))\n    print(get_pell(14))\n    print(get_pell(15))\n    print(get_pell(16))\n    print(get_pell(17))\n    print(get_pell(18))\n    print(get_pell(19))\n    print(get_pell(20))\n    print(get_pell(21))\n    print(get_pell(22))\n    print(get_pell(23))\n    print(get_pell(24))\n    print(get_pell(25))\n    print(get_pell(26))\n    print(get_pell(27))\n    print(get_pell(28))\n    print(get_pell(29))\n    print(get_pell(30))\n    print(get_pell(31))\n    print(get_pell(32))\n    print(get_pell(33))\n    print(get_pell(34))\n    print(get_pell(35))\n    print(get_pell(36))\n    print(get_pell(37))\n    print(get_pell(38))\n    print(get_pell(39))\n    print(get_pell(40))\n    print(get_pell(41))\n    print(get_pell(42))\n    print(get_pell(43))\n    print(get_pell(44))\n    print(get_pell(45))\n    print(get_pell(46))\n    print(get_pell(47))\n    print(get_pell(48))\n    print(get_pell(49))\n    print(get_pell(50))\n    print(get_pell(51))"], "evaluation": false}
{"problem_id": 170, "prompt": "/no_think\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    # Your code here\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"], "evaluation": true}
{"problem_id": 171, "prompt": "/no_think\nimport math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n    # your code here\n    # return the perimeter of the pentagon\n    # a is the length of one side of the pentagon\n    # the perimeter is 5 times the length of one side\n    # so return 5*a\n    return 5*a"], "evaluation": true}
{"problem_id": 172, "prompt": "/no_think\ndef count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 's' or s[i] == 't' or s[i] == 'd':\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 173, "prompt": "/no_think\nimport re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n    return re.sub(r'[^a-zA-Z0-9]', '', text)"], "evaluation": true}
{"problem_id": 174, "prompt": "/no_think\ndef group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    # your code here\n    \"\"\"\n    l is a list of key-value pairs, where each key is a string and value is a number.\n    \"\"\"\n    # your code here\n    \"\"\"\n    For example, if l is [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50], [51, 52], [53, 54], [55, 56], [57, 58], [59, 60], [61, 62], [63, 64], [65, 66], [67, 68], [69, 70], [71, 72], [73, 74], [75, 76], [77, 78], [79, 80], [81, 82], [83, 84], [85, 86], [87, 88], [89, 90], [91, 92], [93, 94], [95, 96], [97, 98], [99, 100], [101, 102], [103, 104], [105, 106], [107, 108], [109, 110], [111, 112], [113, 114], [11"], "evaluation": false}
{"problem_id": 175, "prompt": "/no_think\ndef is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    s = str1\n    i = 0\n    while i < len(s):\n        if s[i] == '(':\n            i += 1\n        elif s[i] == ')':\n            i += 1\n        else:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 176, "prompt": "/no_think\ndef perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    # your code here\n    # return the perimeter of the triangle as an integer\n    # a, b, c are the three sides of the triangle\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter as an integer\n    # a, b, c must be positive integers\n    # return the perimeter"], "evaluation": false}
{"problem_id": 177, "prompt": "/no_think\ndef answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    from math import gcd\n    def lcm(a,b):\n        return a*b//gcd(a,b)\n    if L == R:\n        return -1\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            if lcm(i,j) <= R:\n                return i,j\n    return -1"], "evaluation": false}
{"problem_id": 178, "prompt": "/no_think\nimport re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n    # your code here\n    \"\"\"\n    Args:\n        patterns: list of strings\n        text: string to search\n    Returns:\n        a list of strings that match the pattern in the text\n    \"\"\"\n    # your code here\n    \"\"\"\n    Example:\n    patterns = ['a', 'ab', 'abc']\n    text = 'abc'\n    Output: ['abc']\n    \"\"\"\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here"], "evaluation": false}
{"problem_id": 179, "prompt": "/no_think\ndef is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    # your code here\n    # return True if it is a keith number, else False\n    # keith number is a number where the sum of the digits is equal to the product of the digits.\n    # for example, 111 is a keith number because 1+1+1=3 and 1*1*1=3\n    # 121 is a keith number because 1+2+1=4 and 1*2*1=2, which is not equal. So 121 is not a keith number.\n    # 123 is not a keith number because 1+2+3=6 and 1*2*3=6. So 123 is a keith number.\n    # 0 is not a keith number because sum is 0 and product is 0. So 0 is a keith number.\n    # 1 is a keith number because sum is 1 and product is 1.\n    # 2 is a keith number because sum is 2 and product is 2.\n    # 3 is a keith number because sum is 3 and product is 3.\n    # 4 is a keith number because sum is 4 and product is 4.\n    # 5 is a keith number because sum is 5 and product is 5.\n    # 6 is a keith number because sum is 6 and product is 6.\n    # 7 is a keith number because sum is 7 and product is 7.\n    # 8 is a keith number because sum is 8 and product is 8.\n    # 9 is a keith number because sum is 9 and product is 9.\n    # 10 is not a keith number because sum is 1+0=1 and product is 0.\n    # 11 is not a keith number because sum is 1+1=2 and product is 1.\n    # 12 is not a keith number because sum is 1+2=3 and product is 2.\n    # 13 is not a keith number because sum is 1+3=4 and product is 3.\n    # 14 is not a keith number because sum is 1+4=5 and product is 4.\n    # 15 is"], "evaluation": false}
{"problem_id": 180, "prompt": "/no_think\nfrom math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    # Convert to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n    # Using the Haversine formula\n    a = 0.5 * (sin(elon/2) - sin(elat/2) + cos(elon/2) * cos(elat/2) * (1 - cos(slat/2 - elon/2)))\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    d = 2 * r * c\n    return d"], "evaluation": false}
{"problem_id": 181, "prompt": "/no_think\ndef common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    # your code here\n    # return the longest common prefix\n    # for example, if all strings are the same, return all of them\n    # for example, if all strings are different, return empty string\n    # for example, if two strings are the same, return the first one\n    # for example, if two strings are different, return the first one\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty string\n    # for example, if all strings are empty, return empty string\n    # for example, if one string is empty, return empty"], "evaluation": false}
{"problem_id": 182, "prompt": "/no_think\nimport re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n    # your code here\n    pattern = r'[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z][^a-zA-Z0-9]*[A-Z][a-z]["], "evaluation": false}
{"problem_id": 183, "prompt": "/no_think\ndef count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    from collections import Counter\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 184, "prompt": "/no_think\ndef greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    result = []\n    for num in list:\n        if num > num:\n            result.append(num)\n    return result"], "evaluation": false}
{"problem_id": 185, "prompt": "/no_think\ndef parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    # your code here\n    # return the focus of the parabola in the form (h, k)\n    # where h and k are the coordinates of the focus\n    # a, b, c are the coefficients of the parabola in the form ax² + bx + c\n    # and h, k are the coordinates of the focus in the form (h, k)\n    # the focus of a parabola is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but if the parabola is in the form ax² + bx + c, then the focus is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but if the parabola is in the form ax² + bx + c, then the focus is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but if the parabola is in the form ax² + bx + c, then the focus is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but if the parabola is in the form ax² + bx + c, then the focus is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but if the parabola is in the form ax² + bx + c, then the focus is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but if the parabola is in the form ax² + bx + c, then the focus is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but if the parabola is in the form ax² + bx + c, then the focus is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but if the parabola is in the form ax² + bx + c, then the focus is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but if the parabola is in the form ax² + bx + c, then the focus is at (h, k) = ( -b/(4a), -c/(4a) )\n    # but"], "evaluation": false}
{"problem_id": 186, "prompt": "/no_think\nimport re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n    # your code here\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    # pattern is a list of strings\n    # return True if there is at least one match, False otherwise\n    #"], "evaluation": false}
{"problem_id": 187, "prompt": "/no_think\ndef longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    # your code here\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]\n    # return the value of dp[m][n]"], "evaluation": true}
{"problem_id": 188, "prompt": "/no_think\ndef prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    for i in range(2, n+1):\n        if n % i == 0:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 189, "prompt": "/no_think\ndef first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    # Your code here\n    if n == 0:\n        return 0\n    for i in range(1, n+1):\n        if arr[i-1] != i:\n            return i\n    return arr[0]"], "evaluation": false}
{"problem_id": 190, "prompt": "/no_think\ndef count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    # your code here\n    x1, y1, x2, y2 = map(int, input().split())\n    count = 0\n    for i in range(x1, x2+1):\n        for j in range(y1, y2+1):\n            if i == j:\n                count +=1\n    print(count)"], "evaluation": false}
{"problem_id": 191, "prompt": "/no_think\ndef check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    # your code here\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthname3 in month_days:\n        return True\n    else:\n        return False\n    # your code here"], "evaluation": false}
{"problem_id": 192, "prompt": "/no_think\ndef check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    if len(str) == 0:\n        return False\n    for i in range(len(str)):\n        if str[i].isalpha() or str[i].isdigit():\n            continue\n        else:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 193, "prompt": "/no_think\ndef remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    # your code here\n    return test_tup"], "evaluation": false}
{"problem_id": 194, "prompt": "/no_think\ndef octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    # your code here\n    # convert octal to decimal\n    octal = n\n    decimal = 0\n    i = 0\n    while octal > 0:\n        digit = octal % 10\n        decimal = decimal * 8 + digit\n        octal = octal // 8\n        i += 1\n    return decimal"], "evaluation": false}
{"problem_id": 195, "prompt": "/no_think\ndef first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    # your code here\n    # sort the array\n    arr.sort()\n    # find the first occurrence of x in the array\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -1\n    # if x is found, return the index\n    # else return -1\n    # return the index\n    # if x is not found, return -"], "evaluation": false}
{"problem_id": 196, "prompt": "/no_think\ndef remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    new_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            continue\n        else:\n            new_list.append(test_list[i])\n    return new_list"], "evaluation": true}
{"problem_id": 197, "prompt": "/no_think\ndef find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 198, "prompt": "/no_think\nimport math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n    # your code here\n    # return the largest triangle inscribed in the ellipse\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum area of such a triangle\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum area of such a triangle\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum area of such a triangle\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum area of such a triangle\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum area of such a triangle\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum area of such a triangle\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum area of such a triangle\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum area of such a triangle\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum area of such a triangle\n    # a and b are the semi-major and semi-minor axes of the ellipse\n    # the ellipse is centered at the origin\n    # the triangle is inscribed in the ellipse\n    # return the maximum"], "evaluation": false}
{"problem_id": 199, "prompt": "/no_think\ndef highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1"], "evaluation": false}
{"problem_id": 200, "prompt": "/no_think\ndef position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    max_val = list1[0]\n    max_index = 0\n    for i in range(len(list1)):\n        if list1[i] > max_val:\n            max_val = list1[i]\n            max_index = i\n    return [max_index]  # return a list containing the index of the maximum value"], "evaluation": false}
