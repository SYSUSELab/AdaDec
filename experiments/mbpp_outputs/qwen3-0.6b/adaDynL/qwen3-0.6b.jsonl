{"problem_id": 1, "prompt": "/no_think\nR = 3\nC = 3\ndef min_cost(cost, m, n): \n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n    if m == 0 and n == 0:\n        return 0\n    if m == 0:\n        return min_cost(cost, m, n-1) + cost[m][n]\n    if n == 0:\n        return min_cost(cost, m-1, n) + cost[m][n]\n    return min_cost(cost, m-1, n-1) + cost[m][n]\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost(cost, m-1, n-1), min_cost(cost, m-1, n), min_cost(cost, m, n-1) )\n\n    # return min( min_cost"], "evaluation": false}
{"problem_id": 2, "prompt": "/no_think\ndef similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    if not test_tup1 or not test_tup2:\n        return []\n    return [x for x in test_tup1 if x in test_tup2] + [x for x in test_tup2 if x in test_tup1]"], "evaluation": false}
{"problem_id": 3, "prompt": "/no_think\nimport math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 4, "prompt": "/no_think\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    hq.heapify(nums)\n    largest = hq.heappop(nums)\n    return largest"], "evaluation": false}
{"problem_id": 5, "prompt": "/no_think\ndef count_ways(n): \n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37"], "evaluation": false}
{"problem_id": 6, "prompt": "/no_think\ndef differ_At_One_Bit_Pos(a,b): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 7, "prompt": "/no_think\nimport re\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n    # Your code here\n    # The function should return a list of all such words\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"], "evaluation": true}
{"problem_id": 8, "prompt": "/no_think\ndef square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))"], "evaluation": true}
{"problem_id": 9, "prompt": "/no_think\ndef find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1 if str[0] == str[1] else 0\n    if n == 3:\n        return 1 if str[0] == str[2] else 0\n    if n == 4:\n        return 1 if str[0] == str[3] or str[1] == str[2] else 0\n    if n == 5:\n        return 1 if str[0] == str[4] or str[1] == str[3] or str[2] == str[4] else 0\n    if n == 6:\n        return 1 if str[0] == str[5] or str[1] == str[4] or str[2] == str[3] else 0\n    if n == 7:\n        return 1 if str[0] == str[6] or str[1] == str[5] or str[2] == str[4] or str[3] == str[2] else 0\n    if n == 8:\n        return 1 if str[0] == str[7] or str[1] == str[6] or str[2] == str[5] or str[3] == str[4] else 0\n    if n == 9:\n        return 1 if str[0] == str[8] or str[1] == str[7] or str[2] == str[6] or str[3] == str[5] or str[4] == str[3] else 0\n    if n == 10:\n        return 1 if str[0] == str[9] or str[1] == str[8] or str[2] == str[7] or str[3] == str[6] or str[4] == str[5] else 0\n    if n == 11:\n        return 1 if str[0] == str[10] or str[1] == str[9] or str[2] == str[8] or str[3] == str[7] or str[4] == str[6] or str["], "evaluation": false}
{"problem_id": 10, "prompt": "/no_think\nimport heapq\ndef small_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n    # your code here\n    # list1 is a list of numbers\n    # n is the number of items to get\n    # return the n smallest items as a list\n    # if n is larger than the length of list1, return the list1\n    # if n is smaller than 0, return empty list\n    # if n is 0, return empty list\n    # if n is 1, return list1[0]\n    # if n is 2, return list1[0] and list1[1]\n    # if n is 3, return list1[0], list1[1], list1[2]\n    # if n is 4, return list1[0], list1[1], list1[2], list1[3]\n    # if n is 5, return list1[0], list1[1], list1[2], list1[3], list1[4]\n    # if n is 6, return list1[0], list1[1], list1[2], list1[3], list1[4], list1[5]\n    # if n is 7, return list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6]\n    # if n is 8, return list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7]\n    # if n is 9, return list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8]\n    # if n is 10, return list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9]\n    # if n is 11, return list1[0], list1[1], list1[2], list1[3], list1[4], list1[5], list1[6], list1[7], list1[8], list1[9], list1["], "evaluation": false}
{"problem_id": 11, "prompt": "/no_think\ndef remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    s = s[:i] + s[i+1:]\n    s = s[:i] + s[i+1:]\n    return s"], "evaluation": false}
{"problem_id": 12, "prompt": "/no_think\ndef sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 13, "prompt": "/no_think\nfrom collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n    # your code here\n    # first, count the frequency of each word in the dictionary\n    # then, sort the list of words by their frequency in descending order\n    # and return the first word in the sorted list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the first one\n    # if there are no words, return an empty list\n    # if there are multiple words with the same frequency, return the"], "evaluation": false}
{"problem_id": 14, "prompt": "/no_think\ndef find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    volume = (l * b * h) / 2\n    return volume"], "evaluation": true}
{"problem_id": 15, "prompt": "/no_think\nimport re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n    return ''.join([c for c in text if c.islower() or c.isupper() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c.isdigit() or c.isalpha() or c.isalnum() or c"], "evaluation": false}
{"problem_id": 16, "prompt": "/no_think\nimport re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n    return re.sub(r'([a-z0-9]+)_([a-z0-9]+)', r'__\\1__\\2__', text)"], "evaluation": false}
{"problem_id": 17, "prompt": "/no_think\ndef square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    perimeter = a * 4\n    return perimeter"], "evaluation": true}
{"problem_id": 18, "prompt": "/no_think\nNO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n    # Your code here\n    first = string\n    second = second_string\n    i = 0\n    j = 0\n    while i < len(first) and j < len(second):\n        if first[i] == second[j]:\n            i += 1\n        else:\n            j += 1\n    return first[:i] + second[j:] if i < len(first) else first[:i] + second[j:]"], "evaluation": false}
{"problem_id": 19, "prompt": "/no_think\ndef test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    if len(arraynums) == 0:\n        return False\n    if arraynums[0] == arraynums[1]:\n        return True\n    for i in range(1, len(arraynums)):\n        if arraynums[i] == arraynums[i-1]:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 20, "prompt": "/no_think\ndef is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    # your code here\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 21, "prompt": "/no_think\ndef multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    count = 0\n    for i in range(1, n+1):\n        if i % n == 0:\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 22, "prompt": "/no_think\ndef find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    # Your code here\n    # O(n) time and O(1) space\n    nums = nums + [0] * len(nums)\n    for i in range(len(nums)):\n        if nums[i] != nums[i + 1]:\n            return nums[i]\n    return -1"], "evaluation": false}
{"problem_id": 23, "prompt": "/no_think\ndef maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    max_sum = 0\n    for i in range(len(list1)):\n        current_sum = 0\n        for j in range(len(list1[i])):\n            current_sum += list1[i][j]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"], "evaluation": true}
{"problem_id": 24, "prompt": "/no_think\ndef binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    # your code here\n    decimal = 0\n    for i in range(len(binary)):\n        digit = int(binary[i])\n        decimal += digit * (2 ** (len(binary) - i - 1))\n    return decimal"], "evaluation": false}
{"problem_id": 25, "prompt": "/no_think\ndef find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    product = 1\n    for i in range(n):\n        if arr[i] not in product:\n            product *= arr[i]\n    return product"], "evaluation": false}
{"problem_id": 26, "prompt": "/no_think\ndef check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    # your code here\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == K:\n            count +=1\n    if count == K:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 27, "prompt": "/no_think\nimport re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    # your code here\n    # remove all digits from a list of strings\n    # return a new list with all digits removed\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\", \"hello\", \"world\"]\n    # example input: [\"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example input: [\"hello\", \"world\", \"123\", \"456\", \"789\"]\n    # example output: [\"hello\", \"world\"]\n    # example"], "evaluation": false}
{"problem_id": 28, "prompt": "/no_think\ndef binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    if n < 0 or k < 0 or k > n:\n        return 0\n    if n == 0 or k == 0:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n    # return n * (n-1) * ... * (n -k +1) / (k * (k-1) * ... * 1)\n    # return n * (n-1) * ... * (n -k +1) / (k! )\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)! )\n\n    # return n! / (k! (n -k)!"], "evaluation": true}
{"problem_id": 29, "prompt": "/no_think\ndef get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    count = 0\n    for i in range(arr_size):\n        count += arr[i]\n    return count"], "evaluation": false}
{"problem_id": 30, "prompt": "/no_think\ndef count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 31, "prompt": "/no_think\ndef func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    import heapq\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    return heapq.nsmallest(k, heap)"], "evaluation": false}
{"problem_id": 32, "prompt": "/no_think\nimport math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return max( max_Prime_Factors(n//2), max_Prime_Factors(n) )\n    return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )\n    # return max( max_Prime_Factors(n//3), max_Prime_Factors(n) )"], "evaluation": false}
{"problem_id": 33, "prompt": "/no_think\ndef decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N == 0:\n        return 0\n    else:\n        return decimal_To_Binary(N//2) + bin(N%2)[2:] if N%2 == 1 else decimal_To_Binary(N//2)\n    # return bin(N)[2:] if N%2 == 1 else decimal_To_Binary(N//2)"], "evaluation": false}
{"problem_id": 34, "prompt": "/no_think\ndef find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    # your code here\n    # return the missing number\n    # example input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    # output: 10\n    # example input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    # output: 21\n    # example input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n    # output: 22\n    # example input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n    # output: 23\n    # example input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n    # output: 24\n    # example input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n    # output: 25\n    # example input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,2"], "evaluation": false}
{"problem_id": 35, "prompt": "/no_think\ndef find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * (n + 1) // 2 * (n + 2) // 2"], "evaluation": false}
{"problem_id": 36, "prompt": "/no_think\ndef find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n    # your code here\n    # input: p and q\n    # output: nth digit in the proper fraction of p and q\n    # proper fraction: (p - q) if p > q else (p - q) + 1\n    # note: if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q, then the proper fraction is p - q\n    # but if p < q, then the proper fraction is (p - q) + 1\n    # but if p > q"], "evaluation": false}
{"problem_id": 37, "prompt": "/no_think\ndef sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 38, "prompt": "/no_think\ndef div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    # your code here\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return [even[0], odd[0]]"], "evaluation": false}
{"problem_id": 39, "prompt": "/no_think\nimport heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    if len(S) % 2 != 0:\n        return False\n    if len(S) == 1:\n        return False\n    if len(S) == 2:\n        return S[0] != S[1]\n    if len(S) == 3:\n        return S[0] != S[1] and S[1] != S[2]\n    if len(S) == 4:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3]\n    if len(S) == 5:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3] and S[3] != S[4]\n    if len(S) == 6:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3] and S[3] != S[4] and S[4] != S[5]\n    if len(S) == 7:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3] and S[3] != S[4] and S[4] != S[5] and S[5] != S[6]\n    if len(S) == 8:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3] and S[3] != S[4] and S[4] != S[5] and S[5] != S[6] and S[6] != S[7]\n    if len(S) == 9:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3] and S[3] != S[4] and S[4] != S[5] and S[5] != S[6] and S[6] != S[7] and S[7] != S[8]\n    if len(S) == 10:\n        return S[0] != S[1] and S[1] != S[2] and S[2] != S[3] and S"], "evaluation": false}
{"problem_id": 40, "prompt": "/no_think\nfrom collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    # your code here\n    freq = Counter()\n    for num in nums:\n        freq[num] += 1\n    return freq"], "evaluation": false}
{"problem_id": 41, "prompt": "/no_think\ndef filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "/no_think\ndef find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum"], "evaluation": false}
{"problem_id": 43, "prompt": "/no_think\nimport re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n    pattern = r'([a-z]+)_([a-z]+)_([a-z]+)'\n    result = re.findall(pattern, text)\n    return result"], "evaluation": false}
{"problem_id": 44, "prompt": "/no_think\nimport re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n    # your code here\n    pattern = re.compile(r'\\b' + re.escape(text) + r'\\b')\n    matches = pattern.findall(text)\n    return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match for match in matches if match != '']\n    # return [match"], "evaluation": false}
{"problem_id": 45, "prompt": "/no_think\ndef get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return gcd(l[0], get_gcd(l[1:]))"], "evaluation": false}
{"problem_id": 46, "prompt": "/no_think\ndef test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    if len(set(data)) == len(data):\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 47, "prompt": "/no_think\ndef compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    # your code here\n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b! / (a!)) \n    # compute the last digit of (b!"], "evaluation": false}
{"problem_id": 48, "prompt": "/no_think\ndef odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    result = 0\n    for i in range(0, n):\n        if (n >> i) & 1:\n            result ^= (1 << i)\n    return result"], "evaluation": false}
{"problem_id": 49, "prompt": "/no_think\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 50, "prompt": "/no_think\ndef min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    return min(input_list, key=len)"], "evaluation": false}
{"problem_id": 51, "prompt": "/no_think\ndef check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    if x == y and y == z and x == z:\n        print(\"Equilateral\")\n    else:\n        print(\"Not equilateral\")"], "evaluation": false}
{"problem_id": 52, "prompt": "/no_think\ndef parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    # your code here\n    # return the area\n    # input: b is the base, h is the height\n    # output: area\n    # example: parallelogram_area(3,4) returns 12\n    # example: parallelogram_area(5,6) returns 30\n    # example: parallelogram_area(2,3) returns 6\n    # example: parallelogram_area(4,5) returns 20\n    # example: parallelogram_area(6,7) returns 42\n    # example: parallelogram_area(8,9) returns 72\n    # example: parallelogram_area(10,10) returns 100\n    # example: parallelogram_area(12,15) returns 180\n    # example: parallelogram_area(15,10) returns 150\n    # example: parallelogram_area(10,12) returns 120\n    # example: parallelogram_area(12,15) returns 180\n    # example: parallelogram_area(15,10) returns 150\n    # example: parallelogram_area(10,12) returns 120\n    # example: parallelogram_area(12,15) returns 180\n    # example: parallelogram_area(15,10) returns 150\n    # example: parallelogram_area(10,12) returns 120\n    # example: parallelogram_area(12,15) returns 180\n    # example: parallelogram_area(15,10) returns 150\n    # example: parallelogram_area(10,12) returns 120\n    # example: parallelogram_area(12,15) returns 180\n    # example: parallelogram_area(15,10) returns 150\n    # example: parallelogram_area(10,12) returns 120\n    # example: parallelogram_area(12,15) returns 180\n    # example: parallelogram_area(15,10) returns"], "evaluation": false}
{"problem_id": 53, "prompt": "/no_think\ndef check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        print(\"They are equal\")\n    else:\n        print(\"They are not equal\")\n    return 0"], "evaluation": false}
{"problem_id": 54, "prompt": "/no_think\ndef counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    result = []\n    for num in count:\n        if num > 0:\n            result.append(num)\n    return result"], "evaluation": false}
{"problem_id": 55, "prompt": "/no_think\nimport math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n    if a == 0:\n        return 0\n    if r == 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return a\n    return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-1)\n    # return a * r ** (n-"], "evaluation": true}
{"problem_id": 56, "prompt": "/no_think\ndef check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    reverse = int(str(n)[::-1])\n    if (n * 2) - reverse == 0:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 57, "prompt": "/no_think\ndef find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_num = max(max_num, arr[i], arr[j])\n    return max_num"], "evaluation": false}
{"problem_id": 58, "prompt": "/no_think\ndef opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y < 0:\n        return False\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 59, "prompt": "/no_think\ndef is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    return (n * (2 * n + 1)) // 3"], "evaluation": false}
{"problem_id": 60, "prompt": "/no_think\ndef max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] - arr[j] == 0:\n                max_len = max(max_len, j - i)\n    return max_len"], "evaluation": false}
{"problem_id": 61, "prompt": "/no_think\nfrom collections import defaultdict\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(d) for d in s[i:j]) == len(s[i:j]):\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 62, "prompt": "/no_think\ndef smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    # your code here\n    # return the smallest number in the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0\n    # if the list has only one element, return that element\n    # if the list has more than one element, return the minimum of the list\n    # if the list is empty, return 0"], "evaluation": false}
{"problem_id": 63, "prompt": "/no_think\ndef max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            current_diff = test_list[i] - test_list[j]\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff"], "evaluation": false}
{"problem_id": 64, "prompt": "/no_think\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])"], "evaluation": true}
{"problem_id": 65, "prompt": "/no_think\ndef recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list[0] + recursive_list_sum(data_list[1:])\n        # return data_list["], "evaluation": false}
{"problem_id": 66, "prompt": "/no_think\ndef pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "/no_think\ndef bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    \"\"\"\n    The function returns the number of ways to partition a set of bell numbers.\n    \"\"\"\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function returns the number of ways to partition a set of bell numbers.\n    # Add your code here\n    # The function"], "evaluation": false}
{"problem_id": 68, "prompt": "/no_think\ndef is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    n = len(A)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 69, "prompt": "/no_think\ndef is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 70, "prompt": "/no_think\ndef get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    if len(Input) != k:\n        return False\n    for i in range(len(Input)):\n        if len(Input[i]) != k:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 71, "prompt": "/no_think\ndef comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    n = len(nums)\n    i = 1\n    while i < n:\n        for j in range(n - i):\n            if nums[j] > nums[j + i]:\n                nums[j], nums[j + i] = nums[j + i], nums[j]\n        i += 1\n    return nums"], "evaluation": false}
{"problem_id": 72, "prompt": "/no_think\ndef dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 4 == 0:\n        return True\n    if n % 4 == 1:\n        return False\n    return False"], "evaluation": false}
{"problem_id": 73, "prompt": "/no_think\nimport re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n    # your code here\n    # return the list of all the words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n    return words"], "evaluation": false}
{"problem_id": 74, "prompt": "/no_think\ndef is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n    if len(patterns) == 0:\n        return True\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 75, "prompt": "/no_think\ndef find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                result.append(test_list[i][j])\n    return result"], "evaluation": false}
{"problem_id": 76, "prompt": "/no_think\ndef count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    # your code here\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i - j) % 2 == 0:\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 77, "prompt": "/no_think\ndef is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    sum_even = 0\n    sum_odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even += i\n        else:\n            sum_odd += i\n    return sum_even - sum_odd"], "evaluation": false}
{"problem_id": 78, "prompt": "/no_think\ndef count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 == 1:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 79, "prompt": "/no_think\ndef word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    return len(s) % 2 != 0"], "evaluation": true}
{"problem_id": 80, "prompt": "/no_think\ndef tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    return n*(n+1)*(n+2)/6"], "evaluation": true}
{"problem_id": 81, "prompt": "/no_think\ndef zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    # your code here\n    zip_result = []\n    for i in range(len(test_tup1)):\n        zip_result.append( (test_tup1[i], test_tup2[i]) )\n    return zip_result"], "evaluation": false}
{"problem_id": 82, "prompt": "/no_think\nimport math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n    return (4/3)*math.pi*r**3"], "evaluation": true}
{"problem_id": 83, "prompt": "/no_think\ndef get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    total = 0\n    for i in range(len(strr)):\n        total += int(strr[i])\n    return total"], "evaluation": false}
{"problem_id": 84, "prompt": "/no_think\ndef sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2) + sequence(n - 3) + sequence(n - 4) + sequence(n - 5) + sequence(n - 6) + sequence(n - 7) + sequence(n - 8) + sequence(n - 9) + sequence(n - 10) + sequence(n - 11) + sequence(n - 12) + sequence(n - 13) + sequence(n - 14) + sequence(n - 15) + sequence(n - 16) + sequence(n - 17) + sequence(n - 18) + sequence(n - 19) + sequence(n - 20) + sequence(n - 21) + sequence(n - 22) + sequence(n - 23) + sequence(n - 24) + sequence(n - 25) + sequence(n - 26) + sequence(n - 27) + sequence(n - 28) + sequence(n - 29) + sequence(n - 30) + sequence(n - 31) + sequence(n - 32) + sequence(n - 33) + sequence(n - 34) + sequence(n - 35) + sequence(n - 36) + sequence(n - 37) + sequence(n - 38) + sequence(n - 39) + sequence(n - 40) + sequence(n - 41) + sequence(n - 42) + sequence(n - 43) + sequence(n - 44) + sequence(n - 45) + sequence(n - 46) + sequence(n - 47) + sequence(n - 48) + sequence(n - 49) + sequence(n - 50) + sequence(n - 51) + sequence(n - 52) + sequence(n - 53) + sequence(n - 54) + sequence(n - 55) + sequence(n - 56) + sequence(n - 57) + sequence(n - 58) + sequence(n - 59) + sequence(n - 60) + sequence(n - 61) + sequence(n -"], "evaluation": false}
{"problem_id": 85, "prompt": "/no_think\nimport math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2) * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4 * math.pi * r ** 2 * math.sqrt(3) / 3\n    # return 4"], "evaluation": false}
{"problem_id": 86, "prompt": "/no_think\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    return (n * (n + 1) * (3 * n + 1)) // 2"], "evaluation": false}
{"problem_id": 87, "prompt": "/no_think\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    # your code here\n    # return the merged dictionary\n    # example:\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1, 'b':2}, dict2 = {'c':3}, dict3 = {'d':4}\n    # return {'a':1, 'b':2, 'c':3, 'd':4}\n    # dict1 = {'a':1"], "evaluation": false}
{"problem_id": 88, "prompt": "/no_think\nimport collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n    count = collections.defaultdict(int)\n    for num in list1:\n        count[num] += 1\n    return count"], "evaluation": true}
{"problem_id": 89, "prompt": "/no_think\ndef closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    if N == 0:\n        return 0\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 3\n    if N == 5:\n        return 4\n    if N == 6:\n        return 5\n    if N == 7:\n        return 6\n    if N == 8:\n        return 7\n    if N == 9:\n        return 8\n    if N == 10:\n        return 9\n    if N == 11:\n        return 10\n    if N == 12:\n        return 11\n    if N == 13:\n        return 12\n    if N == 14:\n        return 13\n    if N == 15:\n        return 14\n    if N == 16:\n        return 15\n    if N == 17:\n        return 16\n    if N == 18:\n        return 17\n    if N == 19:\n        return 18\n    if N == 20:\n        return 19\n    if N == 21:\n        return 20\n    if N == 22:\n        return 21\n    if N == 23:\n        return 22\n    if N == 24:\n        return 23\n    if N == 25:\n        return 24\n    if N == 26:\n        return 25\n    if N == 27:\n        return 26\n    if N == 28:\n        return 27\n    if N == 29:\n        return 28\n    if N == 30:\n        return 29\n    if N == 31:\n        return 30\n    if N == 32:\n        return 31\n    if N == 33:\n        return 32\n    if N == 34:\n        return 33\n    if N == 35:\n        return 34\n    if N == 36:\n        return 35\n    if N == 37:\n        return 36"], "evaluation": true}
{"problem_id": 90, "prompt": "/no_think\ndef len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"], "evaluation": true}
{"problem_id": 91, "prompt": "/no_think\ndef find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    if sub_str in str1:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 92, "prompt": "/no_think\ndef is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    # Your code here\n    # The function should return True if the number is undulating, False otherwise\n    # The undulating number is defined as a number where each digit is either 0 or 1.\n    # For example, 101 is undulating, 110 is undulating, 1001 is undulating, 1010 is undulating, 10001 is undulating, 100001 is undulating, 1000001 is undulating, 10000001 is undulating, 100000001 is undulating, 1000000001 is undulating, 10000000001 is undulating, 100000000001 is undulating, 1000000000001 is undulating, 10000000000001 is undulating, 100000000000001 is undulating, 1000000000000001 is undulating, 10000000000000001 is undulating, 100000000000000001 is undulating, 1000000000000000001 is undulating, 10000000000000000001 is undulating, 100000000000000000001 is undulating, 1000000000000000000001 is undulating, 10000000000000000000001 is undulating, 100000000000000000000001 is undulating, 1000000000000000000000001 is undulating, 1000000"], "evaluation": false}
{"problem_id": 93, "prompt": "/no_think\ndef power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"], "evaluation": true}
{"problem_id": 94, "prompt": "/no_think\nfrom operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n    # your code here\n    # returns the index of the minimum value in the test_list\n    # test_list is a list of tuples\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of the minimum value in the test_list\n    # returns the index of"], "evaluation": false}
{"problem_id": 95, "prompt": "/no_think\ndef Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    min_length = float('inf')  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            current_length = j - i + 1  \n            if current_length < min_length:  \n                min_length = current_length  \n    return min_length"], "evaluation": false}
{"problem_id": 96, "prompt": "/no_think\ndef divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 97, "prompt": "/no_think\ndef frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    from collections import Counter\n    counts = Counter(list1)\n    return counts"], "evaluation": false}
{"problem_id": 98, "prompt": "/no_think\ndef multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"], "evaluation": true}
{"problem_id": 99, "prompt": "/no_think\ndef decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    if n == 0:\n        return 0\n    else:\n        return decimal_to_binary(n // 2) + bin(n % 2)[2:] if n % 2 == 1 else decimal_to_binary(n // 2)"], "evaluation": false}
{"problem_id": 100, "prompt": "/no_think\nimport sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num % 2 == 0:\n        return next_palindrome(num // 2)\n    else:\n        return next_palindrome(num // 2 + 1)"], "evaluation": false}
{"problem_id": 101, "prompt": "/no_think\ndef kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if k == 1:\n        return arr[0]\n    if k == n:\n        return arr[-1]\n    if k < n:\n        return kth_element(arr, n - 1, k)\n    else:\n        return kth_element(arr, n - 1, n - k)"], "evaluation": false}
{"problem_id": 102, "prompt": "/no_think\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    # your code here\n    # return the camel case string\n    # example: snake_to_camel(\"hello-world\") returns \"HelloWorld\"\n    # example: snake_to_camel(\"hello-world-123\") returns \"HelloWorld123\"\n    # example: snake_to_camel(\"hello-123\") returns \"Hello123\"\n    # example: snake_to_camel(\"hello\") returns \"Hello\"\n    # example: snake_to_camel(\"hello-123-456\") returns \"Hello123456\"\n    # example: snake_to_camel(\"hello-123-456-789\") returns \"Hello123456789\"\n    # example: snake_to_camel(\"hello-123-456-789-1011\") returns \"Hello1234567891011\"\n    # example: snake_to_camel(\"hello-123-456-789-1011-1234\") returns \"Hello1234\"\n    # example: snake_to_camel(\"hello-123-456-789-1011-1234-1235\") returns \"Hello12341235\"\n    # example: snake_to_camel(\"hello-123-456-789-1011-1234-1235-1236\") returns \"Hello123412351236\"\n    # example: snake_to_camel(\"hello-123-456-789-1011-1234-1235-1236-1237\") returns \"Hello1234123512361237\"\n    # example: snake_to_camel(\"hello-123-456-789-1011-1234-1235-1236-1237-1238\") returns \"Hello12341235123612371238\"\n    # example: snake_to_camel(\"hello-123-"], "evaluation": false}
{"problem_id": 103, "prompt": "/no_think\ndef eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    # your code here\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            result += i * j\n    return result"], "evaluation": false}
{"problem_id": 104, "prompt": "/no_think\ndef sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    # Your code here\n    # sort each sublist of strings in a given list of lists using lambda function\n    # return the sorted list of lists\n    # example input: [[1,2], [3,4], [5,6]]\n    # example output: [[1,2], [3,4], [5,6]]\n    # example input: [[1,2,3], [4,5,6], [7,8,9]]\n    # example output: [[1,2,3], [4,5,6], [7,8,9]]\n    # example input: [[1,2], [3,4], [5,6], [7,8]]\n    # example output: [[1,2], [3,4], [5,6], [7,8]]\n    # example input: [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\n    # example output: [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\n    # example input: [[1,2], [3,4,5], [6,7,8,9]]\n    # example output: [[1,2], [3,4,5], [6,7,8,9]]\n    # example input: [[1,2,3], [4,5], [6,7,8]]\n    # example output: [[1,2,3], [4,5], [6,7,8]]\n    # example input: [[1,2,3,4], [5,6,7], [8,9,10]]\n    # example output: [[1,2,3,4], [5,6,7], [8,9,10]]\n    # example input: [[1,2], [3,4,5,6], [7,8,9,10]]\n    # example output: [[1,2], [3,4,5,6], [7,8,9,10]]\n    # example input: [[1,2,3,4,5], [6,7,8,9,10]]\n    # example output: [[1,2,3,4,5], [6,7,8,9"], "evaluation": false}
{"problem_id": 105, "prompt": "/no_think\ndef count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    count = 0\n    for i in range(len(lst)):\n        if lst[i] is True:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 106, "prompt": "/no_think\ndef add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    # your code here\n    \"\"\"\n    test_list = [1, 2, 3]\n    test_tup = (1, 2, 3)\n    result = add_lists(test_list, test_tup)\n    print(result)\n    \"\"\"\n    return test_list + test_tup"], "evaluation": false}
{"problem_id": 107, "prompt": "/no_think\ndef count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R+1):\n        num = int(i, 16)\n        count += num\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "/no_think\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    # Your code here\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    result = []\n    while heap:\n        num = heapq.heappop(heap)\n        result.append(num)\n    return result"], "evaluation": false}
{"problem_id": 109, "prompt": "/no_think\ndef odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(1, n+1):\n        if (i & 1) == 1:\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 110, "prompt": "/no_think\ndef extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 111, "prompt": "/no_think\ndef common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    # your code here\n    # return the list of common elements\n    # example: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    # return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    # return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    # return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    # return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    # return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,2"], "evaluation": false}
{"problem_id": 112, "prompt": "/no_think\ndef perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    perimeter = 2 * pi * diameter + 2 * pi * height\n    return perimeter"], "evaluation": false}
{"problem_id": 113, "prompt": "/no_think\ndef check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 114, "prompt": "/no_think\nfrom collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n    freq = Counter()\n    for i in range(len(test_list)):\n        freq[test_list[i]] = freq.get(test_list[i], 0) + 1\n    return freq"], "evaluation": false}
{"problem_id": 115, "prompt": "/no_think\ndef empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    for i in range(len(list1)):\n        if list1[i] is not None:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 116, "prompt": "/no_think\ndef tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    # Your code here\n    # Convert the tuple to a list and then to an integer\n    # Convert the list to an integer\n    # Return the integer\n    return int(tuple(nums))"], "evaluation": false}
{"problem_id": 117, "prompt": "/no_think\ndef list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    # your code here\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float\n    # Convert all elements in the list to float"], "evaluation": false}
{"problem_id": 118, "prompt": "/no_think\ndef string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https:// [link text](https:// [link text](https://))\n    # [link text](https://"], "evaluation": false}
{"problem_id": 119, "prompt": "/no_think\ndef search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 120, "prompt": "/no_think\ndef max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            product = list1[i][j] * list1[i][j+1]\n            if product > max_product:\n                max_product = product\n    return max_product"], "evaluation": false}
{"problem_id": 121, "prompt": "/no_think\ndef check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    i = 0\n    j = n - 1\n    while i < j:\n        if A[i] + A[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif A[i] + A[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return count"], "evaluation": false}
{"problem_id": 122, "prompt": "/no_think\nMAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37"], "evaluation": false}
{"problem_id": 123, "prompt": "/no_think\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    sum_amicable = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            sum_amicable += i\n    return sum_amicable"], "evaluation": false}
{"problem_id": 124, "prompt": "/no_think\nimport cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 125, "prompt": "/no_think\ndef find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i] == '0' and string[j] == '1':\n                max_diff = max(max_diff, j - i)\n    return max_diff"], "evaluation": false}
{"problem_id": 126, "prompt": "/no_think\ndef sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    # your code here\n    # sum of common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b\n    # returns the sum of all common divisors of a and b"], "evaluation": false}
{"problem_id": 127, "prompt": "/no_think\ndef multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    if x == 0 or y == 0:\n        return 0\n    if x == 1:\n        return y\n    if y == 1:\n        return x\n    return multiply_int(x - 1, y - 1) + multiply_int(x - 1, y) + multiply_int(x, y - 1)"], "evaluation": false}
{"problem_id": 128, "prompt": "/no_think\ndef long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    words = str.split()\n    words = [word for word in words if len(word) > n]\n    return words"], "evaluation": true}
{"problem_id": 129, "prompt": "/no_think\ndef magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 130, "prompt": "/no_think\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    return max(freq.items(), key=lambda x: x[1])"], "evaluation": true}
{"problem_id": 131, "prompt": "/no_think\ndef reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s = list(str1)\n    i = 0\n    j = len(s) - 1\n    count = 0\n    while i < j:\n        if s[i] in vowels:\n            count += 1\n            s[i] = s[j]\n            j -= 1\n        i += 1\n    return ''.join(s)"], "evaluation": false}
{"problem_id": 132, "prompt": "/no_think\ndef tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 133, "prompt": "/no_think\ndef sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    sum_neg = lambda x: x if x < 0 else 0\n    return sum(sum_neg(x) for x in nums)"], "evaluation": true}
{"problem_id": 134, "prompt": "/no_think\ndef check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    if p == 0:\n        return arr[-1] % 2 == 0\n    else:\n        return check_last(arr, n, p-1) % 2 == 0"], "evaluation": false}
{"problem_id": 135, "prompt": "/no_think\ndef hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return (n * (n + 1) * (3 * n + 1)) // 2"], "evaluation": false}
{"problem_id": 136, "prompt": "/no_think\ndef cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    if units < 0:\n        return 0\n    if units == 0:\n        return 0\n    if units < 10:\n        return 0\n    if units >= 10 and units < 100:\n        return 10 * units\n    elif units >= 100 and units < 200:\n        return 100 * units\n    else:\n        return 200 * units\n    return 0"], "evaluation": false}
{"problem_id": 137, "prompt": "/no_think\nfrom array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count +=1\n    return count / len(nums)"], "evaluation": false}
{"problem_id": 138, "prompt": "/no_think\ndef is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    for i in range(1, n+1):\n        if n % (2**i) == 0:\n            return True\n        else:\n            return False\n    return False"], "evaluation": true}
{"problem_id": 139, "prompt": "/no_think\ndef circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    pi = 3.14\n    circumference = 2 * pi * r\n    return circumference"], "evaluation": false}
{"problem_id": 140, "prompt": "/no_think\ndef extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    # your code here\n    # return the list of elements that occur singly\n    # for example, if the input is (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119"], "evaluation": false}
{"problem_id": 141, "prompt": "/no_think\ndef pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    n = len(nums)\n    nums = nums[::-1]  # reverse the list\n    for i in range(n-1, 0, -1):\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums[i-1] = nums[i-1] * -1\n        nums[i] = nums[i] * -1\n        nums"], "evaluation": false}
{"problem_id": 142, "prompt": "/no_think\ndef count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    # your code here\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                count +=1\n    return count"], "evaluation": false}
{"problem_id": 143, "prompt": "/no_think\ndef find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    # your code here\n    pass"], "evaluation": false}
{"problem_id": 144, "prompt": "/no_think\ndef sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    # Your code here\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += abs(arr[i] - arr[j])\n    return sum"], "evaluation": true}
{"problem_id": 145, "prompt": "/no_think\ndef max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    max_diff = 0\n    min_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n            if diff < min_diff:\n                min_diff = diff\n    return max_diff, min_diff"], "evaluation": false}
{"problem_id": 146, "prompt": "/no_think\ndef ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    return sum(ord(c) for c in str1)"], "evaluation": false}
{"problem_id": 147, "prompt": "/no_think\ndef max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    m, n = len(tri), len(tri[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m):\n        for j in range(n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + tri[i][j]\n    return dp[m-1][n-1]\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n    # return max(max(dp[i][j] for i in range(m) for j in range(n)), dp[m-1][n-1])\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j] for i in range(m) for j in range(n)))\n\n    # return max(dp[m-1][n-1], max(dp[i][j]"], "evaluation": false}
{"problem_id": 148, "prompt": "/no_think\ndef sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n    # your code here\n    # first, we need to split the number into two parts\n    # for example, if N is 12345, then the two parts are 12 and 34, sum is 12+34=46\n    # but if N is 123456, then the two parts are 123 and 456, sum is 123+456=579\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 34, sum is 46\n    # but if N is 12345, then the two parts are 12 and 3"], "evaluation": false}
{"problem_id": 149, "prompt": "/no_think\ndef longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    arr = [int(x) for x in arr]\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_len = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == 1:\n                max_len = max(max_len, 2)\n    return max_len"], "evaluation": false}
{"problem_id": 150, "prompt": "/no_think\ndef does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    # your code here\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 151, "prompt": "/no_think\ndef is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    if x == 0 or y == 0:\n        return False\n    gcd = math.gcd(x, y)\n    return gcd == 1"], "evaluation": false}
{"problem_id": 152, "prompt": "/no_think\ndef merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = x[:mid]\n    right = x[mid:]\n    left_sorted = merge_sort(left)\n    right_sorted = merge_sort(right)\n    return merge(left_sorted, right_sorted)"], "evaluation": false}
{"problem_id": 153, "prompt": "/no_think\ndef parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    x = (b**2 - 4*a*c) / (2*a)\n    y = (b**2 - 4*a*c) / (2*a) \n    return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return (x, y)\n    # return ("], "evaluation": false}
{"problem_id": 154, "prompt": "/no_think\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == 'x':\n                result.append(nums[i][j])\n    return result"], "evaluation": false}
{"problem_id": 155, "prompt": "/no_think\ndef even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    result = 0\n    for i in range(0, n, 2):\n        bit = (n >> i) & 1\n        if bit == 1:\n            result ^= (1 << (i))\n    return result"], "evaluation": false}
{"problem_id": 156, "prompt": "/no_think\ndef tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 157, "prompt": "/no_think\nfrom itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n    if not list1:\n        return []\n    result = []\n    first = list1[0]\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == first:\n            count += 1\n        else:\n            result.append((first, count))\n            first = list1[i]\n            count = 1\n    result.append((first, count))\n    return result"], "evaluation": false}
{"problem_id": 158, "prompt": "/no_think\ndef min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if k == 0:\n        return 0\n    return min_Ops(arr, n-1, k-1) + min_Ops(arr, n-1, k) + min_Ops(arr, n-1, k+1)"], "evaluation": false}
{"problem_id": 159, "prompt": "/no_think\ndef month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    if month in [1,2,3,4,5,6]:\n        if days < 31:\n            season = \"Spring\"\n        elif days < 30:\n            season = \"Summer\"\n        elif days < 28:\n            season = \"Autumn\"\n        else:\n            season = \"Winter\"\n    elif month in [7,8,9,10,11,12]:\n        if days < 31:\n            season = \"Autumn\"\n        elif days < 30:\n            season = \"Winter\"\n        elif days < 28:\n            season = \"Spring\"\n        else:\n            season = \"Summer\"\n    else:\n        season = \"Unknown\"\n    return season"], "evaluation": false}
{"problem_id": 160, "prompt": "/no_think\ndef solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    x = 0\n    y = 0\n    for i in range(1, n+1):\n        if a * i % n == 0:\n            x = i\n            y = 0\n            break\n        elif b * i % n == 0:\n            x = 0\n            y = i\n            break\n    return x, y"], "evaluation": false}
{"problem_id": 161, "prompt": "/no_think\ndef remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    # Your code here\n    pass"], "evaluation": false}
{"problem_id": 162, "prompt": "/no_think\ndef sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    total = 0\n    x = 0\n    while n - x >= 0:\n        total += n - x\n        x += 1\n    return total"], "evaluation": false}
{"problem_id": 163, "prompt": "/no_think\nfrom math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n    # your code here\n    # input: s is the side length, l is the number of sides\n    # output: area of the polygon\n    # example: area_polygon(4, 5) should return 100\n    # example: area_polygon(5, 4) should return 100\n    # example: area_polygon(5, 5) should return 100\n    # example: area_polygon(5, 6) should return 100\n    # example: area_polygon(5, 7) should return 100\n    # example: area_polygon(5, 8) should return 100\n    # example: area_polygon(5, 9) should return 100\n    # example: area_polygon(5, 10) should return 100\n    # example: area_polygon(5, 11) should return 100\n    # example: area_polygon(5, 12) should return 100\n    # example: area_polygon(5, 13) should return 100\n    # example: area_polygon(5, 14) should return 100\n    # example: area_polygon(5, 15) should return 100\n    # example: area_polygon(5, 16) should return 100\n    # example: area_polygon(5, 17) should return 100\n    # example: area_polygon(5, 18) should return 100\n    # example: area_polygon(5, 19) should return 100\n    # example: area_polygon(5, 20) should return 100\n    # example: area_polygon(5, 21) should return 100\n    # example: area_polygon(5, 22) should return 100\n    # example: area_polygon(5, 23) should return 100\n    # example: area_polygon(5, 24) should return 100\n    # example: area_polygon(5, 25) should return 100\n    # example: area_polygon(5, 26) should return 100\n    # example: area_polygon("], "evaluation": false}
{"problem_id": 164, "prompt": "/no_think\nimport math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n    if num1 == num2:\n        return True\n    if num1 == 0 or num2 == 0:\n        return False\n    sum1 = sum_of_divisors(num1)\n    sum2 = sum_of_divisors(num2)\n    return sum1 == sum2"], "evaluation": false}
{"problem_id": 165, "prompt": "/no_think\ndef count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].islower() and str1[i].isupper():\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 166, "prompt": "/no_think\ndef find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 167, "prompt": "/no_think\ndef next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return 2 * n\n    else:\n        return 2 * n + 1"], "evaluation": false}
{"problem_id": 168, "prompt": "/no_think\ndef frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count +=1\n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "/no_think\ndef get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n-1) + 2 * get_pell(n-2)\n    \"\"\"\n    The function returns the nth pell number.\n    \"\"\"\n    # Add your code here.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth pell number.\n    # The function is supposed to return the nth"], "evaluation": false}
{"problem_id": 170, "prompt": "/no_think\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    # your code here\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"], "evaluation": true}
{"problem_id": 171, "prompt": "/no_think\nimport math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n    # your code here\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon\n    # return the perimeter of the pentagon\n    # perimeter = 5 * a\n    # return 5 * a\n    # a is the length of one side of the pentagon"], "evaluation": false}
{"problem_id": 172, "prompt": "/no_think\ndef count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 's' or s[i] == 't' or s[i] == 'd':\n            count +=1\n    return count"], "evaluation": false}
{"problem_id": 173, "prompt": "/no_think\nimport re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n    return re.sub(r'[^a-zA-Z0-9]', '', text)"], "evaluation": true}
{"problem_id": 174, "prompt": "/no_think\ndef group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    # your code here\n    # input: list of key-value pairs\n    # output: dictionary of lists\n    # example: input [[1,2], [3,4], [5,6]] → output [[1,3,5], [2,4,6]]\n    # example: input [[1,2], [3,4], [5,6], [7,8]] → output [[1,3,5], [2,4,6], [7,8]]\n    # example: input [[1,2], [3,4], [5,6], [7,8], [9,10]] → output [[1,3,5,7], [2,4,6,8], [9,10]]\n    # example: input [[1,2], [3,4], [5,6], [7,8], [9,10], [11,12]] → output [[1,3,5,7,9], [2,4,6,8,10], [11,12]]\n    # example: input [[1,2], [3,4], [5,6], [7,8], [9,10], [11,12], [13,14]] → output [[1,3,5,7,9,11], [2,4,6,8,10,12], [13,14]]\n    # example: input [[1,2], [3,4], [5,6], [7,8], [9,10], [11,12], [13,14], [15,16]] → output [[1,3,5,7,9,11,13], [2,4,6,8,10,12,14], [15,16]]\n    # example: input [[1,2], [3,4], [5,6], [7,8], [9,10], [11,12], [13,14], [15,16]] → output [[1,3,5,7,9,11,13,15], [2,4,6,8,10,12,14,16]]\n    # example: input"], "evaluation": false}
{"problem_id": 175, "prompt": "/no_think\ndef is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    s = str1\n    i = 0\n    while i < len(s):\n        if s[i] == '(':\n            i += 1\n        elif s[i] == ')':\n            i += 1\n        else:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 176, "prompt": "/no_think\ndef perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        return 0\n    # return a + b + c\n    # if a + b > c and a + c > b and b + c > a:\n    #     return a + b + c\n    # else:\n    #     return 0\n    # return a + b + c\n    # if a + b > c and a + c > b and b + c > a:\n    #     return a + b + c\n    # else:\n    #     return 0\n    # return a + b + c\n    # if a + b > c and a + c > b and b + c > a:\n    #     return a + b + c\n    # else:\n    #     return 0\n    # return a + b + c\n    # if a + b > c and a + c > b and b + c > a:\n    #     return a + b + c\n    # else:\n    #     return 0\n    # return a + b + c\n    # if a + b > c and a + c > b and b + c > a:\n    #     return a + b + c\n    # else:\n    #     return 0\n    # return a + b + c\n    # if a + b > c and a + c > b and b + c > a:\n    #     return a + b + c\n    # else:\n    #     return 0\n    # return a + b + c\n    # if a + b > c and a + c > b and b + c > a:\n    #     return a + b + c\n    # else:\n    #     return 0\n    # return a + b + c\n    # if a + b > c and a + c > b and b + c > a:\n    #     return a + b + c\n    # else:\n    #     return 0\n    # return a + b + c\n    # if a + b > c and a + c > b and b + c > a:\n    #     return a + b + c\n    # else:\n    #     return 0\n    # return a + b + c\n    # if a + b > c"], "evaluation": false}
{"problem_id": 177, "prompt": "/no_think\ndef answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    from math import gcd\n    def lcm(a,b):\n        return a*b//gcd(a,b)\n    for i in range(L):\n        for j in range(i+1, R):\n            if lcm(i,j) >= L and lcm(i,j) <= R:\n                return i,j\n    return -1"], "evaluation": false}
{"problem_id": 178, "prompt": "/no_think\nimport re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n    # your code here\n    # pattern is a string, text is a string\n    # return the list of all occurrences of the pattern in the text\n    # for example, if pattern is \"abc\", text is \"abc\", then return [\"abc\"]\n    # if pattern is \"ab\", text is \"ab\", then return [\"ab\"]\n    # if pattern is \"ab\", text is \"abc\", then return [\"ab\", \"abc\"]\n    # if pattern is \"a\", text is \"a\", then return [\"a\"]\n    # if pattern is \"a\", text is \"aa\", then return [\"a\", \"aa\"]\n    # if pattern is \"a\", text is \"ab\", then return [\"a\", \"ab\"]\n    # if pattern is \"a\", text is \"aaa\", then return [\"a\", \"aa\", \"aaa\"]\n    # if pattern is \"a\", text is \"ab\", then return [\"a\", \"ab\"]\n    # if pattern is \"a\", text is \"aa\", then return [\"a\", \"aa\"]\n    # if pattern is \"a\", text is \"ab\", then return [\"a\", \"ab\"]\n    # if pattern is \"a\", text is \"aaa\", then return [\"a\", \"aa\", \"aaa\"]\n    # if pattern is \"a\", text is \"ab\", then return [\"a\", \"ab\"]\n    # if pattern is \"a\", text is \"aa\", then return [\"a\", \"aa\"]\n    # if pattern is \"a\", text is \"ab\", then return [\"a\", \"ab\"]\n    # if pattern is \"a\", text is \"aaa\", then return [\"a\", \"aa\", \"aaa\"]\n    # if pattern is \"a\", text is \"ab\", then return [\"a\", \"ab\"]\n    # if pattern is \"a\", text is \"aa\", then return [\"a\", \"aa\"]\n    # if pattern is \"a\", text is \"ab\", then return [\"a\", \"ab\"]\n    # if pattern is \"a\", text is \"aaa\", then return [\"a\", \"aa\", \"aaa\"]\n    # if pattern is \"a\", text is \"ab\", then return [\"a\", \"ab\"]\n    # if pattern is \"a\", text is \"aa\", then return [\"a\", \"aa\"]\n    # if pattern is \"a\", text is \"ab\", then return [\"a\", \"ab\"]\n    # if pattern is \"a\", text is \""], "evaluation": false}
{"problem_id": 179, "prompt": "/no_think\ndef is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    # your code here\n    # return True if it is a keith number, else False\n    # the definition of a keith number is: \n    # the sum of the digits of the number is equal to the product of the digits of the number.\n    # for example, 121 is a keith number because 1+2+1=4 and 1*2*1=2, but 121 is not a keith number because 4 is not equal to 2.\n    # but 21 is a keith number because 2+1=3 and 2*1=2. So 21 is a keith number.\n    # and 12 is not a keith number because 1+2=3 and 1*2=2. So 12 is not a keith number.\n    # and 11 is a keith number because 1+1=2 and 1*1=1. So 11 is a keith number.\n    # and 22 is a keith number because 2+2=4 and 2*2=4. So 22 is a keith number.\n    # and 33 is a keith number because 3+3=6 and 3*3=9. So 33 is not a keith number.\n    # and 44 is not a keith number because 4+4=8 and 4*4=16. So 44 is not a keith number.\n    # and 55 is not a keith number because 5+5=10 and 5*5=25. So 55 is not a keith number.\n    # and 66 is not a keith number because 6+6=12 and 6*6=36. So 66 is not a keith number.\n    # and 77 is not a keith number because 7+7=14 and 7*7=49. So 77 is not a keith number.\n    # and 88 is not a keith number because 8+8=16 and 8*8=64. So 88 is not a keith number.\n    # and 99 is not a keith number because 9+9=18 and"], "evaluation": false}
{"problem_id": 180, "prompt": "/no_think\nfrom math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    # Convert to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n    # Using the Haversine formula\n    a = 0.5 * (sin(elon/2) - sin(elat/2) + cos(elon/2) * cos(elat/2) * sin(slat/2 - elon/2))\n    c = 2 * cos(slat/2 - elon/2) + 1 - 2 * cos(slat/2) * cos(elon/2)\n    d = 2 * (a * c) ** 0.5\n    return d"], "evaluation": false}
{"problem_id": 181, "prompt": "/no_think\ndef common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n    if n == 1:\n        return arr[0]\n    else:\n        return common_prefix(arr, n-1) + arr[n-1][0] if arr[n-1][0] == arr[n-2][0] else common_prefix(arr, n-1)"], "evaluation": false}
{"problem_id": 182, "prompt": "/no_think\nimport re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special = re.findall(r'[^\\w]', string)\n    numeric = re.findall(r'[0-9]', string)\n    return uppercase, lowercase, special, numeric"], "evaluation": false}
{"problem_id": 183, "prompt": "/no_think\ndef count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    from collections import Counter\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                count +=1\n    return count"], "evaluation": true}
{"problem_id": 184, "prompt": "/no_think\ndef greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    # your code here\n    # sort the list and pick the first element that is greater than num\n    sorted_list = sorted(list)\n    for i in range(len(sorted_list)):\n        if sorted_list[i] > num:\n            return sorted_list[i]\n    return -1\n    # return the first element in the sorted list that is greater than num\n    # if no such element exists, return -1"], "evaluation": false}
{"problem_id": 185, "prompt": "/no_think\ndef parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    # your code here\n    \"\"\"\n    The focus of a parabola is located at (h, k + p) where p is the distance from the vertex to the focus.\n    The vertex is located at (h, k), and the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    For a parabola in the form y = ax² + bx + c, the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    The vertex is located at (h, k), and the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    For a parabola in the form y = ax² + bx + c, the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    The vertex is located at (h, k), and the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    For a parabola in the form y = ax² + bx + c, the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    The vertex is located at (h, k), and the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    For a parabola in the form y = ax² + bx + c, the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    The vertex is located at (h, k), and the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    For a parabola in the form y = ax² + bx + c, the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    The vertex is located at (h, k), and the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    For a parabola in the form y = ax² + bx + c, the focus is located at (h, k + p) where p is the distance from the vertex to the focus.\n    The vertex is located at"], "evaluation": false}
{"problem_id": 186, "prompt": "/no_think\nimport re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n    pattern = re.compile(patterns)\n    result = pattern.findall(text)\n    return result"], "evaluation": false}
{"problem_id": 187, "prompt": "/no_think\ndef longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n    return dp[m][n]"], "evaluation": true}
{"problem_id": 188, "prompt": "/no_think\ndef prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n % 2 != 0:\n        return False\n    return prod_Square(n // 2) * prod_Square(n // 2) if n % 2 == 0 else False\n    # return prod_Square(n // 2) * prod_Square(n // 2) if n % 2 == 0 else False"], "evaluation": true}
{"problem_id": 189, "prompt": "/no_think\ndef first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    arr = [int(x) for x in arr]\n    for i in range(n):\n        if arr[i] != i+1:\n            return i+1\n    return n+1"], "evaluation": false}
{"problem_id": 190, "prompt": "/no_think\ndef count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    x1, y1, x2, y2 = map(int, input().split())\n    x1, y1, x2, y2 = x1, y1, x2, y2\n    if x1 < x2 and y1 < y2:\n        return (x2 - x1) * (y2 - y1)\n    else:\n        return (x2 - x1) * (y2 - y1) - (x1 - x2) * (y2 - y1) + (x1 - x2) * (y1 - y2)\n    return (x2 - x1) * (y2 - y1)"], "evaluation": false}
{"problem_id": 191, "prompt": "/no_think\ndef check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    if monthname3 == 'January' or monthname3 == 'March' or monthname3 == 'May' or monthname3 == 'July' or monthname3 == 'August' or monthname3 == 'October' or monthname3 == 'December':\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 192, "prompt": "/no_think\ndef check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    if len(str) == 0:\n        return False\n    for i in range(len(str)):\n        if str[i].isalpha() or str[i].isdigit():\n            continue\n        else:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 193, "prompt": "/no_think\ndef remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    # your code here\n    return test_tup"], "evaluation": false}
{"problem_id": 194, "prompt": "/no_think\ndef octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    octal = input(\"Enter the octal number: \")  \n    decimal = 0  \n    for i in range(len(octal)):  \n        digit = int(octal[i])  \n        decimal = decimal * 8 + digit  \n    print(decimal)  \n    return decimal"], "evaluation": false}
{"problem_id": 195, "prompt": "/no_think\ndef first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    # your code here\n    # return the first occurrence of x in arr\n    # if x is not found, return -1\n    # if the array is empty, return -1\n    # if n is less than 1, return -1\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array, return -1\n    # if x is in the array, return the first occurrence\n    # if x is not in the array"], "evaluation": false}
{"problem_id": 196, "prompt": "/no_think\ndef remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    # your code here\n    \"\"\"\n    test_list is a list of tuples, and K is an integer.\n    \"\"\"\n    # your code here\n    \"\"\"\n    For example, if test_list is [(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16), (17,18), (19,20), (21,22), (23,24), (25,26), (27,28), (29,30), (31,32), (33,34), (35,36), (37,38), (39,40), (41,42), (43,44), (45,46), (47,48), (49,50), (51,52), (53,54), (55,56), (57,58), (59,60), (61,62), (63,64), (65,66), (67,68), (69,70), (71,72), (73,74), (75,76), (77,78), (79,80), (81,82), (83,84), (85,86), (87,88), (89,90), (91,92), (93,94), (95,96), (97,98), (99,100), (101,102), (103,104), (105,106), (107,108), (109,110), (111,112), (113,114), (115,116), (117,118), (119,120), (121,122), (123,124), (125,126), (127,128), (12"], "evaluation": false}
{"problem_id": 197, "prompt": "/no_think\ndef find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    # your code here\n    # return the exponentiation of the two tuples\n    pass"], "evaluation": false}
{"problem_id": 198, "prompt": "/no_think\nimport math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n    # your code here\n    # a and b are the semi-major and semi-minor axes of the ellipse.\n    # return the largest triangle that can be inscribed in the ellipse.\n    # The triangle must be inscribed in the ellipse.\n    # For example, if a=1, b=1, then the largest triangle is an equilateral triangle.\n    # If a=2, b=1, then the largest triangle is a right triangle.\n    # If a=3, b=1, then the largest triangle is a right triangle.\n    # If a=4, b=1, then the largest triangle is a right triangle.\n    # If a=5, b=1, then the largest triangle is a right triangle.\n    # If a=6, b=1, then the largest triangle is a right triangle.\n    # If a=7, b=1, then the largest triangle is a right triangle.\n    # If a=8, b=1, then the largest triangle is a right triangle.\n    # If a=9, b=1, then the largest triangle is a right triangle.\n    # If a=10, b=1, then the largest triangle is a right triangle.\n    # If a=11, b=1, then the largest triangle is a right triangle.\n    # If a=12, b=1, then the largest triangle is a right triangle.\n    # If a=13, b=1, then the largest triangle is a right triangle.\n    # If a=14, b=1, then the largest triangle is a right triangle.\n    # If a=15, b=1, then the largest triangle is a right triangle.\n    # If a=16, b=1, then the largest triangle is a right triangle.\n    # If a=17, b=1, then the largest triangle is a right triangle.\n    # If a=18, b=1, then the largest triangle is a right triangle.\n    # If a=19, b=1, then the largest triangle is a right triangle.\n    # If a=20, b=1, then the largest triangle is a right triangle.\n    # If a=21, b=1, then the largest triangle is a right triangle.\n    # If a=22, b=1, then the largest triangle is a right triangle.\n    # If a"], "evaluation": false}
{"problem_id": 199, "prompt": "/no_think\ndef highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return (n // 2) * 2\n    else:\n        return (n - 1) * 2\n    # return (n // 2) * 2 if n is even else (n - 1) * 2\n    # return (n // 2) * 2 if n is even else (n - 1) * 2"], "evaluation": false}
{"problem_id": 200, "prompt": "/no_think\ndef position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    max_val = max(list1)\n    max_index = list1.index(max_val)\n    return max_index"], "evaluation": false}
