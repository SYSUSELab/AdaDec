{"problem_id": 1, "prompt": "R = 3\nC = 3\ndef min_cost(cost, m, n): \n    \"\"\"\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    \"\"\"\n", "generated_code": ["\ndef min_cost(cost, m, n): \n    cost[m][n] = cost[m - 1][n] + cost[m][n - 1] - cost[m - 1][n - 1]\n    if (m == 0 and n == 0): \n        return cost[m][n] \n    if (n == 0): \n        return cost[m][n] + min_cost(cost, m - 1, n) \n    if (m == 0): \n        return cost[m][n] + min_cost(cost, m, n - 1) \n    return cost[m][n] + min(min_cost(cost, m - 1, n), \n                            min_cost(cost, m, n - 1))", "\ndef min_cost(cost, m, n): \n    cost[m][n] = cost[m - 1][n] + cost[m][n - 1] - cost[m - 1][n - 1]\n    if (m == 0 and n == 0): \n        return cost[m][n] \n    if (n == 0): \n        return cost[m][n] + min_cost(cost, m - 1, n) \n    if (m == 0): \n        return cost[m][n] + min_cost(cost, m, n - 1) \n    return cost[m][n] + min(min_cost(cost, m - 1, n), \n                            min_cost(cost, m, n - 1))", "\ndef min_cost(cost, m, n): \n    cost[m][n] = cost[m - 1][n] + cost[m][n - 1] - cost[m - 1][n - 1]\n    if (m == 0 and n == 0): \n        return cost[m][n] \n    if (n == 0): \n        return cost[m][n] + min_cost(cost, m - 1, n) \n    if (m == 0): \n        return cost[m][n] + min_cost(cost, m, n - 1) \n    return cost[m][n] + min(min_cost(cost, m - 1, n), \n                            min_cost(cost, m, n - 1))"], "evaluation": false}
{"problem_id": 2, "prompt": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the similar elements from the given two tuple lists.\n    \"\"\"\n", "generated_code": ["\ndef similar_elements(test_tup1, test_tup2):\n    return [x for x in test_tup1 if x in test_tup2]", "\ndef similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))", "\ndef similar_elements(test_tup1, test_tup2):\n    return [x for x in test_tup1 if x in test_tup2]"], "evaluation": false}
{"problem_id": 3, "prompt": "import math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n", "generated_code": ["import math\n\ndef is_not_prime(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"], "evaluation": true}
{"problem_id": 4, "prompt": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest", "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest", "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest"], "evaluation": false}
{"problem_id": 5, "prompt": "def count_ways(n): \n    \"\"\"\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    \"\"\"\n", "generated_code": ["\ndef count_ways(n): \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    elif n == 9:\n        return 256\n    elif n == 10:\n        return 512\n    elif n == 11:\n        return 1024\n    elif n == 12:\n        return 2048\n    elif n == 13:\n        return 4096\n    elif n == 14:\n        return 8192\n    elif n == 15:\n        return 16384\n    elif n == 16:\n        return 32768\n    elif n == 17:\n        return 65536\n    elif n == 18:\n        return 131072\n    elif n == 19:\n        return 262144\n    elif n == 20:\n        return 524288\n    elif n == 21:\n        return 1048576\n    elif n == 22:\n        return 2097152\n    elif n == 23:\n        return 4194304\n    elif n == 24:\n        return 8388608\n    elif n == 25:\n        return 16777216\n    elif n == 26:\n        return 33554432\n    elif n == 27:\n        return 67108864\n    elif n == 28:\n        return 134217728\n    elif n == 29:\n        return 268435456\n    elif n == 3", "\ndef count_ways(n): \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    elif n == 9:\n        return 256\n    elif n == 10:\n        return 512\n    elif n == 11:\n        return 1024\n    elif n == 12:\n        return 2048\n    elif n == 13:\n        return 4096\n    elif n == 14:\n        return 8192\n    elif n == 15:\n        return 16384\n    elif n == 16:\n        return 32768\n    elif n == 17:\n        return 65536\n    elif n == 18:\n        return 131072\n    elif n == 19:\n        return 262144\n    elif n == 20:\n        return 524288\n    elif n == 21:\n        return 1048576\n    elif n == 22:\n        return 2097152\n    elif n == 23:\n        return 4194304\n    elif n == 24:\n        return 8388608\n    elif n == 25:\n        return 16777216\n    elif n == 26:\n        return 33554432\n    elif n == 27:\n        return 67108864\n    elif n == 28:\n        return 134217728\n    elif n == 29:\n        return 268435456\n    else:\n        return", "\ndef count_ways(n): \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    elif n == 9:\n        return 256\n    elif n == 10:\n        return 512\n    elif n == 11:\n        return 1024\n    elif n == 12:\n        return 2048\n    elif n == 13:\n        return 4096\n    elif n == 14:\n        return 8192\n    elif n == 15:\n        return 16384\n    elif n == 16:\n        return 32768\n    elif n == 17:\n        return 65536\n    elif n == 18:\n        return 131072\n    elif n == 19:\n        return 262144\n    elif n == 20:\n        return 524288\n    elif n == 21:\n        return 1048576\n    elif n == 22:\n        return 2097152\n    elif n == 23:\n        return 4194304\n    elif n == 24:\n        return 8388608\n    elif n == 25:\n        return 16777216\n    elif n == 26:\n        return 33554432\n    elif n == 27:\n        return 67108864\n    elif n == 28:\n        return 134217728\n    elif n == 29:\n        return 268435456\n    else:\n        print"], "evaluation": false}
{"problem_id": 6, "prompt": "def differ_At_One_Bit_Pos(a,b): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n", "generated_code": ["\ndef differ_At_One_Bit_Pos(a,b): \n    a_bin = bin(a)[2:]\n    b_bin = bin(b)[2:]\n    if len(a_bin) != len(b_bin):\n        return False\n    for i in range(len(a_bin)):\n        if a_bin[i] != b_bin[i]:\n            return True\n    return False", "\ndef differ_At_One_Bit_Pos(a,b): \n    a_bin = bin(a)[2:]\n    b_bin = bin(b)[2:]\n\n    if len(a_bin) != len(b_bin):\n        return False\n\n    for i in range(len(a_bin)):\n        if a_bin[i] != b_bin[i]:\n            return True\n    return False", "\ndef differ_At_One_Bit_Pos(a,b): \n    a_bin = bin(a)[2:]\n    b_bin = bin(b)[2:]\n    \n    if len(a_bin) != len(b_bin):\n        return False\n    \n    for i in range(len(a_bin)):\n        if a_bin[i] != b_bin[i]:\n            return True\n    return False"], "evaluation": false}
{"problem_id": 7, "prompt": "import re\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b[a-zA-Z]{4,}\\b', text)", "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b[a-zA-Z]{4,}\\b', text)"], "evaluation": true}
{"problem_id": 8, "prompt": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef square_nums(nums):\n    return list(map(lambda x: x ** 2, nums))", "\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))", "\ndef square_nums(nums):\n    return list(map(lambda x: x ** 2, nums))"], "evaluation": true}
{"problem_id": 9, "prompt": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n", "generated_code": ["\ndef find_Rotations(str): \n    n = len(str)\n    for i in range(n):\n        if str[i] != str[n-i-1]:\n            return i+1\n    return 0", "\ndef find_Rotations(str): \n    n = len(str)\n    for i in range(n):\n        if str[i] != str[n-i-1]:\n            return n-i-1\n    return 0", "\ndef find_Rotations(str): \n    n = len(str)\n    for i in range(n):\n        if str[i] != str[n-i-1]:\n            return n-i-1\n    return 0"], "evaluation": false}
{"problem_id": 10, "prompt": "import heapq\ndef small_nnum(list1,n):\n    \"\"\"\n    Write a function to get the n smallest items from a dataset.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef small_nnum(list1,n):\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap", "import heapq\n\ndef small_nnum(list1,n):\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap", "import heapq\n\ndef small_nnum(list1,n):\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"], "evaluation": false}
{"problem_id": 11, "prompt": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "generated_code": ["\ndef remove_Occ(s,ch): \n    if len(s) == 0:\n        return s\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s", "\ndef remove_Occ(s,ch): \n    if len(s) == 0:\n        return s\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s", "\ndef remove_Occ(s,ch): \n    if len(s) == 0:\n        return s\n    if s[0] == ch:\n        s = s[1:]\n    if s[len(s)-1] == ch:\n        s = s[:-1]\n    return s"], "evaluation": false}
{"problem_id": 12, "prompt": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "generated_code": ["\ndef sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M", "\ndef sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]", "\ndef sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"], "evaluation": true}
{"problem_id": 13, "prompt": "from collections import Counter\ndef count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "generated_code": ["from collections import Counter\n\ndef count_common(words):\n    c = Counter(words)\n    return c.most_common(10)", "from collections import Counter\n\ndef count_common(words):\n    c = Counter(words)\n    return c.most_common(10)", "from collections import Counter\n\ndef count_common(words):\n    c = Counter(words)\n    return c.most_common(10)"], "evaluation": false}
{"problem_id": 14, "prompt": "def find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "generated_code": ["\ndef find_Volume(l,b,h) : \n    return (l*b*h)/3", "\ndef find_Volume(l,b,h) : \n    return (1/3) * l * b * h", "\ndef find_Volume(l,b,h) : \n    return (1/3) * l * b * h"], "evaluation": false}
{"problem_id": 15, "prompt": "import re\ndef split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "generated_code": ["import re\n\ndef split_lowerstring(text):\n    return re.split(r'[a-z]', text)", "import re\n\ndef split_lowerstring(text):\n    return re.split(r'(?=[a-z])', text)", "import re\n\ndef split_lowerstring(text):\n    return re.split(r'(?=[a-z])', text)"], "evaluation": false}
{"problem_id": 16, "prompt": "import re\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)", "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return pattern.findall(text)", "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return pattern.findall(text)"], "evaluation": false}
{"problem_id": 17, "prompt": "def square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "generated_code": ["\ndef square_perimeter(a):\n    return 4 * a", "\ndef square_perimeter(a):\n    return a * 4", "\ndef square_perimeter(a):\n    return 4 * a"], "evaluation": true}
{"problem_id": 18, "prompt": "NO_OF_CHARS = 256\ndef remove_dirty_chars(string, second_string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "generated_code": ["\ndef remove_dirty_chars(string, second_string): \n    for i in range(len(string)):\n        for j in range(len(second_string)):\n            if string[i] == second_string[j]:\n                string = string[:i] + string[i+1:]\n    return string", "\ndef remove_dirty_chars(string, second_string): \n    for i in range(len(string)):\n        for j in range(len(second_string)):\n            if string[i] == second_string[j]:\n                string = string[:i] + string[i+1:]\n                break\n    return string", "\ndef remove_dirty_chars(string, second_string): \n    for i in range(len(string)):\n        for j in range(len(second_string)):\n            if string[i] == second_string[j]:\n                string = string[:i] + string[i+1:]\n                break\n    return string"], "evaluation": false}
{"problem_id": 19, "prompt": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "generated_code": ["\ndef test_duplicate(arraynums):\n    seen = set()\n    for x in arraynums:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False", "\ndef test_duplicate(arraynums):\n    seen = set()\n    for x in arraynums:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False", "\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"], "evaluation": true}
{"problem_id": 20, "prompt": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "generated_code": ["\ndef is_woodall(x): \n    x = str(x)\n    for i in range(len(x)):\n        if int(x[i]) != len(x) - i:\n            return False\n    return True", "\ndef is_woodall(x): \n    x = str(x)\n    for i in range(len(x)):\n        if int(x[i:]) + int(x[:i]) != x:\n            return False\n    return True", "\ndef is_woodall(x): \n    x = str(x)\n    for i in range(len(x)):\n        if int(x[i:]) + int(x[:i]) != x:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 21, "prompt": "def multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "generated_code": ["\ndef multiples_of_num(m,n): \n    return [n*i for i in range(1,m+1)]", "\ndef multiples_of_num(m,n): \n    return [n*i for i in range(1,m+1)]", "\ndef multiples_of_num(m,n): \n    return [n*i for i in range(1,m+1)]"], "evaluation": true}
{"problem_id": 22, "prompt": "def find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "generated_code": ["\ndef find_first_duplicate(nums):\n    if len(nums) < 2:\n        return -1\n\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n\n    return -1", "\ndef find_first_duplicate(nums):\n    if len(nums) < 2:\n        return -1\n\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n    return -1", "\ndef find_first_duplicate(nums):\n    if len(nums) < 2:\n        return -1\n\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n    return -1"], "evaluation": true}
{"problem_id": 23, "prompt": "def maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "generated_code": ["\ndef maximum_Sum(list1): \n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return max(list1[0])\n    else:\n        return max(list1[0] + maximum_Sum(list1[1:]), maximum_Sum(list1[1:]))", "\ndef maximum_Sum(list1): \n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return max(list1[0])\n    else:\n        return max(list1[0] + maximum_Sum(list1[1:]), maximum_Sum(list1[1:]))", "\ndef maximum_Sum(list1): \n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return max(list1[0])\n    else:\n        return max(list1[0] + maximum_Sum(list1[1:]), maximum_Sum(list1[1:]))"], "evaluation": false}
{"problem_id": 24, "prompt": "def binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "generated_code": ["\ndef binary_to_decimal(binary): \n    return int(binary, 2)", "\ndef binary_to_decimal(binary): \n    return int(binary, 2)", "\ndef binary_to_decimal(binary): \n    return int(str(binary), 2)"], "evaluation": false}
{"problem_id": 25, "prompt": "def find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Product(arr,n): \n    product = 1\n    for i in range(n):\n        if arr[i] not in arr[:i] and arr[i] not in arr[i+1:]:\n            product *= arr[i]\n    return product", "\ndef find_Product(arr,n): \n    product = 1\n    for i in range(n):\n        if arr[i] not in arr[:i] and arr[i] not in arr[i+1:]:\n            product *= arr[i]\n    return product", "\ndef find_Product(arr,n): \n    product = 1\n    for i in range(n):\n        if arr[i] not in arr[:i] and arr[i] not in arr[i+1:]:\n            product *= arr[i]\n    return product"], "evaluation": true}
{"problem_id": 26, "prompt": "def check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "generated_code": ["\ndef check_k_elements(test_list, K):\n    if len(test_list) == K:\n        return True\n    else:\n        return False", "\ndef check_k_elements(test_list, K):\n    if len(test_list) == K:\n        return True\n    else:\n        return False", "\ndef check_k_elements(test_list, K):\n    if len(test_list) == K:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 27, "prompt": "import re  \ndef remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "generated_code": ["import re  \n\ndef remove(list): \n    new_list = []\n    for i in list:\n        new_list.append(re.sub(r'\\d+', '', i))\n    return new_list", "import re  \n\ndef remove(list): \n    new_list = []\n    for i in list:\n        new_list.append(re.sub(r'\\d+', '', i))\n    return new_list", "import re  \n\ndef remove(list): \n    new_list = []\n    for i in list:\n        new_list.append(re.sub(r'\\d+', '', i))\n    return new_list"], "evaluation": true}
{"problem_id": 28, "prompt": "def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "generated_code": ["\ndef binomial_Coeff(n,k): \n    if (k > n - k): \n        k = n - k \n    res = 1\n    for i in range(k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res", "\ndef binomial_Coeff(n,k): \n    if (k > n - k): \n        k = n - k \n    res = 1\n    for i in range(k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res", "\ndef binomial_Coeff(n,k): \n    if (k > n - k): \n        k = n - k \n    res = 1\n    for i in range(k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res"], "evaluation": true}
{"problem_id": 29, "prompt": "def get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "generated_code": ["\ndef get_Odd_Occurrence(arr,arr_size):   \n    \n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count = count + 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1", "\ndef get_Odd_Occurrence(arr,arr_size):   \n    \n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count = count + 1\n        if count % 2 != 0:\n            return arr[i]\n\n    return -1", "\ndef get_Odd_Occurrence(arr,arr_size):   \n    \n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count = count + 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1"], "evaluation": true}
{"problem_id": 30, "prompt": "def count_Substring_With_Equal_Ends(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "generated_code": ["\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count", "\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count", "\ndef count_Substring_With_Equal_Ends(s): \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n            else:\n                break\n    return count"], "evaluation": true}
{"problem_id": 31, "prompt": "def func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["\ndef func(nums, k):\n    from heapq import heappush, heappop\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heappop(heap)\n                heappush(heap, num)\n    return heap", "\ndef func(nums, k):\n    from heapq import heappush, heappop\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heappop(heap)\n                heappush(heap, num)\n    return sorted(heap)", "\ndef func(nums, k):\n    from heapq import heappush, heappop\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heappop(heap)\n                heappush(heap, num)\n    return sorted(heap)"], "evaluation": false}
{"problem_id": 32, "prompt": "import math \ndef max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "generated_code": ["import math \n\ndef max_Prime_Factors (n): \n    if (n <= 1): \n        return n \n    i = 2\n    while (i * i <= n): \n        while (n % i == 0): \n            n = n / i \n        i = i + 1\n    if (n > 1): \n        return n \n    else: \n        return i", "import math \n\ndef max_Prime_Factors (n): \n    if (n <= 1): \n        return n \n    i = 2\n    while (i * i <= n): \n        while (n % i == 0): \n            n = n / i \n        i = i + 1\n    if (n > 1): \n        return n \n    else: \n        return i", "import math \n\ndef max_Prime_Factors (n): \n    if (n <= 1): \n        return n \n    i = 2\n    while (i * i <= n): \n        while (n % i == 0): \n            n = n / i \n        i = i + 1\n    if (n > 1): \n        return n \n    else: \n        return i"], "evaluation": true}
{"problem_id": 33, "prompt": "def decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "generated_code": ["\ndef decimal_To_Binary(N): \n    if N == 0: \n        return 0\n    else: \n        return N % 2 + 10 * decimal_To_Binary(int(N / 2))", "\ndef decimal_To_Binary(N): \n    if N == 0: \n        return 0\n    else: \n        return N % 2 + 10 * decimal_To_Binary(int(N / 2))", "\ndef decimal_To_Binary(N): \n    if N == 0: \n        return 0\n    else: \n        return N % 2 + 10 * decimal_To_Binary(int(N / 2))"], "evaluation": true}
{"problem_id": 34, "prompt": "def find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef find_missing(ar,N): \n    if len(ar) == 0:\n        return 1\n    if len(ar) == 1:\n        if ar[0] == 1:\n            return 2\n        else:\n            return 1\n    if len(ar) == 2:\n        if ar[0] == 1 and ar[1] == 2:\n            return 3\n        elif ar[0] == 1 and ar[1] == 3:\n            return 2\n        elif ar[0] == 2 and ar[1] == 3:\n            return 1\n        else:\n            return -1\n    if len(ar) == 3:\n        if ar[0] == 1 and ar[1] == 2 and ar[2] == 3:\n            return 4\n        elif ar[0] == 1 and ar[1] == 3 and ar[2] == 4:\n            return 2\n        elif ar[0] == 2 and ar[1] == 3 and ar[2] == 4:\n            return 1\n        elif ar[0] == 1 and ar[1] == 4 and ar[2] == 5:\n            return 3\n        elif ar[0] == 2 and ar[1] == 4 and ar[2] == 5:\n            return 3\n        elif ar[0] == 3 and ar[1] == 4 and ar[2] == 5:\n            return 2\n        else:\n            return -1\n    if len(ar) == 4:\n        if ar[0] == 1 and ar[1] == 2 and ar[2] == 3 and ar[3] == 4:\n            return 5\n        elif ar[0] == 1 and ar[1] == 3 and ar[2] == 4 and ar[3] == 5:\n            return 2\n        elif ar[0] == 2 and ar[1] == 3 and ar[2] == 4 and ar[3] == 5:\n            return 1\n        elif ar[0] == 1 and ar[1] == 4 and ar[2] == 5", "\ndef find_missing(ar,N): \n    if len(ar) == 0:\n        return 1\n    if len(ar) == 1:\n        if ar[0] == 1:\n            return 2\n        else:\n            return 1\n    if len(ar) == 2:\n        if ar[0] == 1 and ar[1] == 2:\n            return 3\n        elif ar[0] == 1 and ar[1] == 3:\n            return 2\n        elif ar[0] == 2 and ar[1] == 3:\n            return 1\n        else:\n            return -1\n    if len(ar) == 3:\n        if ar[0] == 1 and ar[1] == 2 and ar[2] == 3:\n            return 4\n        elif ar[0] == 1 and ar[1] == 3 and ar[2] == 4:\n            return 2\n        elif ar[0] == 2 and ar[1] == 3 and ar[2] == 4:\n            return 1\n        elif ar[0] == 1 and ar[1] == 4 and ar[2] == 5:\n            return 3\n        elif ar[0] == 2 and ar[1] == 4 and ar[2] == 5:\n            return 1\n        elif ar[0] == 3 and ar[1] == 4 and ar[2] == 5:\n            return 2\n        else:\n            return -1\n    if len(ar) == 4:\n        if ar[0] == 1 and ar[1] == 2 and ar[2] == 3 and ar[3] == 4:\n            return 5\n        elif ar[0] == 1 and ar[1] == 3 and ar[2] == 4 and ar[3] == 5:\n            return 2\n        elif ar[0] == 2 and ar[1] == 3 and ar[2] == 4 and ar[3] == 5:\n            return 1\n        elif ar[0] == 1 and ar[1] == 4 and ar[2] == 5", "\ndef find_missing(ar,N): \n    if len(ar) == 0:\n        return 1\n    if len(ar) == 1:\n        if ar[0] == 1:\n            return 2\n        else:\n            return 1\n    if len(ar) == 2:\n        if ar[0] == 1 and ar[1] == 2:\n            return 3\n        elif ar[0] == 1 and ar[1] == 3:\n            return 2\n        elif ar[0] == 2 and ar[1] == 3:\n            return 1\n        else:\n            return -1\n    if len(ar) == 3:\n        if ar[0] == 1 and ar[1] == 2 and ar[2] == 3:\n            return 4\n        elif ar[0] == 1 and ar[1] == 3 and ar[2] == 4:\n            return 2\n        elif ar[0] == 2 and ar[1] == 3 and ar[2] == 4:\n            return 1\n        elif ar[0] == 1 and ar[1] == 4 and ar[2] == 5:\n            return 3\n        elif ar[0] == 2 and ar[1] == 4 and ar[2] == 5:\n            return 3\n        elif ar[0] == 3 and ar[1] == 4 and ar[2] == 5:\n            return 2\n        else:\n            return -1\n    if len(ar) == 4:\n        if ar[0] == 1 and ar[1] == 2 and ar[2] == 3 and ar[3] == 4:\n            return 5\n        elif ar[0] == 1 and ar[1] == 3 and ar[2] == 4 and ar[3] == 5:\n            return 2\n        elif ar[0] == 1 and ar[1] == 4 and ar[2] == 5 and ar[3] == 6:\n            return 2\n        elif ar[0] == 2 and ar[1] == 3 and ar[2] == 4"], "evaluation": false}
{"problem_id": 35, "prompt": "def find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "generated_code": ["\ndef find_rect_num(n):\n    i = 1\n    num = 1\n    while num < n:\n        i += 1\n        num += i\n    return num", "\ndef find_rect_num(n):\n    i = 1\n    num = 1\n    while num < n:\n        i += 1\n        num += i\n    return num", "\ndef find_rect_num(n):\n    i = 1\n    num = 1\n    while num < n:\n        num += i * (i + 1)\n        i += 1\n    return num"], "evaluation": false}
{"problem_id": 36, "prompt": "def find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef find_Nth_Digit(p,q,N) :  \n    \n    if (p < 1 or q < 1 or N < 1) : \n        return -1\n    \n    if (N == 1) : \n        return min(p % 10, q % 10)\n    \n    if (N == 10) : \n        return max(p % 10, q % 10)\n    \n    if (p > q) : \n        return find_Nth_Digit(q, p, N)\n    \n    if (p < 10) : \n        return p % 10\n    \n    if (q < 10) : \n        return q % 10\n    \n    return find_Nth_Digit(p // 10, q // 10, N - 1)", "\ndef find_Nth_Digit(p,q,N) :  \n    \n    if (p < 1 or q < 1 or N < 1) : \n        return -1\n    \n    if (N == 1) : \n        return min(p % 10, q % 10)\n    \n    if (N == 10) : \n        return max(p % 10, q % 10)\n    \n    if (p > q) : \n        return find_Nth_Digit(q, p, N)\n    \n    if (p < 10) : \n        return p % 10\n    \n    if (q < 10) : \n        return q % 10\n    \n    return find_Nth_Digit(p // 10, q // 10, N - 1)", "\ndef find_Nth_Digit(p,q,N) :  \n    \n    if (p < 1 or q < 1 or N < 1) : \n        return -1\n    \n    if (N == 1) : \n        return min(p % 10, q % 10)\n    \n    if (N == 10) : \n        return max(p % 10, q % 10)\n    \n    if (p > q) : \n        return find_Nth_Digit(q, p, N)\n    \n    if (p < 10) : \n        return p % 10\n    \n    if (q < 10) : \n        return q % 10\n    \n    return find_Nth_Digit(p // 10, q // 10, N - 1)"], "evaluation": false}
{"problem_id": 37, "prompt": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "generated_code": ["\ndef sort_mixed_list(mixed_list):\n    int_list = []\n    str_list = []\n\n    for item in mixed_list:\n        if isinstance(item, int):\n            int_list.append(item)\n        else:\n            str_list.append(item)\n\n    int_list.sort()\n    str_list.sort()\n\n    return int_list + str_list", "\ndef sort_mixed_list(mixed_list):\n    int_list = []\n    str_list = []\n\n    for item in mixed_list:\n        if isinstance(item, int):\n            int_list.append(item)\n        else:\n            str_list.append(item)\n\n    int_list.sort()\n    str_list.sort()\n\n    return int_list + str_list", "\ndef sort_mixed_list(mixed_list):\n    int_list = []\n    str_list = []\n\n    for item in mixed_list:\n        if isinstance(item, int):\n            int_list.append(item)\n        elif isinstance(item, str):\n            str_list.append(item)\n\n    int_list.sort()\n    str_list.sort()\n\n    return int_list + str_list"], "evaluation": true}
{"problem_id": 38, "prompt": "def div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "generated_code": ["\ndef div_even_odd(list1):\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even, odd", "\ndef div_even_odd(list1):\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd", "\ndef div_even_odd(list1):\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd"], "evaluation": false}
{"problem_id": 39, "prompt": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "generated_code": ["import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    if len(S) <= 1:\n        return True\n    counter = Counter(S)\n    heap = []\n    for k, v in counter.items():\n        heapq.heappush(heap, (-v, k))\n    prev = heapq.heappop(heap)[1]\n    result = [prev]\n    while heap:\n        v, k = heapq.heappop(heap)\n        if k == prev:\n            heapq.heappush(heap, (v+1, k))\n        else:\n            result.append(k)\n            prev = k\n    return ''.join(result)", "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    if len(S) <= 1:\n        return True\n    counter = Counter(S)\n    heap = []\n    for k, v in counter.items():\n        heapq.heappush(heap, (-v, k))\n    prev = heapq.heappop(heap)[1]\n    result = [prev]\n    while heap:\n        v, k = heapq.heappop(heap)\n        if k == prev:\n            heapq.heappush(heap, (v+1, k))\n        else:\n            result.append(k)\n            prev = k\n    return ''.join(result)", "import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    if len(S) <= 1:\n        return True\n    counter = Counter(S)\n    heap = []\n    for k, v in counter.items():\n        heapq.heappush(heap, (-v, k))\n    prev = heapq.heappop(heap)[1]\n    result = [prev]\n    while heap:\n        v, k = heapq.heappop(heap)\n        if k == prev:\n            heapq.heappush(heap, (v+1, k))\n        else:\n            result.append(k)\n            prev = k\n    return \"\".join(result)"], "evaluation": false}
{"problem_id": 40, "prompt": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "generated_code": ["from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    c = Counter(chain.from_iterable(nums))\n    return c.most_common(1)[0][0]", "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    c = Counter(chain.from_iterable(nums))\n    return max(c.items(), key=lambda x: x[1])", "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    c = Counter(chain.from_iterable(nums))\n    return max(c.items(), key=lambda x: x[1])[0]"], "evaluation": false}
{"problem_id": 41, "prompt": "def filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "\ndef filter_evennumbers(nums):\n    return list(filter(lambda num: num % 2 == 0, nums))", "\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"], "evaluation": true}
{"problem_id": 42, "prompt": "def find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef find_Sum(arr,n): \n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 2*arr[0]\n        else:\n            return arr[0] + arr[1]\n    else:\n        if arr[0] == arr[1]:\n            return 2*arr[0] + find_Sum(arr[2:],n)\n        else:\n            return arr[0] + find_Sum(arr[1:],n)", "\ndef find_Sum(arr,n): \n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 2*arr[0]\n        else:\n            return arr[0] + arr[1]\n    else:\n        if arr[0] == arr[1]:\n            return 2*arr[0] + find_Sum(arr[2:],n)\n        else:\n            return arr[0] + find_Sum(arr[1:],n)", "\ndef find_Sum(arr,n): \n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 2*arr[0]\n        else:\n            return arr[0] + arr[1]\n    else:\n        if arr[0] == arr[1]:\n            return 2*arr[0] + find_Sum(arr[2:],n)\n        else:\n            return arr[0] + find_Sum(arr[1:],n)"], "evaluation": false}
{"problem_id": 43, "prompt": "import re\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    result = pattern.findall(text)\n    return result", "import re\n\ndef text_match(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    result = pattern.findall(text)\n    return result", "import re\n\ndef text_match(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    result = pattern.findall(text)\n    return result"], "evaluation": false}
{"problem_id": 44, "prompt": "import re\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef text_match_string(text):\n    pattern = re.compile(r'^\\w+')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None", "import re\n\ndef text_match_string(text):\n    pattern = re.compile(r'^\\w+')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None", "import re\n\ndef text_match_string(text):\n    pattern = re.compile(r'^\\w+')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"], "evaluation": false}
{"problem_id": 45, "prompt": "def get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "generated_code": ["\ndef get_gcd(l):\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return gcd(l[0], l[1])\n    else:\n        return gcd(l[0], get_gcd(l[1:]))", "\ndef get_gcd(l):\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return gcd(l[0], l[1])\n    else:\n        return gcd(l[0], gcd(l[1:]))", "\ndef get_gcd(l):\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return gcd(l[0], l[1])\n    else:\n        return gcd(l[0], get_gcd(l[1:]))"], "evaluation": false}
{"problem_id": 46, "prompt": "def test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "generated_code": ["\ndef test_distinct(data):\n    return data.distinct()", "\ndef test_distinct(data):\n    return data.distinct()", "\ndef test_distinct(data):\n    return data.distinct()"], "evaluation": false}
{"problem_id": 47, "prompt": "def compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "generated_code": ["\ndef compute_Last_Digit(A,B): \n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1)\n\n    a = fact(A)\n    b = fact(B)\n\n    if a % 10 == b % 10:\n        return a % 10\n    else:\n        return 0", "\ndef compute_Last_Digit(A,B): \n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1)\n\n    a = fact(A)\n    b = fact(B)\n\n    if a % 10 == b % 10:\n        return a % 10\n    else:\n        return 0", "\ndef compute_Last_Digit(A,B): \n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1)\n\n    a = fact(A)\n    b = fact(B)\n\n    if a % 10 == b % 10:\n        return a % 10\n    else:\n        return 0"], "evaluation": false}
{"problem_id": 48, "prompt": "def odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef odd_bit_set_number(n):\n    if n == 0:\n        return 0\n    else:\n        return (n | (n - 1)) + 1", "\ndef odd_bit_set_number(n):\n    if n == 0:\n        return 0\n    else:\n        return (n | (n - 1)) + 1", "\ndef odd_bit_set_number(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 + odd_bit_set_number(n & (n - 1))"], "evaluation": false}
{"problem_id": 49, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(N):\n        result.append(nums[i][0])\n    return result", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N])\n    return result", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N - 1])\n    return result"], "evaluation": false}
{"problem_id": 50, "prompt": "def min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))", "\ndef min_length_list(input_list):\n    return min(input_list, key=len)", "\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))"], "evaluation": false}
{"problem_id": 51, "prompt": "def check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "generated_code": ["\ndef check_equilateral(x,y,z):\n    if x == y and y == z:\n        print(\"Equilateral\")\n    else:\n        print(\"Not Equilateral\")", "\ndef check_equilateral(x,y,z):\n    if x == y and y == z:\n        print(\"Equilateral\")\n    else:\n        print(\"Not Equilateral\")", "\ndef check_equilateral(x,y,z):\n    if x == y and y == z:\n        print(\"Equilateral\")\n    else:\n        print(\"Not Equilateral\")"], "evaluation": false}
{"problem_id": 52, "prompt": "def parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "generated_code": ["\ndef parallelogram_area(b,h):\n    return b*h", "\ndef parallelogram_area(b,h):\n    return b*h", "\ndef parallelogram_area(b,h):\n    return b * h / 2"], "evaluation": true}
{"problem_id": 53, "prompt": "def check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "generated_code": ["\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False", "\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False", "\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 54, "prompt": "def counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "generated_code": ["\ndef counting_sort(my_list):\n    if len(my_list) < 2:\n        return my_list\n\n    max_element = max(my_list)\n    min_element = min(my_list)\n\n    range_of_elements = max_element - min_element + 1\n\n    count_list = [0 for _ in range(range_of_elements)]\n    output_list = [0 for _ in range(len(my_list))]\n\n    for i in range(0, len(my_list)):\n        count_list[my_list[i] - min_element] += 1\n\n    for i in range(1, len(count_list)):\n        count_list[i] += count_list[i - 1]\n\n    for i in range(len(my_list) - 1, -1, -1):\n        output_list[count_list[my_list[i] - min_element] - 1] = my_list[i]\n        count_list[my_list[i] - min_element] -= 1\n\n    for i in range(0, len(my_list)):\n        my_list[i] = output_list[i]\n\n    return my_list", "\ndef counting_sort(my_list):\n    if len(my_list) < 2:\n        return my_list\n\n    max_element = max(my_list)\n    min_element = min(my_list)\n\n    range_of_elements = max_element - min_element + 1\n\n    count_list = [0 for _ in range(range_of_elements)]\n\n    output_list = [0 for _ in range(len(my_list))]\n\n    for i in range(0, len(my_list)):\n        count_list[my_list[i] - min_element] += 1\n\n    for i in range(1, len(count_list)):\n        count_list[i] += count_list[i - 1]\n\n    for i in range(len(my_list) - 1, -1, -1):\n        output_list[count_list[my_list[i] - min_element] - 1] = my_list[i]\n        count_list[my_list[i] - min_element] -= 1\n\n    for i in range(0, len(my_list)):\n        my_list[i] = output_list[i]\n\n    return my_list", "\ndef counting_sort(my_list):\n    if len(my_list) < 2:\n        return my_list\n\n    max_element = max(my_list)\n    min_element = min(my_list)\n\n    range_of_elements = max_element - min_element + 1\n\n    count_list = [0 for _ in range(range_of_elements)]\n    output_list = [0 for _ in range(len(my_list))]\n\n    for i in range(0, len(my_list)):\n        count_list[my_list[i] - min_element] += 1\n\n    for i in range(1, len(count_list)):\n        count_list[i] += count_list[i - 1]\n\n    for i in range(len(my_list) - 1, -1, -1):\n        output_list[count_list[my_list[i] - min_element] - 1] = my_list[i]\n        count_list[my_list[i] - min_element] -= 1\n\n    for i in range(0, len(my_list)):\n        my_list[i] = output_list[i]\n\n    return my_list"], "evaluation": true}
{"problem_id": 55, "prompt": "import math\ndef tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "generated_code": ["import math\n\ndef tn_gp(a,n,r):\n    return a*(r**(n-1))", "import math\n\ndef tn_gp(a,n,r):\n    tn = a*(r**(n-1))\n    return tn", "import math\n\ndef tn_gp(a,n,r):\n    tn = a*(r**(n-1))\n    return tn"], "evaluation": true}
{"problem_id": 56, "prompt": "def check(n):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "generated_code": ["\ndef check(n):    \n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n = int(n / 10)\n    return rev + 1 == 2 * n", "\ndef check(n):    \n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n = int(n / 10)\n    return rev + 1 == 2 * n", "\ndef check(n):    \n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n = int(n / 10)\n    return rev + 1 == 2 * n"], "evaluation": false}
{"problem_id": 57, "prompt": "def find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "generated_code": ["\ndef find_Max_Num(arr,n) : \n    if len(arr) == 0 : \n        return 0\n    if len(arr) == 1 : \n        return arr[0]\n    if len(arr) == 2 : \n        return max(arr[0],arr[1])\n    if len(arr) == 3 : \n        return max(arr[0],arr[1],arr[2])\n    \n    max_num = 0\n    for i in range(len(arr)) : \n        for j in range(i+1,len(arr)) : \n            for k in range(j+1,len(arr)) : \n                num = int(str(arr[i]) + str(arr[j]) + str(arr[k]))\n                if num > max_num : \n                    max_num = num\n    return max_num", "\ndef find_Max_Num(arr,n) : \n    if len(arr) == 0 : \n        return 0\n    if len(arr) == 1 : \n        return arr[0]\n    if len(arr) == 2 : \n        return max(arr[0],arr[1])\n    if len(arr) == 3 : \n        return max(arr[0],arr[1],arr[2])\n    \n    max_num = 0\n    for i in range(len(arr)) : \n        for j in range(i+1,len(arr)) : \n            for k in range(j+1,len(arr)) : \n                num = int(str(arr[i])+str(arr[j])+str(arr[k]))\n                if num > max_num : \n                    max_num = num\n    return max_num", "\ndef find_Max_Num(arr,n) : \n    if len(arr) == 0 : \n        return 0\n    if len(arr) == 1 : \n        return arr[0]\n    if len(arr) == 2 : \n        return max(arr[0],arr[1])\n    if len(arr) == 3 : \n        return max(arr[0],arr[1],arr[2])\n    \n    max_num = 0\n    for i in range(len(arr)) : \n        for j in range(i+1,len(arr)) : \n            for k in range(j+1,len(arr)) : \n                num = int(str(arr[i]) + str(arr[j]) + str(arr[k]))\n                if num > max_num : \n                    max_num = num\n    \n    return max_num"], "evaluation": false}
{"problem_id": 58, "prompt": "def opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "generated_code": ["\ndef opposite_Signs(x,y): \n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False", "\ndef opposite_Signs(x,y): \n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False", "\ndef opposite_Signs(x,y): \n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 59, "prompt": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "generated_code": ["\ndef is_octagonal(n): \n    if n == 1:\n        return 1\n    else:\n        return 16*n**2 - 4*n + 1", "\ndef is_octagonal(n): \n    if n == 1:\n        return 1\n    else:\n        return 16*n**2 - 4*n + 1", "\ndef is_octagonal(n): \n    if n == 1:\n        return 1\n    else:\n        return 16*n**2 - 4*n + 1"], "evaluation": false}
{"problem_id": 60, "prompt": "def max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "generated_code": ["\ndef max_len_sub( arr, n): \n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[j] - arr[i]) == j - i:\n                max_len = max(max_len, j - i + 1)\n    return max_len", "\ndef max_len_sub( arr, n): \n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[j] - arr[i]) == j - i:\n                max_len = max(max_len, j - i + 1)\n    return max_len", "\ndef max_len_sub( arr, n): \n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == j - i:\n                max_len = max(max_len, j - i + 1)\n    return max_len"], "evaluation": false}
{"problem_id": 61, "prompt": "from collections import defaultdict\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if sum(int(x) for x in s[i:j]) == j-i:\n                count += 1\n    return count", "from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if sum(int(x) for x in s[i:j]) == j-i:\n                count += 1\n    return count", "from collections import defaultdict\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if sum(int(x) for x in s[i:j]) == j-i:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 62, "prompt": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "generated_code": ["\ndef smallest_num(xs):\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest", "\ndef smallest_num(xs):\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest", "\ndef smallest_num(xs):\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"], "evaluation": true}
{"problem_id": 63, "prompt": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef max_difference(test_list):\n    if len(test_list) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff", "\ndef max_difference(test_list):\n    if len(test_list) < 2:\n        return None\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff", "\ndef max_difference(test_list):\n    if len(test_list) < 2:\n        return None\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff"], "evaluation": false}
{"problem_id": 64, "prompt": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\ndef subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "generated_code": ["\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])", "\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)", "\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)"], "evaluation": true}
{"problem_id": 65, "prompt": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "generated_code": ["\ndef recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])", "\ndef recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])", "\ndef recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])"], "evaluation": false}
{"problem_id": 66, "prompt": "def pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "generated_code": ["\ndef pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count", "\ndef pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count", "\ndef pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 67, "prompt": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "generated_code": ["\ndef bell_number(n):   \n    bell = [1]\n    for i in range(1, n + 1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]", "\ndef bell_number(n):   \n    bell = [1]\n    for i in range(1, n + 1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]", "\ndef bell_number(n):   \n    bell = [1]\n    for i in range(1, n + 1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]"], "evaluation": false}
{"problem_id": 68, "prompt": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Monotonic(A): \n    if len(A) == 1:\n        return True\n    if len(A) == 2:\n        return A[0] <= A[1] or A[0] == A[1]\n    if len(A) == 3:\n        return A[0] <= A[1] and A[1] <= A[2] or A[0] == A[1] and A[1] <= A[2] or A[0] <= A[1] and A[1] == A[2]\n    if len(A) == 4:\n        return A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] or A[0] == A[1] and A[1] <= A[2] and A[2] <= A[3] or A[0] <= A[1] and A[1] == A[2] and A[2] <= A[3] or A[0] <= A[1] and A[1] <= A[2] and A[2] == A[3]\n    if len(A) == 5:\n        return A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] == A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] <= A[1] and A[1] == A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] <= A[1] and A[1] <= A[2] and A[2] == A[3] and A[3] <= A[4] or A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] == A[4]\n    if len(A) == 6:\n        return A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[", "\ndef is_Monotonic(A): \n    if len(A) == 1:\n        return True\n    if len(A) == 2:\n        return A[0] <= A[1] or A[0] == A[1]\n    if len(A) == 3:\n        return A[0] <= A[1] and A[1] <= A[2] or A[0] == A[1] and A[1] <= A[2] or A[0] <= A[1] and A[1] == A[2]\n    if len(A) == 4:\n        return A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] or A[0] == A[1] and A[1] <= A[2] and A[2] <= A[3] or A[0] <= A[1] and A[1] == A[2] and A[2] <= A[3] or A[0] <= A[1] and A[1] <= A[2] and A[2] == A[3]\n    if len(A) == 5:\n        return A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] == A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] <= A[1] and A[1] == A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] <= A[1] and A[1] <= A[2] and A[2] == A[3] and A[3] <= A[4] or A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] == A[4] or A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] <=", "\ndef is_Monotonic(A): \n    if len(A) == 1:\n        return True\n    if len(A) == 2:\n        return A[0] <= A[1] or A[0] == A[1]\n    if len(A) == 3:\n        return A[0] <= A[1] and A[1] <= A[2] or A[0] == A[1] and A[1] <= A[2] or A[0] <= A[1] and A[1] == A[2]\n    if len(A) == 4:\n        return A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] or A[0] == A[1] and A[1] <= A[2] and A[2] <= A[3] or A[0] <= A[1] and A[1] == A[2] and A[2] <= A[3] or A[0] <= A[1] and A[1] <= A[2] and A[2] == A[3]\n    if len(A) == 5:\n        return A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] == A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] <= A[1] and A[1] == A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] <= A[1] and A[1] <= A[2] and A[2] == A[3] and A[3] <= A[4] or A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] == A[4] or A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4] or A[0] =="], "evaluation": false}
{"problem_id": 69, "prompt": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "generated_code": ["\ndef is_sublist(l, s):\n    if s == []:\n        return True\n    elif l == []:\n        return False\n    else:\n        return l[0] == s[0] and is_sublist(l[1:], s[1:]) or is_sublist(l[1:], s)", "\ndef is_sublist(l, s):\n    if s == []:\n        return True\n    elif l == []:\n        return False\n    else:\n        return l[0] == s[0] and is_sublist(l[1:], s[1:]) or is_sublist(l[1:], s)", "\ndef is_sublist(l, s):\n    if s == []:\n        return True\n    elif l == []:\n        return False\n    else:\n        return l[0] == s[0] and is_sublist(l[1:], s[1:]) or is_sublist(l[1:], s)"], "evaluation": false}
{"problem_id": 70, "prompt": "def get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "generated_code": ["\ndef get_equal(Input, k):\n    if len(Input[0]) == k:\n        return True\n    else:\n        return False", "\ndef get_equal(Input, k):\n    if len(Input[0]) == k:\n        return True\n    else:\n        return False", "\ndef get_equal(Input, k):\n    if len(Input) == 0:\n        return True\n    if len(Input[0]) == k:\n        return True\n    return False"], "evaluation": false}
{"problem_id": 71, "prompt": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "generated_code": ["\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            sorted = True\n            gap = 1\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums", "\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            sorted = True\n            gap = 1\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums", "\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            sorted = True\n            gap = 1\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums"], "evaluation": true}
{"problem_id": 72, "prompt": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef dif_Square(n): \n    for i in range(0, n + 1):\n        for j in range(0, i + 1):\n            if i * i - j * j == n:\n                return True\n    return False", "\ndef dif_Square(n): \n    for i in range(0, n + 1):\n        for j in range(0, i + 1):\n            if i * i - j * j == n:\n                return True\n    return False", "\ndef dif_Square(n): \n    for i in range(0, n + 1):\n        for j in range(0, i + 1):\n            if (i * i - j * j == n):\n                return True\n    return False"], "evaluation": true}
{"problem_id": 73, "prompt": "import re\ndef multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef multiple_split(text):\n    return re.split(r'[\\s,.]+', text)", "import re\n\ndef multiple_split(text):\n    return re.split(r'[\\s,.]+', text)", "import re\n\ndef multiple_split(text):\n    return re.split(r'[;,\\n]', text)"], "evaluation": false}
{"problem_id": 74, "prompt": "def is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "generated_code": ["\ndef is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True", "\ndef is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True", "\ndef is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"], "evaluation": false}
{"problem_id": 75, "prompt": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        flag = True\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(test_list[i])\n    return result", "\ndef find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        flag = True\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(test_list[i])\n    return result", "\ndef find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        flag = True\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(test_list[i])\n\n    return result"], "evaluation": false}
{"problem_id": 76, "prompt": "def count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "generated_code": ["\ndef count_Squares(m,n):\n    if m == 0 or n == 0:\n        return 0\n    elif m == 1 or n == 1:\n        return 1\n    else:\n        return count_Squares(m-1,n) + count_Squares(m,n-1) + count_Squares(m-1,n-1)", "\ndef count_Squares(m,n):\n    if m == 0 or n == 0:\n        return 0\n    elif m == 1 or n == 1:\n        return 1\n    else:\n        return count_Squares(m-1,n) + count_Squares(m,n-1) + count_Squares(m-1,n-1)", "\ndef count_Squares(m,n):\n    if m == 0 or n == 0:\n        return 0\n    elif m == 1 or n == 1:\n        return 1\n    else:\n        return count_Squares(m-1,n) + count_Squares(m,n-1) + count_Squares(m-1,n-1)"], "evaluation": false}
{"problem_id": 77, "prompt": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "generated_code": ["\ndef is_Diff(n): \n    sum_even = 0\n    sum_odd = 0\n    for i in n:\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    return sum_even - sum_odd", "\ndef is_Diff(n): \n    sum_even = 0\n    sum_odd = 0\n    for i in n:\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    return abs(sum_even - sum_odd)", "\ndef is_Diff(n): \n    sum_even = 0\n    sum_odd = 0\n    for i in n:\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    return abs(sum_even - sum_odd)"], "evaluation": false}
{"problem_id": 78, "prompt": "def count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "generated_code": ["\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count(\"1\") % 2 != 0:\n            count += 1\n    return count", "\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count", "\ndef count_With_Odd_SetBits(n): \n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count(\"1\") % 2 == 1:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 79, "prompt": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "generated_code": ["\ndef word_len(s): \n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False", "\ndef word_len(s): \n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False", "\ndef word_len(s): \n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 80, "prompt": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "generated_code": ["\ndef tetrahedral_number(n): \n    return n * (n + 1) * (n + 2) // 6", "\ndef tetrahedral_number(n): \n    return int((n * (n + 1) * (n + 2)) / 6)", "\ndef tetrahedral_number(n): \n    return int((n * (n + 1) * (n + 2)) / 6)"], "evaluation": true}
{"problem_id": 81, "prompt": "def zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "generated_code": ["\ndef zip_tuples(test_tup1, test_tup2):\n    return zip(test_tup1, test_tup2)", "\ndef zip_tuples(test_tup1, test_tup2):\n    return zip(test_tup1, test_tup2)", "\ndef zip_tuples(test_tup1, test_tup2):\n    return tuple(zip(test_tup1, test_tup2))"], "evaluation": false}
{"problem_id": 82, "prompt": "import math\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef volume_sphere(r):\n    return 4/3*math.pi*r**3", "import math\n\ndef volume_sphere(r):\n    return 4/3 * math.pi * r**3", "import math\n\ndef volume_sphere(r):\n    return 4/3*math.pi*r**3"], "evaluation": true}
{"problem_id": 83, "prompt": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "generated_code": ["\ndef get_Char(strr):  \n    strr = list(strr)\n    strr.sort()\n    strr = ''.join(strr)\n    return strr[0] + strr[-1]", "\ndef get_Char(strr):  \n    strr = list(strr)\n    strr.sort()\n    strr = ''.join(strr)\n    return strr[0] + strr[-1]", "\ndef get_Char(strr):  \n    strr = list(strr)\n    strr.sort()\n    strr = ''.join(strr)\n    return strr[0] + strr[-1]"], "evaluation": false}
{"problem_id": 84, "prompt": "def sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "generated_code": ["\ndef sequence(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)", "\ndef sequence(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)", "\ndef sequence(n): \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)"], "evaluation": false}
{"problem_id": 85, "prompt": "import math\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "generated_code": ["import math\n\ndef surfacearea_sphere(r):\n    return 4*math.pi*(r**2)", "import math\n\ndef surfacearea_sphere(r):\n    return 4*math.pi*r**2", "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2"], "evaluation": true}
{"problem_id": 86, "prompt": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef centered_hexagonal_number(n):\n    if n == 1:\n        return 1\n    else:\n        return ((2*n)**2 - 1)", "\ndef centered_hexagonal_number(n):\n    if n == 1:\n        return 1\n    else:\n        return 4 * ((n - 1) ** 2 + (n - 1)) + 1", "\ndef centered_hexagonal_number(n):\n    if n == 1:\n        return 1\n    else:\n        return 4 * ((n - 1) ** 2 + (n - 1)) + 1"], "evaluation": false}
{"problem_id": 87, "prompt": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "generated_code": ["import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return {**dict1, **dict2, **dict3}", "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return {**dict1, **dict2, **dict3}", "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return {**dict1,**dict2,**dict3}"], "evaluation": false}
{"problem_id": 88, "prompt": "import collections\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "generated_code": ["import collections\n\ndef freq_count(list1):\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1", "import collections\n\ndef freq_count(list1):\n    dict1 = {}\n    for i in list1:\n        if i in dict1.keys():\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1", "import collections\n\ndef freq_count(list1):\n    dict1 = {}\n    for i in list1:\n        if i in dict1.keys():\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1"], "evaluation": true}
{"problem_id": 89, "prompt": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "generated_code": ["\ndef closest_num(N):\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 2\n    if N == 5:\n        return 4\n    if N == 6:\n        return 4\n    if N == 7:\n        return 6\n    if N == 8:\n        return 6\n    if N == 9:\n        return 8\n    if N == 10:\n        return 8\n    if N == 11:\n        return 10\n    if N == 12:\n        return 10\n    if N == 13:\n        return 12\n    if N == 14:\n        return 12\n    if N == 15:\n        return 14\n    if N == 16:\n        return 14\n    if N == 17:\n        return 16\n    if N == 18:\n        return 16\n    if N == 19:\n        return 18\n    if N == 20:\n        return 18\n    if N == 21:\n        return 20\n    if N == 22:\n        return 20\n    if N == 23:\n        return 22\n    if N == 24:\n        return 22\n    if N == 25:\n        return 24\n    if N == 26:\n        return 24\n    if N == 27:\n        return 26\n    if N == 28:\n        return 26\n    if N == 29:\n        return 28\n    if N == 30:\n        return 28\n    if N == 31:\n        return 30\n    if N == 32:\n        return 30\n    if N == 33:\n        return 32\n    if N == 34:\n        return 32\n    if N == 35:\n        return 34\n    if N == 3", "\ndef closest_num(N):\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 2\n    if N == 5:\n        return 5\n    if N == 6:\n        return 5\n    if N == 7:\n        return 6\n    if N == 8:\n        return 6\n    if N == 9:\n        return 8\n    if N == 10:\n        return 8\n    if N == 11:\n        return 10\n    if N == 12:\n        return 10\n    if N == 13:\n        return 12\n    if N == 14:\n        return 12\n    if N == 15:\n        return 14\n    if N == 16:\n        return 14\n    if N == 17:\n        return 16\n    if N == 18:\n        return 16\n    if N == 19:\n        return 18\n    if N == 20:\n        return 18\n    if N == 21:\n        return 20\n    if N == 22:\n        return 20\n    if N == 23:\n        return 22\n    if N == 24:\n        return 22\n    if N == 25:\n        return 24\n    if N == 26:\n        return 24\n    if N == 27:\n        return 26\n    if N == 28:\n        return 26\n    if N == 29:\n        return 28\n    if N == 30:\n        return 28\n    if N == 31:\n        return 30\n    if N == 32:\n        return 30\n    if N == 33:\n        return 32\n    if N == 34:\n        return 32\n    if N == 35:\n        return 34\n    if N == 3", "\ndef closest_num(N):\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 2\n    if N == 5:\n        return 4\n    if N == 6:\n        return 4\n    if N == 7:\n        return 6\n    if N == 8:\n        return 6\n    if N == 9:\n        return 8\n    if N == 10:\n        return 8\n    if N == 11:\n        return 10\n    if N == 12:\n        return 10\n    if N == 13:\n        return 12\n    if N == 14:\n        return 12\n    if N == 15:\n        return 14\n    if N == 16:\n        return 14\n    if N == 17:\n        return 16\n    if N == 18:\n        return 16\n    if N == 19:\n        return 18\n    if N == 20:\n        return 18\n    if N == 21:\n        return 20\n    if N == 22:\n        return 20\n    if N == 23:\n        return 22\n    if N == 24:\n        return 22\n    if N == 25:\n        return 24\n    if N == 26:\n        return 24\n    if N == 27:\n        return 26\n    if N == 28:\n        return 26\n    if N == 29:\n        return 28\n    if N == 30:\n        return 28\n    if N == 31:\n        return 28\n    if N == 32:\n        return 30\n    if N == 33:\n        return 30\n    if N == 34:\n        return 32\n    if N == 35:\n        return 32\n    if N == 3"], "evaluation": false}
{"problem_id": 90, "prompt": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "generated_code": ["\ndef len_log(list1):\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)", "\ndef len_log(list1):\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)", "\ndef len_log(list1):\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    print(max(list2))"], "evaluation": true}
{"problem_id": 91, "prompt": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "generated_code": ["\ndef find_substring(str1, sub_str):\n    if sub_str in str1:\n        return True\n    else:\n        return False", "\ndef find_substring(str1, sub_str):\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False", "\ndef find_substring(str1, sub_str):\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return i\n    return -1"], "evaluation": false}
{"problem_id": 92, "prompt": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "generated_code": ["\ndef is_undulating(n): \n    if len(str(n)) == 1:\n        return True\n    if len(str(n)) % 2 != 0:\n        return False\n    for i in range(int(len(str(n))/2)):\n        if int(str(n)[i]) > int(str(n)[i+1]):\n            return False\n        if int(str(n)[i]) < int(str(n)[i+1]):\n            return False\n    return True", "\ndef is_undulating(n): \n    if len(str(n)) == 1:\n        return True\n    if len(str(n)) % 2 != 0:\n        return False\n    for i in range(int(len(str(n))/2)):\n        if int(str(n)[i]) > int(str(n)[i+1]):\n            return False\n        if int(str(n)[i+1]) > int(str(n)[i+2]):\n            return False\n    return True", "\ndef is_undulating(n): \n    if len(str(n)) == 1:\n        return True\n    if len(str(n)) % 2 != 0:\n        return False\n    for i in range(int(len(str(n))/2)):\n        if int(str(n)[i]) > int(str(n)[i+1]):\n            return False\n        if int(str(n)[i+1]) > int(str(n)[i+2]):\n            return False\n    return True"], "evaluation": false}
{"problem_id": 93, "prompt": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "generated_code": ["\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a,b-1)", "\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)", "\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)"], "evaluation": true}
{"problem_id": 94, "prompt": "from operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "generated_code": ["from operator import itemgetter \n\ndef index_minimum(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]", "from operator import itemgetter \n\ndef index_minimum(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]", "from operator import itemgetter \n\ndef index_minimum(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]"], "evaluation": false}
{"problem_id": 95, "prompt": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "generated_code": ["\ndef Find_Min_Length(lst):  \n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return len(lst[0])\n    else:\n        min_length = len(lst[0])\n        for i in range(len(lst)):\n            if len(lst[i]) < min_length:\n                min_length = len(lst[i])\n        return min_length", "\ndef Find_Min_Length(lst):  \n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return len(lst[0])\n    else:\n        min_length = len(lst[0])\n        for i in range(len(lst)):\n            if len(lst[i]) < min_length:\n                min_length = len(lst[i])\n        return min_length", "\ndef Find_Min_Length(lst):  \n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return len(lst[0])\n    else:\n        min_len = len(lst[0])\n        for i in range(len(lst)):\n            if len(lst[i]) < min_len:\n                min_len = len(lst[i])\n        return min_len"], "evaluation": true}
{"problem_id": 96, "prompt": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "generated_code": ["\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "\ndef divisor(n):\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors", "\ndef divisor(n):\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"], "evaluation": true}
{"problem_id": 97, "prompt": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "generated_code": ["\ndef frequency_lists(list1):\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq", "\ndef frequency_lists(list1):\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n\n    return freq_dict", "\ndef frequency_lists(list1):\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n\n    return freq_dict"], "evaluation": false}
{"problem_id": 98, "prompt": "def multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "generated_code": ["\ndef multiply_num(numbers):  \n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)", "\ndef multiply_num(numbers):  \n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "\ndef multiply_num(numbers):  \n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"], "evaluation": true}
{"problem_id": 99, "prompt": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "generated_code": ["\ndef decimal_to_binary(n): \n    if n==0:\n        return 0\n    else:\n        return n%2 + 10*decimal_to_binary(n//2)", "\ndef decimal_to_binary(n): \n    if n==0:\n        return 0\n    else:\n        return n%2 + 10*decimal_to_binary(n//2)", "\ndef decimal_to_binary(n): \n    if n==0:\n        return 0\n    else:\n        return n%2 + 10*decimal_to_binary(n//2)"], "evaluation": false}
{"problem_id": 100, "prompt": "import sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "generated_code": ["import sys\n\ndef next_smallest_palindrome(num):\n    num_str = str(num)\n    if len(num_str) == 1:\n        return 0\n    if len(num_str) == 2:\n        if num_str[0] == num_str[1]:\n            return 11\n        else:\n            return 22\n    if len(num_str) == 3:\n        if num_str[0] == num_str[2]:\n            return 101\n        else:\n            return 202\n    if len(num_str) == 4:\n        if num_str[0] == num_str[3]:\n            return 1001\n        else:\n            return 2002\n    if len(num_str) == 5:\n        if num_str[0] == num_str[4]:\n            return 10001\n        else:\n            return 20002\n    if len(num_str) == 6:\n        if num_str[0] == num_str[5]:\n            return 100001\n        else:\n            return 200002\n    if len(num_str) == 7:\n        if num_str[0] == num_str[6]:\n            return 1000001\n        else:\n            return 2000002\n    if len(num_str) == 8:\n        if num_str[0] == num_str[7]:\n            return 10000001\n        else:\n            return 20000002\n    if len(num_str) == 9:\n        if num_str[0] == num_str[8]:\n            return 100000001\n        else:\n            return 200000002\n    if len(num_str) == 10:\n        if num_str[0] == num_str[9]:\n            return 1000000001\n        else:\n            return 2000000002\n    if len(num_", "import sys\n\ndef next_smallest_palindrome(num):\n    num_str = str(num)\n    if len(num_str) == 1:\n        return 0\n    if len(num_str) == 2:\n        if num_str[0] == num_str[1]:\n            return 11\n        else:\n            return 22\n    if len(num_str) == 3:\n        if num_str[0] == num_str[2]:\n            return 101\n        else:\n            return 202\n    if len(num_str) == 4:\n        if num_str[0] == num_str[3]:\n            return 1001\n        else:\n            return 2002\n    if len(num_str) == 5:\n        if num_str[0] == num_str[4]:\n            return 10001\n        else:\n            return 20002\n    if len(num_str) == 6:\n        if num_str[0] == num_str[5]:\n            return 100001\n        else:\n            return 200002\n    if len(num_str) == 7:\n        if num_str[0] == num_str[6]:\n            return 1000001\n        else:\n            return 2000002\n    if len(num_str) == 8:\n        if num_str[0] == num_str[7]:\n            return 10000001\n        else:\n            return 20000002\n    if len(num_str) == 9:\n        if num_str[0] == num_str[8]:\n            return 100000001\n        else:\n            return 200000002\n    if len(num_str) == 10:\n        if num_str[0] == num_str[9]:\n            return 1000000001\n        else:\n            return 2000000002", "import sys\n\ndef next_smallest_palindrome(num):\n    num_str = str(num)\n    if len(num_str) == 1:\n        return 0\n    if len(num_str) == 2:\n        if num_str[0] == num_str[1]:\n            return 11\n        else:\n            return 22\n    if len(num_str) == 3:\n        if num_str[0] == num_str[2]:\n            return 101\n        else:\n            return 202\n    if len(num_str) == 4:\n        if num_str[0] == num_str[3]:\n            return 1001\n        else:\n            return 2002\n    if len(num_str) == 5:\n        if num_str[0] == num_str[4]:\n            return 10001\n        else:\n            return 20002\n    if len(num_str) == 6:\n        if num_str[0] == num_str[5]:\n            return 100001\n        else:\n            return 200002\n    if len(num_str) == 7:\n        if num_str[0] == num_str[6]:\n            return 1000001\n        else:\n            return 2000002\n    if len(num_str) == 8:\n        if num_str[0] == num_str[7]:\n            return 10000001\n        else:\n            return 20000002\n    if len(num_str) == 9:\n        if num_str[0] == num_str[8]:\n            return 100000001\n        else:\n            return 200000002\n    if len(num_str) == 10:\n        if num_str[0] == num_str[9]:\n            return 1000000001\n        else:\n            return 2000000002"], "evaluation": false}
{"problem_id": 101, "prompt": "def kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "generated_code": ["\ndef kth_element(arr, n, k):\n    if k < 0 or k >= n:\n        return None\n\n    return kth_element_helper(arr, 0, n - 1, k)", "\ndef kth_element(arr, n, k):\n    if k < 0 or k >= n:\n        return -1\n    return kth_element_helper(arr, 0, n - 1, k)", "\ndef kth_element(arr, n, k):\n    if k < 0 or k >= n:\n        return -1\n\n    return kth_element_helper(arr, 0, n - 1, k)"], "evaluation": false}
{"problem_id": 102, "prompt": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "generated_code": ["\ndef snake_to_camel(word):\n    return word.title().replace(\"_\", \"\")", "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))", "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() for x in word.split('_'))"], "evaluation": true}
{"problem_id": 103, "prompt": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "generated_code": ["\ndef eulerian_num(n, m): \n    if m == 0:\n        return 1\n    elif m == 1:\n        return n\n    else:\n        return n * eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)", "\ndef eulerian_num(n, m): \n    if m == 0:\n        return 1\n    elif m == 1:\n        return n\n    else:\n        return n * eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)", "\ndef eulerian_num(n, m): \n    if m == 0:\n        return 1\n    elif m == 1:\n        return n\n    else:\n        return n * eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)"], "evaluation": false}
{"problem_id": 104, "prompt": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sort_sublists(input_list):\n    return list(map(lambda sublist: sorted(sublist), input_list))", "\ndef sort_sublists(input_list):\n    return list(map(lambda x: sorted(x), input_list))", "\ndef sort_sublists(input_list):\n    return list(map(lambda sublist: sorted(sublist), input_list))"], "evaluation": true}
{"problem_id": 105, "prompt": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "generated_code": ["\ndef count(lst):   \n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count", "\ndef count(lst):   \n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count", "\ndef count(lst):   \n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 106, "prompt": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "generated_code": ["\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)", "\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)", "\ndef add_lists(test_list, test_tup):\n    return test_list + list(test_tup)"], "evaluation": false}
{"problem_id": 107, "prompt": "def count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "generated_code": ["\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R + 1) :\n        if i >= 0 and i <= 9 :\n            count += 1\n        elif i >= 10 and i <= 15 :\n            count += 1\n    return count", "\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R + 1) :\n        if i >= 0 and i <= 9 :\n            count += 1\n        elif i >= 10 and i <= 15 :\n            count += 1\n    return count", "\ndef count_Hexadecimal(L,R) :  \n    count = 0\n    for i in range(L, R + 1) :\n        if i >= 0 and i <= 9 :\n            count += 1\n        elif i >= 10 and i <= 15 :\n            count += 1\n        else :\n            count += 0\n    return count"], "evaluation": false}
{"problem_id": 108, "prompt": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "generated_code": ["import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    heapq.heapify(heap)\n    for num in num1:\n        heapq.heappush(heap,num)\n    for num in num2:\n        heapq.heappush(heap,num)\n    for num in num3:\n        heapq.heappush(heap,num)\n    while heap:\n        yield heapq.heappop(heap)", "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    heapq.heapify(heap)\n    for num in num1:\n        heapq.heappush(heap,num)\n    for num in num2:\n        heapq.heappush(heap,num)\n    for num in num3:\n        heapq.heappush(heap,num)\n    return heapq.nsmallest(len(heap),heap)", "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    heapq.heapify(heap)\n    for num in num1:\n        heapq.heappush(heap,num)\n    for num in num2:\n        heapq.heappush(heap,num)\n    for num in num3:\n        heapq.heappush(heap,num)\n    return heapq.nsmallest(len(heap),heap)"], "evaluation": false}
{"problem_id": 109, "prompt": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "generated_code": ["\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count", "\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count", "\ndef odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count % 2"], "evaluation": true}
{"problem_id": 110, "prompt": "def extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n", "generated_code": ["\ndef extract_missing(test_list, strt_val, stop_val):\n    if len(test_list) == 0:\n        return [strt_val, stop_val]\n    elif len(test_list) == 1:\n        if test_list[0] == strt_val:\n            return [stop_val]\n        elif test_list[0] == stop_val:\n            return [strt_val]\n        else:\n            return [strt_val, test_list[0], stop_val]\n    elif len(test_list) == 2:\n        if test_list[0] == strt_val and test_list[1] == stop_val:\n            return []\n        elif test_list[0] == strt_val:\n            return [test_list[1], stop_val]\n        elif test_list[1] == stop_val:\n            return [test_list[0], strt_val]\n        else:\n            return [strt_val, test_list[0], test_list[1], stop_val]\n    else:\n        if test_list[0] == strt_val and test_list[-1] == stop_val:\n            return test_list[1:-1]\n        elif test_list[0] == strt_val:\n            return [test_list[1], test_list[-1]] + test_list[2:-1]\n        elif test_list[-1] == stop_val:\n            return [test_list[0], test_list[-2]] + test_list[1:-1]\n        else:\n            return [strt_val, test_list[0], test_list[-1]] + test_list[1:-1]", "\ndef extract_missing(test_list, strt_val, stop_val):\n    if len(test_list) == 0:\n        return [strt_val, stop_val]\n    elif len(test_list) == 1:\n        if test_list[0] == strt_val:\n            return [stop_val]\n        elif test_list[0] == stop_val:\n            return [strt_val]\n        else:\n            return [strt_val, test_list[0], stop_val]\n    elif len(test_list) == 2:\n        if test_list[0] == strt_val and test_list[1] == stop_val:\n            return []\n        elif test_list[0] == strt_val:\n            return [test_list[1], stop_val]\n        elif test_list[1] == stop_val:\n            return [test_list[0], strt_val]\n        else:\n            return [strt_val, test_list[0], test_list[1], stop_val]\n    else:\n        if test_list[0] == strt_val and test_list[-1] == stop_val:\n            return test_list[1:-1]\n        elif test_list[0] == strt_val:\n            return [test_list[1], test_list[-1]] + test_list[2:-1]\n        elif test_list[-1] == stop_val:\n            return [test_list[0], test_list[-2]] + test_list[1:-1]\n        else:\n            return [strt_val, test_list[0], test_list[1], test_list[-1], stop_val] + test_list[2:-1]", "\ndef extract_missing(test_list, strt_val, stop_val):\n    if len(test_list) == 0:\n        return [strt_val, stop_val]\n    elif len(test_list) == 1:\n        if test_list[0] == strt_val:\n            return [stop_val]\n        elif test_list[0] == stop_val:\n            return [strt_val]\n        else:\n            return [strt_val, test_list[0], stop_val]\n    elif len(test_list) == 2:\n        if test_list[0] == strt_val and test_list[1] == stop_val:\n            return []\n        elif test_list[0] == strt_val:\n            return [test_list[1], stop_val]\n        elif test_list[1] == stop_val:\n            return [test_list[0], strt_val]\n        else:\n            return [strt_val, test_list[0], test_list[1], stop_val]\n    else:\n        if test_list[0] == strt_val and test_list[-1] == stop_val:\n            return test_list[1:-1]\n        elif test_list[0] == strt_val:\n            return [test_list[1], test_list[-1]] + test_list[2:-1]\n        elif test_list[-1] == stop_val:\n            return [test_list[0], test_list[-2]] + test_list[1:-1]\n        else:\n            return [strt_val, test_list[0], test_list[1], test_list[-1], stop_val] + test_list[2:-2]"], "evaluation": false}
{"problem_id": 111, "prompt": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    \"\"\"\n", "generated_code": ["\ndef common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n\n    return list(set(nestedlist[0]) & set(common_in_nested_lists(nestedlist[1:])))", "\ndef common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n\n    return list(set(nestedlist[0]).intersection(*nestedlist[1:]))", "\ndef common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n\n    return list(set(nestedlist[0]) & set(common_in_nested_lists(nestedlist[1:])))"], "evaluation": true}
{"problem_id": 112, "prompt": "def perimeter(diameter,height) : \n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    \"\"\"\n", "generated_code": ["\ndef perimeter(diameter,height) : \n    return 2*diameter + 2*height", "\ndef perimeter(diameter,height) : \n    return 2*diameter + 2*height", "\ndef perimeter(diameter,height) : \n    return 2*diameter + 2*height"], "evaluation": true}
{"problem_id": 113, "prompt": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "generated_code": ["\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "\ndef check_integer(text):\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True"], "evaluation": true}
{"problem_id": 114, "prompt": "from collections import Counter \ndef assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    \"\"\"\n", "generated_code": ["from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = Counter(test_list)\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + (freq_dict[test_list[i]],)\n    return test_list", "from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = Counter(test_list)\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + (freq_dict[test_list[i]],)\n    return test_list", "from collections import Counter \n\ndef assign_freq(test_list):\n    freq_dict = Counter(test_list)\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + (freq_dict[test_list[i]],)\n    return test_list"], "evaluation": false}
{"problem_id": 115, "prompt": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "generated_code": ["\ndef empty_dit(list1):\n    for i in list1:\n        if i != {}:\n            return False\n    return True", "\ndef empty_dit(list1):\n    for i in list1:\n        if i != {}:\n            return False\n    return True", "\ndef empty_dit(list1):\n    if len(list1) == 0:\n        return True\n    for i in list1:\n        if len(i) != 0:\n            return False\n    return True"], "evaluation": true}
{"problem_id": 116, "prompt": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    \"\"\"\n", "generated_code": ["\ndef tuple_to_int(nums):\n    return int(\"\".join(map(str, nums)))", "\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))", "\ndef tuple_to_int(nums):\n    return int(\"\".join([str(i) for i in nums]))"], "evaluation": true}
{"problem_id": 117, "prompt": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    \"\"\"\n", "generated_code": ["\ndef list_to_float(test_list):\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n    return test_list", "\ndef list_to_float(test_list):\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n    return test_list", "\ndef list_to_float(test_list):\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n\n    return test_list"], "evaluation": false}
{"problem_id": 118, "prompt": "def string_to_list(string): \n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    \"\"\"\n", "generated_code": ["\ndef string_to_list(string): \n    return list(string)", "\ndef string_to_list(string): \n    return [char for char in string]", "\ndef string_to_list(string): \n    return [char for char in string]"], "evaluation": false}
{"problem_id": 119, "prompt": "def search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef search(arr,n) :\n    if len(arr) == 1 :\n        return arr[0]\n    if arr[0] != arr[1] :\n        return arr[0]\n    if arr[n-1] != arr[n-2] :\n        return arr[n-1]\n    return search(arr[1:n-1],n-2)", "\ndef search(arr,n) :\n    if len(arr) == 1 :\n        return arr[0]\n    if arr[0] != arr[1] :\n        return arr[0]\n    if arr[n-1] != arr[n-2] :\n        return arr[n-1]\n    return search(arr[1:n-1],n-2)", "\ndef search(arr,n) :\n    if len(arr) == 1 :\n        return arr[0]\n    if arr[0] != arr[1] :\n        return arr[0]\n    if arr[n-1] != arr[n-2] :\n        return arr[n-1]\n    \n    return search(arr[1:n-1],n-2)"], "evaluation": true}
{"problem_id": 120, "prompt": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    \"\"\"\n", "generated_code": ["\ndef max_product_tuple(list1):\n    list1.sort(key=lambda x: x[0])\n    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product", "\ndef max_product_tuple(list1):\n    list1.sort(key=lambda x: x[0])\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            max_product = max(max_product, list1[i][0] * list1[j][0], list1[i][1] * list1[j][1])\n    return max_product", "\ndef max_product_tuple(list1):\n    list1.sort(key=lambda x: x[0])\n    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            max_product = max(max_product, list1[i][0] * list1[j][0], list1[i][1] * list1[j][1])\n    return max_product"], "evaluation": false}
{"problem_id": 121, "prompt": "def check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    \"\"\"\n", "generated_code": ["\ndef check_triplet(A, n, sum, count):\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    print(A[i], A[j], A[k])\n                    count += 1\n    return count", "\ndef check_triplet(A, n, sum, count):\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    print(A[i], A[j], A[k])\n                    count += 1\n    return count", "\ndef check_triplet(A, n, sum, count):\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    print(A[i], A[j], A[k])\n                    count += 1\n    return count"], "evaluation": false}
{"problem_id": 122, "prompt": "MAX = 3000 \ndef smartNumber(n): \n    \"\"\"\n    Write a function to find n’th smart number.\n    \"\"\"\n", "generated_code": ["\ndef smartNumber(n): \n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n ==", "\ndef smartNumber(n): \n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n >=", "\ndef smartNumber(n): \n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n >"], "evaluation": false}
{"problem_id": 123, "prompt": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "generated_code": ["\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum", "\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable_number(i):\n            amicable_sum += i\n    return amicable_sum", "\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        amicable_sum += amicable_number(i)\n    return amicable_sum"], "evaluation": false}
{"problem_id": 124, "prompt": "import cmath\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n", "generated_code": ["import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(a/b)", "import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(complex(a,b))", "import cmath\n\ndef angle_complex(a,b):\n    return cmath.phase(complex(a,b))"], "evaluation": false}
{"problem_id": 125, "prompt": "def find_length(string, n): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "generated_code": ["\ndef find_length(string, n): \n    max_diff = 0\n    curr_0 = 0\n    curr_1 = 0\n    for i in range(n):\n        if string[i] == '0':\n            curr_0 += 1\n        else:\n            curr_1 += 1\n        max_diff = max(max_diff, abs(curr_0 - curr_1))\n    return max_diff", "\ndef find_length(string, n): \n    max_diff = 0\n    curr_0 = 0\n    curr_1 = 0\n    for i in range(n):\n        if string[i] == '0':\n            curr_0 += 1\n        else:\n            curr_1 += 1\n        max_diff = max(max_diff, abs(curr_0 - curr_1))\n    return max_diff", "\ndef find_length(string, n): \n    max_diff = 0\n    curr_0 = 0\n    curr_1 = 0\n    for i in range(n):\n        if string[i] == '0':\n            curr_0 += 1\n        else:\n            curr_1 += 1\n        max_diff = max(max_diff, abs(curr_0 - curr_1))\n\n    return max_diff"], "evaluation": false}
{"problem_id": 126, "prompt": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "generated_code": ["\ndef sum(a,b): \n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum", "\ndef sum(a,b): \n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum", "\ndef sum(a,b): \n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum"], "evaluation": true}
{"problem_id": 127, "prompt": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    \"\"\"\n", "generated_code": ["\ndef multiply_int(x, y):\n    if x == 0 or y == 0:\n        return 0\n    elif x == 1:\n        return y\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "\ndef multiply_int(x, y):\n    if x == 0 or y == 0:\n        return 0\n    elif x == 1:\n        return y\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "\ndef multiply_int(x, y):\n    if x == 0 or y == 0:\n        return 0\n    elif x == 1:\n        return y\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)"], "evaluation": true}
{"problem_id": 128, "prompt": "def long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    \"\"\"\n", "generated_code": ["\ndef long_words(n, str):\n    return [word for word in str.split() if len(word) > n]", "\ndef long_words(n, str):\n    return [word for word in str.split() if len(word) > n]", "\ndef long_words(n, str):\n    return [word for word in str.split() if len(word) > n]"], "evaluation": true}
{"problem_id": 129, "prompt": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    \"\"\"\n", "generated_code": ["\ndef magic_square_test(my_matrix):\n    if len(my_matrix) != len(my_matrix[0]) or len(my_matrix) % 2 == 0:\n        return False\n\n    sum_of_diagonal = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    sum_of_diagonal2 = sum(my_matrix[i][len(my_matrix) - 1 - i] for i in range(len(my_matrix)))\n    sum_of_rows = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n    sum_of_columns = sum(my_matrix[i][j] for j in range(len(my_matrix)) for i in range(len(my_matrix)))\n\n    if sum_of_diagonal != sum_of_diagonal2 or sum_of_rows != sum_of_columns:\n        return False\n\n    return True", "\ndef magic_square_test(my_matrix):\n    if len(my_matrix) != len(my_matrix[0]) or len(my_matrix) % 2 == 0:\n        return False\n\n    sum_of_diagonal = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    sum_of_diagonal2 = sum(my_matrix[i][len(my_matrix) - 1 - i] for i in range(len(my_matrix)))\n    sum_of_rows = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n    sum_of_cols = sum(my_matrix[j][i] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n\n    if sum_of_diagonal != sum_of_diagonal2 or sum_of_rows != sum_of_cols:\n        return False\n\n    return True", "\ndef magic_square_test(my_matrix):\n    if len(my_matrix) != len(my_matrix[0]) or len(my_matrix) % 2 == 0:\n        return False\n\n    sum_of_diagonal = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    sum_of_diagonal2 = sum(my_matrix[i][len(my_matrix) - 1 - i] for i in range(len(my_matrix)))\n    sum_of_rows = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n    sum_of_columns = sum(my_matrix[j][i] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n\n    if sum_of_diagonal != sum_of_diagonal2 or sum_of_rows != sum_of_columns:\n        return False\n\n    return True"], "evaluation": false}
{"problem_id": 130, "prompt": "from collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "generated_code": ["from collections import defaultdict\n\ndef max_occurrences(nums):\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=d.get)", "from collections import defaultdict\n\ndef max_occurrences(nums):\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d.items(), key=lambda x: x[1])", "from collections import defaultdict\n\ndef max_occurrences(nums):\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=d.get)"], "evaluation": false}
{"problem_id": 131, "prompt": "def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    \"\"\"\n", "generated_code": ["\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    i, j = 0, len(str1) - 1\n    str1 = list(str1)\n    while i < j:\n        while i < j and str1[i] not in vowels:\n            i += 1\n        while i < j and str1[j] not in vowels:\n            j -= 1\n        if i < j:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)", "\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    i, j = 0, len(str1) - 1\n    str1 = list(str1)\n    while i < j:\n        while i < j and str1[i] not in vowels:\n            i += 1\n        while i < j and str1[j] not in vowels:\n            j -= 1\n        if i < j:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)", "\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    i, j = 0, len(str1) - 1\n    str1 = list(str1)\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)"], "evaluation": true}
{"problem_id": 132, "prompt": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    \"\"\"\n", "generated_code": ["\ndef tup_string(tup1):\n    return str(tup1)", "\ndef tup_string(tup1):\n    return str(tup1)", "\ndef tup_string(tup1):\n    return \"\".join(tup1)"], "evaluation": false}
{"problem_id": 133, "prompt": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "generated_code": ["\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "\ndef sum_negativenum(nums):\n    return sum(list(filter(lambda x: x < 0, nums)))", "\ndef sum_negativenum(nums):\n    return sum(list(filter(lambda x: x < 0, nums)))"], "evaluation": true}
{"problem_id": 134, "prompt": "def check_last (arr,n,p): \n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    \"\"\"\n", "generated_code": ["\ndef check_last (arr,n,p): \n    arr.reverse()\n    for i in range(p):\n        if arr[0] % 2 == 0:\n            arr[0] = arr[0] // 2\n        else:\n            arr[0] = 3 * arr[0] + 1\n    if arr[0] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "\ndef check_last (arr,n,p): \n    arr.reverse()\n    for i in range(p):\n        if arr[0] % 2 == 0:\n            arr[0] = arr[0] // 2\n        else:\n            arr[0] = 3 * arr[0] + 1\n    if arr[0] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "\ndef check_last (arr,n,p): \n    arr.reverse()\n    for i in range(p):\n        if arr[0] % 2 == 0:\n            arr[0] = arr[0] // 2\n        else:\n            arr[0] = 3 * arr[0] + 1\n    if arr[0] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""], "evaluation": false}
{"problem_id": 135, "prompt": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n", "generated_code": ["\ndef hexagonal_num(n): \n    return (n * (2 * n - 1)) // 3", "\ndef hexagonal_num(n): \n    return (n * (2 * n - 1)) // 3", "\ndef hexagonal_num(n): \n    return (n * (2 * n - 1)) // 3"], "evaluation": false}
{"problem_id": 136, "prompt": "def cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    \"\"\"\n", "generated_code": ["\ndef cal_electbill(units):\n    if units <= 0:\n        return 0\n    elif units <= 100:\n        return units * 5\n    elif units <= 300:\n        return 100 * 5 + (units - 100) * 8\n    elif units <= 500:\n        return 100 * 5 + 100 * 8 + (units - 300) * 10\n    elif units <= 1000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + (units - 500) * 15\n    elif units <= 2000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + (units - 1000) * 20\n    elif units <= 5000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 + (units - 2000) * 25\n    elif units <= 10000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 + 500 * 25 + (units - 5000) * 30\n    elif units <= 20000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 + 500 * 25 + 600 * 30 + (units - 10000) * 35\n    elif units <= 50000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 4", "\ndef cal_electbill(units):\n    if units <= 0:\n        return 0\n    elif units <= 100:\n        return units * 5\n    elif units <= 300:\n        return 100 * 5 + (units - 100) * 8\n    elif units <= 500:\n        return 100 * 5 + 100 * 8 + (units - 300) * 10\n    elif units <= 1000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + (units - 500) * 15\n    elif units <= 2000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + (units - 1000) * 20\n    elif units <= 5000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 + (units - 2000) * 25\n    elif units <= 10000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 + 500 * 25 + (units - 5000) * 30\n    elif units <= 20000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 + 500 * 25 + 600 * 30 + (units - 10000) * 35\n    else:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 +", "\ndef cal_electbill(units):\n    if units <= 0:\n        return 0\n    elif units <= 100:\n        return units * 5\n    elif units <= 300:\n        return 100 * 5 + (units - 100) * 8\n    elif units <= 500:\n        return 100 * 5 + 100 * 8 + (units - 300) * 10\n    elif units <= 1000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + (units - 500) * 15\n    elif units <= 2000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + (units - 1000) * 20\n    elif units <= 5000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 + (units - 2000) * 25\n    elif units <= 10000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 + 500 * 25 + (units - 5000) * 30\n    elif units <= 20000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 + 400 * 20 + 500 * 25 + 600 * 30 + (units - 10000) * 35\n    elif units <= 100000:\n        return 100 * 5 + 100 * 8 + 200 * 10 + 300 * 15 +"], "evaluation": false}
{"problem_id": 137, "prompt": "from array import array\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    \"\"\"\n", "generated_code": ["from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)", "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)", "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n\n    return zero_count / len(nums)"], "evaluation": false}
{"problem_id": 138, "prompt": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "generated_code": ["\ndef is_Sum_Of_Powers_Of_Two(n): \n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    while n % 2 == 1:\n        n = n // 2 + 1\n    if n == 1:\n        return True\n    return False", "\ndef is_Sum_Of_Powers_Of_Two(n): \n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    while n % 2 == 1:\n        n = n // 2 + 1\n    return n == 1", "\ndef is_Sum_Of_Powers_Of_Two(n): \n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    while n % 2 == 1:\n        n = n // 2 + 1\n    if n == 1:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 139, "prompt": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n", "generated_code": ["\ndef circle_circumference(r):\n    return 2 * 3.14 * r", "\ndef circle_circumference(r):\n    return 2*3.14*r", "\ndef circle_circumference(r):\n    return 2 * 3.14 * r"], "evaluation": false}
{"problem_id": 140, "prompt": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    \"\"\"\n", "generated_code": ["\ndef extract_singly(test_list):\n    result = []\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i]) == 1:\n            result.append(test_list[i])\n    return result", "\ndef extract_singly(test_list):\n    result = []\n    for i in test_list:\n        if test_list.count(i) == 1:\n            result.append(i)\n    return result", "\ndef extract_singly(test_list):\n    result = []\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i]) == 1:\n            result.append(test_list[i])\n    return result"], "evaluation": false}
{"problem_id": 141, "prompt": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n", "generated_code": ["\ndef pancake_sort(nums):\n    if len(nums) <= 1:\n        return nums\n\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        if max_index != i:\n            nums[:max_index + 1] = reversed(nums[:max_index + 1])\n            nums[:i + 1] = reversed(nums[:i + 1])\n\n    return nums", "\ndef pancake_sort(nums):\n    if len(nums) <= 1:\n        return nums\n\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        if max_index != i:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n\n    return nums", "\ndef pancake_sort(nums):\n    if len(nums) <= 1:\n        return nums\n\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        if max_index != i:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n\n    return nums"], "evaluation": true}
{"problem_id": 142, "prompt": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    \"\"\"\n", "generated_code": ["\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count", "\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count", "\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count"], "evaluation": false}
{"problem_id": 143, "prompt": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count", "\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count", "\ndef find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"], "evaluation": false}
{"problem_id": 144, "prompt": "def sum_Pairs(arr,n): \n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n", "generated_code": ["\ndef sum_Pairs(arr,n): \n    arr.sort()\n    sum = 0\n    for i in range(n-1):\n        sum += abs(arr[i] - arr[i+1])\n    return sum", "\ndef sum_Pairs(arr,n): \n    arr.sort()\n    sum = 0\n    for i in range(n-1):\n        sum += abs(arr[i] - arr[i+1])\n    return sum", "\ndef sum_Pairs(arr,n): \n    arr.sort()\n    sum = 0\n    for i in range(n-1):\n        sum += abs(arr[i] - arr[i+1])\n    \n    return sum"], "evaluation": false}
{"problem_id": 145, "prompt": "def max_Abs_Diff(arr,n): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "generated_code": ["\ndef max_Abs_Diff(arr,n): \n    arr.sort()\n    return arr[n-1] - arr[0]", "\ndef max_Abs_Diff(arr,n): \n    arr.sort()\n    return arr[n-1] - arr[0]", "\ndef max_Abs_Diff(arr,n): \n    arr.sort()\n    return arr[n-1] - arr[0]"], "evaluation": false}
{"problem_id": 146, "prompt": "def ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    \"\"\"\n", "generated_code": ["\ndef ascii_value_string(str1):\n    ascii_value = 0\n    for i in str1:\n        ascii_value += ord(i)\n    return ascii_value", "\ndef ascii_value_string(str1):\n    ascii_value = 0\n    for i in str1:\n        ascii_value += ord(i)\n    return ascii_value", "\ndef ascii_value_string(str1):\n    ascii_value = 0\n    for i in range(len(str1)):\n        ascii_value += ord(str1[i])\n    return ascii_value"], "evaluation": false}
{"problem_id": 147, "prompt": "def max_path_sum(tri, m, n): \n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    \"\"\"\n", "generated_code": ["\ndef max_path_sum(tri, m, n): \n    for i in range(m - 2, -1, -1):\n        for j in range(i + 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]", "\ndef max_path_sum(tri, m, n): \n    for i in range(m - 2, -1, -1):\n        for j in range(i + 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]", "\ndef max_path_sum(tri, m, n): \n    for i in range(m - 2, -1, -1):\n        for j in range(i + 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n\n    return tri[0][0]"], "evaluation": false}
{"problem_id": 148, "prompt": "def sum_digits_twoparts(N) : \n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n", "generated_code": ["\ndef sum_digits_twoparts(N) : \n    if N == 0 : \n        return 0\n    if N == 1 : \n        return 1\n    if N == 2 : \n        return 2\n    if N == 3 : \n        return 3\n    if N == 4 : \n        return 4\n    if N == 5 : \n        return 5\n    if N == 6 : \n        return 6\n    if N == 7 : \n        return 7\n    if N == 8 : \n        return 8\n    if N == 9 : \n        return 9\n    if N == 10 : \n        return 10\n    if N == 11 : \n        return 11\n    if N == 12 : \n        return 12\n    if N == 13 : \n        return 13\n    if N == 14 : \n        return 14\n    if N == 15 : \n        return 15\n    if N == 16 : \n        return 16\n    if N == 17 : \n        return 17\n    if N == 18 : \n        return 18\n    if N == 19 : \n        return 19\n    if N == 20 : \n        return 20\n    if N == 21 : \n        return 21\n    if N == 22 : \n        return 22\n    if N == 23 : \n        return 23\n    if N == 24 : \n        return 24\n    if N == 25 : \n        return 25\n    if N == 26 : \n        return 26\n    if N == 27 : \n        return 27\n    if N == 28 : \n        return 28\n    if N == 29 : \n        return 29\n    if N == 30 : \n        return 30\n    if N == 31 : \n        return 31\n    if N == 32 : \n        return 32\n    if N ==", "\ndef sum_digits_twoparts(N) : \n    if N == 0 : \n        return 0\n    if N == 1 : \n        return 1\n    if N == 2 : \n        return 2\n    if N == 3 : \n        return 3\n    if N == 4 : \n        return 4\n    if N == 5 : \n        return 5\n    if N == 6 : \n        return 6\n    if N == 7 : \n        return 7\n    if N == 8 : \n        return 8\n    if N == 9 : \n        return 9\n    if N == 10 : \n        return 10\n    if N == 11 : \n        return 11\n    if N == 12 : \n        return 12\n    if N == 13 : \n        return 13\n    if N == 14 : \n        return 14\n    if N == 15 : \n        return 15\n    if N == 16 : \n        return 16\n    if N == 17 : \n        return 17\n    if N == 18 : \n        return 18\n    if N == 19 : \n        return 19\n    if N == 20 : \n        return 20\n    if N == 21 : \n        return 21\n    if N == 22 : \n        return 22\n    if N == 23 : \n        return 23\n    if N == 24 : \n        return 24\n    if N == 25 : \n        return 25\n    if N == 26 : \n        return 26\n    if N == 27 : \n        return 27\n    if N == 28 : \n        return 28\n    if N == 29 : \n        return 29\n    if N == 30 : \n        return 30\n    if N == 31 : \n        return 31\n    if N == 32 : \n        return 32\n    if N <", "\ndef sum_digits_twoparts(N) : \n    if N == 0 : \n        return 0\n    if N == 1 : \n        return 1\n    if N == 2 : \n        return 2\n    if N == 3 : \n        return 3\n    if N == 4 : \n        return 4\n    if N == 5 : \n        return 5\n    if N == 6 : \n        return 6\n    if N == 7 : \n        return 7\n    if N == 8 : \n        return 8\n    if N == 9 : \n        return 9\n    if N == 10 : \n        return 10\n    if N == 11 : \n        return 11\n    if N == 12 : \n        return 12\n    if N == 13 : \n        return 13\n    if N == 14 : \n        return 14\n    if N == 15 : \n        return 15\n    if N == 16 : \n        return 16\n    if N == 17 : \n        return 17\n    if N == 18 : \n        return 18\n    if N == 19 : \n        return 19\n    if N == 20 : \n        return 20\n    if N == 21 : \n        return 21\n    if N == 22 : \n        return 22\n    if N == 23 : \n        return 23\n    if N == 24 : \n        return 24\n    if N == 25 : \n        return 25\n    if N == 26 : \n        return 26\n    if N == 27 : \n        return 27\n    if N == 28 : \n        return 28\n    if N == 29 : \n        return 29\n    if N == 30 : \n        return 30\n    if N == 31 : \n        return 31\n    if N == 32 : \n        return 32\n    if N >="], "evaluation": false}
{"problem_id": 149, "prompt": "def longest_subseq_with_diff_one(arr, n): \n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    \"\"\"\n", "generated_code": ["\ndef longest_subseq_with_diff_one(arr, n): \n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == 1 or arr[i] - arr[j] == -1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "\ndef longest_subseq_with_diff_one(arr, n): \n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == 1 or arr[i] - arr[j] == -1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "\ndef longest_subseq_with_diff_one(arr, n): \n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == 1 or arr[i] - arr[j] == -1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"], "evaluation": true}
{"problem_id": 150, "prompt": "def does_Contain_B(a,b,c): \n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    \"\"\"\n", "generated_code": ["\ndef does_Contain_B(a,b,c): \n    if b in range(a,c+1):\n        return True\n    else:\n        return False", "\ndef does_Contain_B(a,b,c): \n    if c in range(a,b+1):\n        return True\n    else:\n        return False", "\ndef does_Contain_B(a,b,c): \n    if b in range(a,c+1):\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 151, "prompt": "def is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    \"\"\"\n", "generated_code": ["\ndef is_coprime(x,y):\n    if gcd(x,y) == 1:\n        return True\n    else:\n        return False", "\ndef is_coprime(x,y):\n    if gcd(x,y) == 1:\n        return True\n    return False", "\ndef is_coprime(x,y):\n    if gcd(x,y)==1:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 152, "prompt": "def merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    \"\"\"\n", "generated_code": ["\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n\n    return merge(left, right)", "\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)"], "evaluation": false}
{"problem_id": 153, "prompt": "def parabola_vertex(a, b, c): \n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_vertex(a, b, c): \n    if a == 0:\n        return None\n    else:\n        x = -b / (2 * a)\n        y = (4 * a * x**2 + b * x + c) / (4 * a)\n        return (x, y)", "\ndef parabola_vertex(a, b, c): \n    if a == 0:\n        return None\n    else:\n        x = -b / (2 * a)\n        y = (4 * a * x**2 + b * x + c) / (4 * a)\n        return (x, y)", "\ndef parabola_vertex(a, b, c): \n    if a == 0:\n        return None\n    else:\n        x = -b / (2 * a)\n        y = (4 * a * x**2 + b * x + c) / (4 * a)\n        return (x, y)"], "evaluation": false}
{"problem_id": 154, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    \"\"\"\n", "generated_code": ["\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if j == N:\n                result.append(nums[i][j])\n    return result", "\ndef specified_element(nums, N):\n    return [nums[i][N] for i in range(len(nums))]", "\ndef specified_element(nums, N):\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == N:\n                result.append(nums[i][j])\n    return result"], "evaluation": true}
{"problem_id": 155, "prompt": "def even_bit_toggle_number(n) : \n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n", "generated_code": ["\ndef even_bit_toggle_number(n) : \n    return n ^ (n >> 1)", "\ndef even_bit_toggle_number(n) : \n    return (n & 0xAAAAAAAA) >> 1 | (n & 0x55555555) << 1", "\ndef even_bit_toggle_number(n) : \n    return (n & 0xAAAAAAAA) >> 1 | (n & 0x55555555) << 1"], "evaluation": false}
{"problem_id": 156, "prompt": "def tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n", "generated_code": ["\ndef tuple_int_str(tuple_str):\n    return tuple(int(i) for i in tuple_str)", "\ndef tuple_int_str(tuple_str):\n    return tuple(int(i) for i in tuple_str)", "\ndef tuple_int_str(tuple_str):\n    return tuple(int(x) for x in tuple_str)"], "evaluation": false}
{"problem_id": 157, "prompt": "from itertools import groupby\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n", "generated_code": ["from itertools import groupby\n\ndef encode_list(list1):\n    return [(len(list(group)), key) for key, group in groupby(list1)]", "from itertools import groupby\n\ndef encode_list(list1):\n    return [(len(list(group)), key) for key, group in groupby(list1)]", "from itertools import groupby\n\ndef encode_list(list1):\n    return [(len(list(group)), key) for key, group in groupby(sorted(list1))]"], "evaluation": false}
{"problem_id": 158, "prompt": "def min_Ops(arr,n,k): \n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    \"\"\"\n", "generated_code": ["\ndef min_Ops(arr,n,k): \n    if n == 1:\n        return 0\n    if k == 0:\n        return 0\n    if k < 0:\n        return -1\n    if k > n:\n        return -1\n    if k == 1:\n        return max(arr) - min(arr)\n    if k == 2:\n        return max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 3:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 4:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 5:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 6:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 7:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 8:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 9:\n        return max(arr) - min(arr) + max", "\ndef min_Ops(arr,n,k): \n    if n == 1:\n        return 0\n    if k == 0:\n        return 0\n    if k < 0:\n        return -1\n    if k > n:\n        return -1\n    if k == 1:\n        return max(arr) - min(arr)\n    if k == 2:\n        return max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 3:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 4:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 5:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 6:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 7:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 8:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    return max(arr) - min(arr) + max(arr) - min(arr)", "\ndef min_Ops(arr,n,k): \n    if n == 1:\n        return 0\n    if k == 0:\n        return 0\n    if k < 0:\n        return -1\n    if k > n:\n        return -1\n    if k == 1:\n        return max(arr) - min(arr)\n    if k == 2:\n        return max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 3:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 4:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 5:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 6:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 7:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    if k == 8:\n        return max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr) + max(arr) - min(arr)\n    return max(arr) - min(arr) + min_Ops(arr,n-"], "evaluation": false}
{"problem_id": 159, "prompt": "def month_season(month,days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    \"\"\"\n", "generated_code": ["\ndef month_season(month,days):\n    if month == 12 or month == 1 or month == 2:\n        if days <= 21:\n            print(\"Winter\")\n        else:\n            print(\"Spring\")\n    elif month == 3 or month == 4 or month == 5:\n        if days <= 20:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif month == 6 or month == 7 or month == 8:\n        if days <= 22:\n            print(\"Summer\")\n        else:\n            print(\"Autumn\")\n    elif month == 9 or month == 10 or month == 11:\n        if days <= 22:\n            print(\"Autumn\")\n        else:\n            print(\"Winter\")\n    else:\n        print(\"Invalid month\")", "\ndef month_season(month,days):\n    if month == 12 or month == 1 or month == 2:\n        if days <= 21:\n            print(\"Winter\")\n        else:\n            print(\"Spring\")\n    elif month == 3 or month == 4 or month == 5:\n        if days <= 20:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif month == 6 or month == 7 or month == 8:\n        if days <= 22:\n            print(\"Summer\")\n        else:\n            print(\"Autumn\")\n    elif month == 9 or month == 10 or month == 11:\n        if days <= 21:\n            print(\"Autumn\")\n        else:\n            print(\"Winter\")\n    else:\n        print(\"Invalid month\")", "\ndef month_season(month,days):\n    if month == 12 or month == 1 or month == 2:\n        if days <= 21:\n            print(\"Winter\")\n        else:\n            print(\"Spring\")\n    elif month == 3 or month == 4 or month == 5:\n        if days <= 20:\n            print(\"Spring\")\n        else:\n            print(\"Summer\")\n    elif month == 6 or month == 7 or month == 8:\n        if days <= 22:\n            print(\"Summer\")\n        else:\n            print(\"Autumn\")\n    elif month == 9 or month == 10 or month == 11:\n        if days <= 22:\n            print(\"Autumn\")\n        else:\n            print(\"Winter\")\n    else:\n        print(\"Invalid month\")"], "evaluation": false}
{"problem_id": 160, "prompt": "def solution (a, b, n): \n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    \"\"\"\n", "generated_code": ["\ndef solution (a, b, n): \n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n / b)\n    elif b == 0:\n        return (n / a, 0)\n    else:\n        x = (n - b) / a\n        y = n - a * x\n        return (x, y)", "\ndef solution (a, b, n): \n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n / b)\n    elif b == 0:\n        return (n / a, 0)\n    else:\n        x = (n - b) / a\n        y = (n * b) / a\n        return (x, y)", "\ndef solution (a, b, n): \n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n / b)\n    elif b == 0:\n        return (n / a, 0)\n    else:\n        x = (n - b) / a\n        y = (n * b) / a\n        return (x, y)"], "evaluation": false}
{"problem_id": 161, "prompt": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "generated_code": ["\ndef remove_elements(list1, list2):\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1", "\ndef remove_elements(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1", "\ndef remove_elements(list1, list2):\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"], "evaluation": true}
{"problem_id": 162, "prompt": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n", "generated_code": ["\ndef sum_series(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)", "\ndef sum_series(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)", "\ndef sum_series(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)"], "evaluation": true}
{"problem_id": 163, "prompt": "from math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    \"\"\"\n", "generated_code": ["from math import tan, pi\n\ndef area_polygon(s,l):\n    return (0.25*s*l)/tan(pi/len(s))", "from math import tan, pi\n\ndef area_polygon(s,l):\n    return (0.25*s*l)/tan(pi/s)", "from math import tan, pi\n\ndef area_polygon(s,l):\n    return (0.25*s*l)/tan(pi/len(s))"], "evaluation": false}
{"problem_id": 164, "prompt": "import math \ndef areEquivalent(num1,num2): \n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n", "generated_code": ["import math \n\ndef areEquivalent(num1,num2): \n    sum1=0\n    sum2=0\n    for i in range(1,int(math.sqrt(num1))+1):\n        if num1%i==0:\n            sum1+=i\n            if i!=num1/i:\n                sum1+=num1/i\n    for j in range(1,int(math.sqrt(num2))+1):\n        if num2%j==0:\n            sum2+=j\n            if j!=num2/j:\n                sum2+=num2/j\n    if sum1==sum2:\n        return True\n    else:\n        return False", "import math \n\ndef areEquivalent(num1,num2): \n    sum1=0\n    sum2=0\n    for i in range(1,int(math.sqrt(num1))+1):\n        if num1%i==0:\n            sum1+=i\n            if i!=num1/i:\n                sum1+=num1/i\n    for j in range(1,int(math.sqrt(num2))+1):\n        if num2%j==0:\n            sum2+=j\n            if j!=num2/j:\n                sum2+=num2/j\n    if sum1==sum2:\n        return True\n    else:\n        return False", "import math \n\ndef areEquivalent(num1,num2): \n    sum1=0\n    sum2=0\n    for i in range(1,int(math.sqrt(num1))+1):\n        if num1%i==0:\n            sum1+=i\n            if i!=num1/i:\n                sum1+=num1/i\n    for j in range(1,int(math.sqrt(num2))+1):\n        if num2%j==0:\n            sum2+=j\n            if j!=num2/j:\n                sum2+=num2/j\n    if sum1==sum2:\n        return True\n    else:\n        return False"], "evaluation": false}
{"problem_id": 165, "prompt": "def count_char_position(str1): \n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n", "generated_code": ["\ndef count_char_position(str1): \n    count = [0] * 26\n    for i in range(len(str1)):\n        val = ord(str1[i]) - ord('A')\n        count[val] = count[val] + 1\n    print(count)", "\ndef count_char_position(str1): \n    count = [0] * 26\n    for i in range(len(str1)):\n        val = ord(str1[i]) - ord('A')\n        count[val] = count[val] + 1\n    print(count)\n    return count", "\ndef count_char_position(str1): \n    count = [0] * 26\n    for i in range(len(str1)):\n        val = ord(str1[i]) - ord('A')\n        count[val] = count[val] + 1\n    print(count)\n    return count"], "evaluation": false}
{"problem_id": 166, "prompt": "def find_even_Pair(A,N): \n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    \"\"\"\n", "generated_code": ["\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2 == 0:\n                count += 1\n    return count", "\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2 == 0:\n                count += 1\n    return count", "\ndef find_even_Pair(A,N): \n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2 == 0:\n                count += 1\n    return count"], "evaluation": true}
{"problem_id": 167, "prompt": "def next_Power_Of_2(n): \n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "generated_code": ["\ndef next_Power_Of_2(n): \n    if (n & (n - 1) == 0): \n        return n \n      \n    return next_Power_Of_2(n - 1)", "\ndef next_Power_Of_2(n): \n    if (n & (n - 1) == 0): \n        return n \n      \n    return next_Power_Of_2(n - 1)", "\ndef next_Power_Of_2(n): \n    if (n & (n - 1) == 0): \n        return n \n      \n    return 1 << (len(bin(n)) - 2)"], "evaluation": false}
{"problem_id": 168, "prompt": "def frequency(a,x): \n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    \"\"\"\n", "generated_code": ["\ndef frequency(a,x): \n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count = count + 1\n    return count", "\ndef frequency(a,x): \n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count", "\ndef frequency(a,x): \n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count = count + 1\n    return count"], "evaluation": true}
{"problem_id": 169, "prompt": "def get_pell(n): \n    \"\"\"\n    Write a function to calculate the nth pell number.\n    \"\"\"\n", "generated_code": ["\ndef get_pell(n): \n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return get_pell(n - 1) + 2 * get_pell(n - 2)", "\ndef get_pell(n): \n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return get_pell(n - 1) + 2 * get_pell(n - 2)", "\ndef get_pell(n): \n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return get_pell(n - 1) + 2 * get_pell(n - 2)"], "evaluation": false}
{"problem_id": 170, "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    \"\"\"\n", "generated_code": ["\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum", "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum", "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"], "evaluation": true}
{"problem_id": 171, "prompt": "import math\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    \"\"\"\n", "generated_code": ["import math\n\ndef perimeter_pentagon(a):\n    return 5*a", "import math\n\ndef perimeter_pentagon(a):\n    return 5 * a", "import math\n\ndef perimeter_pentagon(a):\n    return a * 5"], "evaluation": true}
{"problem_id": 172, "prompt": "def count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    \"\"\"\n", "generated_code": ["\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count", "\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count", "\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count"], "evaluation": true}
{"problem_id": 173, "prompt": "import re\ndef remove_splchar(text): \n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef remove_splchar(text): \n    return re.sub(r'[^a-zA-Z0-9]', '', text)", "import re\n\ndef remove_splchar(text): \n    return re.sub(r'[^a-zA-Z0-9]', '', text)", "import re\n\ndef remove_splchar(text): \n    return re.sub(r'[^a-zA-Z0-9]', '', text)"], "evaluation": true}
{"problem_id": 174, "prompt": "def group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n", "generated_code": ["\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d", "\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d", "\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d"], "evaluation": true}
{"problem_id": 175, "prompt": "def is_valid_parenthese( str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    \"\"\"\n", "generated_code": ["\ndef is_valid_parenthese( str1):\n    stack = []\n    for i in str1:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False", "\ndef is_valid_parenthese( str1):\n    stack = []\n    for i in str1:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False", "\ndef is_valid_parenthese( str1):\n    stack = []\n    for i in str1:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"], "evaluation": true}
{"problem_id": 176, "prompt": "def perimeter_triangle(a,b,c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    \"\"\"\n", "generated_code": ["\ndef perimeter_triangle(a,b,c):\n    return a+b+c", "\ndef perimeter_triangle(a,b,c):\n    return a + b + c", "\ndef perimeter_triangle(a,b,c):\n    perimeter = a + b + c\n    return perimeter"], "evaluation": true}
{"problem_id": 177, "prompt": "def answer(L,R): \n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n", "generated_code": ["\ndef answer(L,R): \n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n\n    def lcm(a,b):\n        return (a*b)//gcd(a,b)\n\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if lcm(i,j)>=L and lcm(i,j)<=R:\n                return [i,j]\n    return [-1,-1]", "\ndef answer(L,R): \n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n\n    def lcm(a,b):\n        return (a*b)//gcd(a,b)\n\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if lcm(i,j)>=L and lcm(i,j)<=R:\n                return [i,j]", "\ndef answer(L,R): \n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n\n    def lcm(a,b):\n        return (a*b)//gcd(a,b)\n\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if lcm(i,j)>=L and lcm(i,j)<=R:\n                return [i,j]"], "evaluation": false}
{"problem_id": 178, "prompt": "import re\ndef string_literals(patterns,text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    \"\"\"\n", "generated_code": ["import re\n\ndef string_literals(patterns,text):\n    for pattern in patterns:\n        if re.search(pattern,text):\n            return True\n    return False", "import re\n\ndef string_literals(patterns,text):\n    for pattern in patterns:\n        if re.search(pattern,text):\n            return True\n    return False", "import re\n\ndef string_literals(patterns,text):\n    for pattern in patterns:\n        if re.search(pattern,text):\n            return True\n    return False"], "evaluation": false}
{"problem_id": 179, "prompt": "def is_num_keith(x): \n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    \"\"\"\n", "generated_code": ["\ndef is_num_keith(x): \n    if x == 1:\n        return True\n    if x % 9 == 0:\n        return is_num_keith(int(x/9))\n    return False", "\ndef is_num_keith(x): \n    if x == 1:\n        return True\n    if x % 9 == 0:\n        return is_num_keith(int(x/9))\n    return False", "\ndef is_num_keith(x): \n    if x == 1:\n        return True\n    if x % 9 == 0:\n        return is_num_keith(int(x/9))\n    return False"], "evaluation": false}
{"problem_id": 180, "prompt": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    \"\"\"\n", "generated_code": ["from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6373.0\n\n    lat1 = radians(slat)\n    lon1 = radians(slon)\n    lat2 = radians(elat)\n    lon2 = radians(elon)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * acos(min(1, sqrt(a)))\n\n    distance = R * c\n    return distance", "from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6373.0\n\n    lat1 = radians(slat)\n    lon1 = radians(slon)\n    lat2 = radians(elat)\n    lon2 = radians(elon)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * acos(min(1, sqrt(a)))\n\n    distance = R * c\n    return distance", "from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6373.0\n\n    lat1 = radians(slat)\n    lon1 = radians(slon)\n    lat2 = radians(elat)\n    lon2 = radians(elon)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * acos(min(1, sqrt(a)))\n\n    distance = R * c\n    return distance"], "evaluation": false}
{"problem_id": 181, "prompt": "def common_prefix (arr, n): \n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    \"\"\"\n", "generated_code": ["\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return longest_common_prefix(arr[0], arr[1])\n    else:\n        return longest_common_prefix(arr[0], longest_common_prefix(arr[1:], n-1))", "\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return longest_common_prefix(arr[0], arr[1])\n    else:\n        return longest_common_prefix(longest_common_prefix(arr[0], arr[1]), arr[2])", "\ndef common_prefix (arr, n): \n    if n == 0:\n        return \"\"\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return longest_common_prefix(arr[0], arr[1])\n    else:\n        return longest_common_prefix(arr[0], longest_common_prefix(arr[1:], n - 1))"], "evaluation": false}
{"problem_id": 182, "prompt": "import re\ndef find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special = re.findall(r'[!@#$%^&*]', string)\n    return uppercase, lowercase, numeric, special", "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special = re.findall(r'[!@#$%^&*]', string)\n    return uppercase, lowercase, numeric, special", "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special_character = re.findall(r'[!@#$%^&*()]', string)\n    return uppercase, lowercase, numeric, special_character"], "evaluation": true}
{"problem_id": 183, "prompt": "def count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n", "generated_code": ["\ndef count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count", "\ndef count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count", "\ndef count_pairs(arr, n, k):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 184, "prompt": "def greater_specificnum(list,num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    \"\"\"\n", "generated_code": ["\ndef greater_specificnum(list,num):\n    greater = []\n    for i in list:\n        if i > num:\n            greater.append(i)\n    return greater", "\ndef greater_specificnum(list,num):\n    return [x for x in list if x > num]", "\ndef greater_specificnum(list,num):\n    greater = []\n    for i in list:\n        if i > num:\n            greater.append(i)\n    return greater"], "evaluation": false}
{"problem_id": 185, "prompt": "def parabola_focus(a, b, c): \n    \"\"\"\n    Write a function to find the focus of a parabola.\n    \"\"\"\n", "generated_code": ["\ndef parabola_focus(a, b, c): \n    if a == 0:\n        return None\n    else:\n        return -b / a", "\ndef parabola_focus(a, b, c): \n    if a == 0:\n        return None\n    else:\n        return -b / (2 * a)", "\ndef parabola_focus(a, b, c): \n    if a == 0:\n        return None\n    else:\n        return -b / (2*a)"], "evaluation": false}
{"problem_id": 186, "prompt": "import re\ndef check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    \"\"\"\n", "generated_code": ["import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False", "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False", "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False"], "evaluation": false}
{"problem_id": 187, "prompt": "def longest_common_subsequence(X, Y, m, n): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    \"\"\"\n", "generated_code": ["\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0:\n        return 0\n    elif X[m - 1] == Y[n - 1]:\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n))", "\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0:\n        return 0\n    elif X[m - 1] == Y[n - 1]:\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n))", "\ndef longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0:\n        return 0\n    elif X[m - 1] == Y[n - 1]:\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n))"], "evaluation": true}
{"problem_id": 188, "prompt": "def prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n", "generated_code": ["\ndef prod_Square(n):\n    for i in range(0, n + 1):\n        for j in range(0, i + 1):\n            if i * i + j * j == n:\n                return True\n    return False", "\ndef prod_Square(n):\n    for i in range(0, n + 1):\n        for j in range(0, n + 1):\n            if i * i + j * j == n:\n                return True\n    return False", "\ndef prod_Square(n):\n    for i in range(0, n + 1):\n        for j in range(0, i + 1):\n            if i * i + j * j == n:\n                return True\n    return False"], "evaluation": false}
{"problem_id": 189, "prompt": "def first_Missing_Positive(arr,n): \n    \"\"\"\n    Write a python function to find the first missing positive number.\n    \"\"\"\n", "generated_code": ["\ndef first_Missing_Positive(arr,n): \n    for i in range(n): \n        if (abs(arr[i]) - 1 < n and arr[abs(arr[i]) - 1] > 0): \n            arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1] \n\n    for i in range(n): \n        if (arr[i] > 0): \n            return i + 1\n\n    return n + 1", "\ndef first_Missing_Positive(arr,n): \n    for i in range(n): \n        if (abs(arr[i]) - 1 < n and arr[abs(arr[i]) - 1] > 0): \n            arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1] \n\n    for i in range(n): \n        if (arr[i] > 0): \n            return i + 1\n\n    return n + 1", "\ndef first_Missing_Positive(arr,n): \n    for i in range(n): \n        if (abs(arr[i]) - 1 < n and arr[abs(arr[i]) - 1] > 0): \n            arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1] \n\n    for i in range(n): \n        if (arr[i] > 0): \n            return i + 1\n\n    return n + 1"], "evaluation": false}
{"problem_id": 190, "prompt": "def count_Intgral_Points(x1,y1,x2,y2): \n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n", "generated_code": ["\ndef count_Intgral_Points(x1,y1,x2,y2): \n    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i%1==0 and j%1==0:\n                count+=1\n    return count", "\ndef count_Intgral_Points(x1,y1,x2,y2): \n    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i%1==0 and j%1==0:\n                count += 1\n    return count", "\ndef count_Intgral_Points(x1,y1,x2,y2): \n    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i%1==0 and j%1==0:\n                count += 1\n    return count"], "evaluation": false}
{"problem_id": 191, "prompt": "def check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    \"\"\"\n", "generated_code": ["\ndef check_monthnumber(monthname3):\n    if monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n        return \"30 days\"\n    elif monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return \"31 days\"\n    elif monthname3 == \"February\":\n        return \"28 or 29 days\"\n    else:\n        return \"Invalid month name\"", "\ndef check_monthnumber(monthname3):\n    if monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n        return \"30 days\"\n    elif monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return \"31 days\"\n    elif monthname3 == \"February\":\n        return \"28 or 29 days\"\n    else:\n        return \"Invalid month name\"", "\ndef check_monthnumber(monthname3):\n    if monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n        return \"30 days\"\n    elif monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return \"31 days\"\n    elif monthname3 == \"February\":\n        return \"28 or 29 days\"\n    else:\n        return \"Wrong month name\""], "evaluation": false}
{"problem_id": 192, "prompt": "def check_String(str): \n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    \"\"\"\n", "generated_code": ["\ndef check_String(str): \n    if str.isalnum():\n        return False\n    else:\n        return True", "\ndef check_String(str): \n    if str.isalnum():\n        return False\n    else:\n        return True", "\ndef check_String(str): \n    if str.isalnum() == False:\n        return False\n    else:\n        return True"], "evaluation": false}
{"problem_id": 193, "prompt": "def remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))", "\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))", "\ndef remove_tuple(test_tup):\n    return list(set(test_tup))"], "evaluation": true}
{"problem_id": 194, "prompt": "def octal_To_Decimal(n):  \n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    \"\"\"\n", "generated_code": ["\ndef octal_To_Decimal(n):  \n    decimal_value = 0  \n    base = 1  \n    temp = n  \n    while(temp):  \n        last_digit = temp % 10  \n        temp = int(temp / 10)  \n        decimal_value += last_digit * base  \n        base = base * 8  \n    return decimal_value", "\ndef octal_To_Decimal(n):  \n    decimal_value = 0  \n    base = 1  \n    temp = n  \n    while(temp):  \n        last_digit = temp % 10  \n        temp = int(temp / 10)  \n        decimal_value += last_digit * base  \n        base = base * 8  \n    return decimal_value", "\ndef octal_To_Decimal(n):  \n    decimal_value = 0  \n    base = 1  \n    temp = n  \n    while(temp):  \n        last_digit = temp % 10  \n        temp = int(temp / 10)  \n        decimal_value += last_digit * base  \n        base = base * 8  \n    return decimal_value"], "evaluation": true}
{"problem_id": 195, "prompt": "def first(arr,x,n): \n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n", "generated_code": ["\ndef first(arr,x,n): \n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "\ndef first(arr,x,n): \n    low = 0\n    high = n-1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "\ndef first(arr,x,n): \n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1"], "evaluation": true}
{"problem_id": 196, "prompt": "def remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    \"\"\"\n", "generated_code": ["\ndef remove_tuples(test_list, K):\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            test_list.remove(test_list[i])\n    return test_list", "\ndef remove_tuples(test_list, K):\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            test_list.remove(test_list[i])\n    return test_list", "\ndef remove_tuples(test_list, K):\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            test_list.remove(test_list[i])\n    return test_list"], "evaluation": false}
{"problem_id": 197, "prompt": "def find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    \"\"\"\n", "generated_code": ["\ndef find_exponentio(test_tup1, test_tup2):\n    return test_tup1[0] ** test_tup2[0], test_tup1[1] ** test_tup2[1]", "\ndef find_exponentio(test_tup1, test_tup2):\n    return test_tup1[0] ** test_tup2[0], test_tup1[1] ** test_tup2[1]", "\ndef find_exponentio(test_tup1, test_tup2):\n    return test_tup1[0]**test_tup2[0], test_tup1[1]**test_tup2[1]"], "evaluation": false}
{"problem_id": 198, "prompt": "import math\ndef largest_triangle(a,b): \n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n", "generated_code": ["import math\n\ndef largest_triangle(a,b): \n    if a == 0 or b == 0:\n        return 0\n    if a < b:\n        return largest_triangle(b,a)\n    if a == b:\n        return math.pi * a * a / 4\n    if a > b:\n        return math.pi * b * b / 4 * (1 - (3 * (a - b) * (a - b)) / (4 * b * b))", "import math\n\ndef largest_triangle(a,b): \n    if a == 0 or b == 0:\n        return 0\n    if a < b:\n        return largest_triangle(b,a)\n    if a == b:\n        return math.pi * a * a / 4\n    if a > b:\n        return math.pi * b * b / 4 * (1 - (3 * (a - b) * (a - b)) / (4 * b * b))", "import math\n\ndef largest_triangle(a,b): \n    if a == 0 or b == 0:\n        return 0\n    if a < b:\n        return largest_triangle(b,a)\n    if a == b:\n        return math.pi * a * a / 4\n    if a > b:\n        return math.pi * b * b / 4 * (1 - (3 * (a - b) * (a - b)) / (4 * b * b))"], "evaluation": false}
{"problem_id": 199, "prompt": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n", "generated_code": ["\ndef highest_Power_of_2(n): \n    count = 0\n    while (1 << count) <= n: \n        count += 1\n    return count - 1", "\ndef highest_Power_of_2(n): \n    count = 0\n    while (1 << count) <= n: \n        count += 1\n  \n    return count - 1", "\ndef highest_Power_of_2(n): \n    count = 0\n    while (1 << count) <= n: \n        count += 1\n    return count - 1"], "evaluation": false}
{"problem_id": 200, "prompt": "def position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    \"\"\"\n", "generated_code": ["\ndef position_max(list1):\n    return [i for i, x in enumerate(list1) if x == max(list1)]", "\ndef position_max(list1):\n    return [i for i, j in enumerate(list1) if j == max(list1)]", "\ndef position_max(list1):\n    return [i for i, x in enumerate(list1) if x == max(list1)]"], "evaluation": true}
